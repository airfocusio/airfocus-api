{
  "components": {
    "schemas": {
      "AiFieldSettings": {
        "properties": {
          "prompt": {
            "type": "string"
          },
          "shouldAutofill": {
            "type": "boolean"
          }
        },
        "required": [
          "shouldAutofill"
        ],
        "title": "AiFieldSettings",
        "type": "object"
      },
      "ApiKey": {
        "properties": {
          "createdAt": {
            "format": "date-time",
            "type": "string"
          },
          "id": {
            "format": "uuid",
            "type": "string"
          },
          "lastUsedAt": {
            "format": "date-time",
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "scopes": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "uniqueItems": true
          },
          "userId": {
            "format": "uuid",
            "type": "string"
          }
        },
        "required": [
          "id",
          "userId",
          "scopes",
          "name",
          "createdAt"
        ],
        "title": "ApiKey",
        "type": "object"
      },
      "App": {
        "discriminator": {
          "mapping": {
            "forms": "#/components/schemas/FormsApp",
            "health-check-ins": "#/components/schemas/HealthCheckInsApp",
            "insights": "#/components/schemas/InsightsApp",
            "mirror": "#/components/schemas/MirrorApp",
            "okr": "#/components/schemas/OkrApp",
            "portal": "#/components/schemas/PortalApp",
            "portfolio": "#/components/schemas/PortfolioApp",
            "prioritization": "#/components/schemas/PrioritizationApp",
            "voting": "#/components/schemas/VotingApp"
          },
          "propertyName": "typeId"
        },
        "oneOf": [
          {
            "$ref": "#/components/schemas/FormsApp"
          },
          {
            "$ref": "#/components/schemas/HealthCheckInsApp"
          },
          {
            "$ref": "#/components/schemas/InsightsApp"
          },
          {
            "$ref": "#/components/schemas/MirrorApp"
          },
          {
            "$ref": "#/components/schemas/OkrApp"
          },
          {
            "$ref": "#/components/schemas/PortalApp"
          },
          {
            "$ref": "#/components/schemas/PortfolioApp"
          },
          {
            "$ref": "#/components/schemas/PrioritizationApp"
          },
          {
            "$ref": "#/components/schemas/VotingApp"
          }
        ],
        "title": "App"
      },
      "ApplyTemplateRequest": {
        "properties": {
          "defaultPermission": {
            "$ref": "#/components/schemas/Permission"
          },
          "groupId": {
            "format": "uuid",
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "parameters": {
            "$ref": "#/components/schemas/TemplateParameters"
          },
          "permissions": {
            "additionalProperties": {
              "$ref": "#/components/schemas/Permission"
            },
            "type": "object"
          },
          "userGroupPermissions": {
            "additionalProperties": {
              "$ref": "#/components/schemas/Permission"
            },
            "type": "object"
          }
        },
        "required": [
          "parameters",
          "permissions",
          "userGroupPermissions"
        ],
        "title": "ApplyTemplateRequest",
        "type": "object"
      },
      "AttachmentSearchQuery": {
        "properties": {
          "itemId": {
            "format": "uuid",
            "type": "string"
          }
        },
        "title": "AttachmentSearchQuery",
        "type": "object"
      },
      "BooleanFieldWithFieldEmbed": {
        "properties": {
          "_embedded": {
            "$ref": "#/components/schemas/FieldEmbed"
          },
          "createdAt": {
            "format": "date-time",
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "id": {
            "format": "uuid",
            "type": "string"
          },
          "isTeamField": {
            "type": "boolean"
          },
          "name": {
            "type": "string"
          },
          "required": {
            "type": "boolean"
          },
          "teamId": {
            "format": "uuid",
            "type": "string"
          },
          "typeId": {
            "const": "boolean",
            "type": "string"
          }
        },
        "required": [
          "id",
          "typeId",
          "name",
          "description",
          "isTeamField",
          "teamId",
          "createdAt",
          "required",
          "_embedded"
        ],
        "title": "BooleanFieldWithFieldEmbed",
        "type": "object"
      },
      "BulkInviteUsersRequest": {
        "properties": {
          "users": {
            "items": {
              "$ref": "#/components/schemas/BulkInviteUsersRequestUser"
            },
            "type": "array"
          }
        },
        "required": [
          "users"
        ],
        "title": "BulkInviteUsersRequest",
        "type": "object"
      },
      "BulkInviteUsersRequestUser": {
        "properties": {
          "email": {
            "type": "string"
          },
          "fullName": {
            "type": "string"
          },
          "role": {
            "$ref": "#/components/schemas/Role"
          }
        },
        "required": [
          "email",
          "role"
        ],
        "title": "BulkInviteUsersRequestUser",
        "type": "object"
      },
      "ChangePasswordRequest": {
        "properties": {
          "newPassword": {
            "type": "string"
          },
          "oldPassword": {
            "type": "string"
          }
        },
        "required": [
          "oldPassword",
          "newPassword"
        ],
        "title": "ChangePasswordRequest",
        "type": "object"
      },
      "ChangeUserDisabledRequest": {
        "properties": {
          "disabled": {
            "type": "boolean"
          },
          "userId": {
            "format": "uuid",
            "type": "string"
          }
        },
        "required": [
          "userId",
          "disabled"
        ],
        "title": "ChangeUserDisabledRequest",
        "type": "object"
      },
      "ChangeUserRoleRequest": {
        "properties": {
          "role": {
            "$ref": "#/components/schemas/Role"
          },
          "userId": {
            "format": "uuid",
            "type": "string"
          }
        },
        "required": [
          "userId",
          "role"
        ],
        "title": "ChangeUserRoleRequest",
        "type": "object"
      },
      "CommentBulkAction": {
        "discriminator": {
          "mapping": {
            "create": "#/components/schemas/CommentBulkCreate",
            "delete": "#/components/schemas/CommentBulkDelete",
            "patch": "#/components/schemas/CommentBulkPatch",
            "update": "#/components/schemas/CommentBulkUpdate"
          },
          "propertyName": "type"
        },
        "oneOf": [
          {
            "$ref": "#/components/schemas/CommentBulkCreate"
          },
          {
            "$ref": "#/components/schemas/CommentBulkDelete"
          },
          {
            "$ref": "#/components/schemas/CommentBulkPatch"
          },
          {
            "$ref": "#/components/schemas/CommentBulkUpdate"
          }
        ],
        "title": "CommentBulkAction"
      },
      "CommentBulkCreate": {
        "properties": {
          "resource": {
            "$ref": "#/components/schemas/ItemComment"
          },
          "type": {
            "enum": [
              "create"
            ],
            "type": "string"
          }
        },
        "required": [
          "resource",
          "type"
        ],
        "title": "CommentBulkCreate",
        "type": "object"
      },
      "CommentBulkDelete": {
        "properties": {
          "id": {
            "format": "uuid",
            "type": "string"
          },
          "type": {
            "enum": [
              "delete"
            ],
            "type": "string"
          }
        },
        "required": [
          "id",
          "type"
        ],
        "title": "CommentBulkDelete",
        "type": "object"
      },
      "CommentBulkPatch": {
        "properties": {
          "id": {
            "format": "uuid",
            "type": "string"
          },
          "transform": {
            "$ref": "#/components/schemas/JsonPatch"
          },
          "type": {
            "enum": [
              "patch"
            ],
            "type": "string"
          }
        },
        "required": [
          "id",
          "transform",
          "type"
        ],
        "title": "CommentBulkPatch",
        "type": "object"
      },
      "CommentBulkUpdate": {
        "properties": {
          "id": {
            "format": "uuid",
            "type": "string"
          },
          "resource": {
            "$ref": "#/components/schemas/ItemComment"
          },
          "type": {
            "enum": [
              "update"
            ],
            "type": "string"
          }
        },
        "required": [
          "id",
          "resource",
          "type"
        ],
        "title": "CommentBulkUpdate",
        "type": "object"
      },
      "CreateApiKeyRequest": {
        "properties": {
          "name": {
            "type": "string"
          },
          "scopes": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "uniqueItems": true
          }
        },
        "required": [
          "scopes",
          "name"
        ],
        "title": "CreateApiKeyRequest",
        "type": "object"
      },
      "CreateApiKeyResponse": {
        "properties": {
          "apiKey": {
            "$ref": "#/components/schemas/ApiKey"
          },
          "secret": {
            "type": "string"
          }
        },
        "required": [
          "apiKey",
          "secret"
        ],
        "title": "CreateApiKeyResponse",
        "type": "object"
      },
      "CreateItemLinkRequest": {
        "properties": {
          "fromItemId": {
            "format": "uuid",
            "type": "string"
          },
          "fromOrder": {
            "description": "How this item-link is ordered in the list of links of the \"fromItem\".",
            "format": "int32",
            "type": "integer"
          },
          "toItemId": {
            "format": "uuid",
            "type": "string"
          },
          "toOrder": {
            "description": "How this item-link is ordered in the list of links of the \"toItem\".",
            "format": "int32",
            "type": "integer"
          },
          "type": {
            "$ref": "#/components/schemas/ItemLinkType"
          },
          "typeId": {
            "format": "uuid",
            "type": "string"
          }
        },
        "required": [
          "fromItemId",
          "toItemId",
          "type",
          "fromOrder",
          "toOrder"
        ],
        "title": "CreateItemLinkRequest",
        "type": "object"
      },
      "CreateItemRequest": {
        "properties": {
          "archived": {
            "default": false,
            "description": "Whether this item is archived.",
            "type": "boolean"
          },
          "assigneeUserGroupIds": {
            "description": "Ids of user groups that are assigned to this item.",
            "items": {
              "format": "uuid",
              "type": "string"
            },
            "type": "array"
          },
          "assigneeUserIds": {
            "description": "Ids of users who are assigned to this item.",
            "items": {
              "format": "uuid",
              "type": "string"
            },
            "type": "array"
          },
          "color": {
            "$ref": "#/components/schemas/ItemColor",
            "description": "Color of this item."
          },
          "description": {
            "$ref": "#/components/schemas/RichText",
            "description": "Rich text content as structured blocks. Different media types provide markdown support:\n• application/json - Default blocks format\n• application/vnd.airfocus.markdown+json - All RichText fields become markdown strings (recommended)\n• application/json+markdown - Legacy format, only top-level fields converted to markdown"
          },
          "fields": {
            "additionalProperties": {},
            "description": "Values of custom fields, where each key is a custom-field ID and each value is a JSON-formatted value of the corresponding field.",
            "examples": [
              {
                "0fc3cfbc-27e9-3ea6-8a78-7de13dae3e3c": {
                  "number": 42
                },
                "34f05b62-dd43-3e1e-82bc-b0acabd0d004": {
                  "boolean": true
                },
                "5396681e-ea50-3d63-9ae3-c9f8ca17b7d8": {
                  "userGroupIds": [
                    "70e2b87a-b774-3022-9ef0-e55031a1c4fb"
                  ],
                  "userIds": [
                    "24c9e15e-52af-347c-a25b-757e7bee1f9d"
                  ]
                },
                "75fe57ec-4a04-3a30-8cac-5f27223df81a": {
                  "dateRange": {
                    "endDate": "2024-02-14",
                    "startDate": "2024-01-14",
                    "timezone": "UTC"
                  }
                },
                "8be74552-df93-331b-bdd6-b36ed74bdb6a": {
                  "selection": [
                    "2bb225ce-b5ee-3493-967c-fde0d72da242"
                  ]
                },
                "c7824f3d-4d5f-3b2f-a2d0-34758c1e9454": {
                  "text": "A platform built for the new way of doing product management"
                },
                "e34d514f-7db5-38aa-872a-7c8191a09617": {
                  "date": {
                    "date": "2024-01-01",
                    "timezone": "UTC"
                  }
                }
              }
            ],
            "type": "object"
          },
          "name": {
            "description": "Name (title) of this item.",
            "type": "string"
          },
          "order": {
            "description": "A order number of this item for sorting.",
            "format": "int32",
            "type": "integer"
          },
          "statusId": {
            "description": "Id of the status of this item.",
            "format": "uuid",
            "type": "string"
          }
        },
        "required": [
          "statusId",
          "color",
          "name",
          "description",
          "assigneeUserIds",
          "assigneeUserGroupIds",
          "fields",
          "order"
        ],
        "title": "CreateItemRequest",
        "type": "object"
      },
      "CreateItemRequestWithMD": {
        "description": "Item with Markdown string description.",
        "properties": {
          "archived": {
            "default": false,
            "description": "Whether this item is archived.",
            "type": "boolean"
          },
          "assigneeUserGroupIds": {
            "description": "Ids of user groups that are assigned to this item.",
            "items": {
              "format": "uuid",
              "type": "string"
            },
            "type": "array"
          },
          "assigneeUserIds": {
            "description": "Ids of users who are assigned to this item.",
            "items": {
              "format": "uuid",
              "type": "string"
            },
            "type": "array"
          },
          "color": {
            "$ref": "#/components/schemas/ItemColor",
            "description": "Color of this item."
          },
          "description": {
            "description": "Rich text content as a markdown string (used with markdown media types)",
            "examples": [
              "hello **world**!"
            ],
            "type": "string"
          },
          "fields": {
            "additionalProperties": {},
            "description": "Values of custom fields, where each key is a custom-field ID and each value is a JSON-formatted value of the corresponding field.",
            "examples": [
              {
                "0fc3cfbc-27e9-3ea6-8a78-7de13dae3e3c": {
                  "number": 42
                },
                "34f05b62-dd43-3e1e-82bc-b0acabd0d004": {
                  "boolean": true
                },
                "5396681e-ea50-3d63-9ae3-c9f8ca17b7d8": {
                  "userGroupIds": [
                    "70e2b87a-b774-3022-9ef0-e55031a1c4fb"
                  ],
                  "userIds": [
                    "24c9e15e-52af-347c-a25b-757e7bee1f9d"
                  ]
                },
                "75fe57ec-4a04-3a30-8cac-5f27223df81a": {
                  "dateRange": {
                    "endDate": "2024-02-14",
                    "startDate": "2024-01-14",
                    "timezone": "UTC"
                  }
                },
                "8be74552-df93-331b-bdd6-b36ed74bdb6a": {
                  "selection": [
                    "2bb225ce-b5ee-3493-967c-fde0d72da242"
                  ]
                },
                "c7824f3d-4d5f-3b2f-a2d0-34758c1e9454": {
                  "text": "A platform built for the new way of doing product management"
                },
                "e34d514f-7db5-38aa-872a-7c8191a09617": {
                  "date": {
                    "date": "2024-01-01",
                    "timezone": "UTC"
                  }
                }
              }
            ],
            "type": "object"
          },
          "name": {
            "description": "Name (title) of this item.",
            "type": "string"
          },
          "order": {
            "description": "A order number of this item for sorting.",
            "format": "int32",
            "type": "integer"
          },
          "statusId": {
            "description": "Id of the status of this item.",
            "format": "uuid",
            "type": "string"
          }
        },
        "required": [
          "statusId",
          "color",
          "name",
          "description",
          "assigneeUserIds",
          "assigneeUserGroupIds",
          "fields",
          "order"
        ],
        "title": "CreateItemRequestWithMD",
        "type": "object"
      },
      "CreateMilestoneRequest": {
        "properties": {
          "date": {
            "format": "date",
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "timezone": {
            "type": "string"
          }
        },
        "required": [
          "name",
          "description",
          "date"
        ],
        "title": "CreateMilestoneRequest",
        "type": "object"
      },
      "CreateUserInviteRequest": {
        "properties": {
          "userId": {
            "format": "uuid",
            "type": "string"
          }
        },
        "required": [
          "userId"
        ],
        "title": "CreateUserInviteRequest",
        "type": "object"
      },
      "CreateWorkspaceRequest": {
        "properties": {
          "alias": {
            "description": "A custom code of this workspace (e.g. PROD, DEV, etc), which is used to create aliases for items (e.g. DEV-123). Alias should consist of 1-10 uppercase letters, and should be unique within the team.",
            "type": "string"
          },
          "defaultPermission": {
            "$ref": "#/components/schemas/Permission",
            "description": "Default permission for all the team members in this workspace. Note: the final permission can be adjusted corresponding to each user's role, e.g. contributors can't have more than Comment permission."
          },
          "description": {
            "$ref": "#/components/schemas/RichText",
            "description": "Description of this workspace."
          },
          "itemColor": {
            "$ref": "#/components/schemas/ItemColor",
            "description": "Default color applied to newly created items in this workspace. If not defined - a random color will be assigned to each new item."
          },
          "itemType": {
            "$ref": "#/components/schemas/ItemType",
            "description": "Type of items in this workspace."
          },
          "name": {
            "description": "Name of this workspace.",
            "type": "string"
          },
          "order": {
            "description": "Order number of this workspace for sorting.",
            "format": "int32",
            "type": "integer"
          },
          "progressMode": {
            "$ref": "#/components/schemas/WorkspaceProgressMode",
            "default": "count"
          }
        },
        "required": [
          "name",
          "description",
          "order"
        ],
        "title": "CreateWorkspaceRequest",
        "type": "object"
      },
      "CreateWorkspaceRequestWithMD": {
        "description": "Workspace with Markdown string description.",
        "properties": {
          "alias": {
            "description": "A custom code of this workspace (e.g. PROD, DEV, etc), which is used to create aliases for items (e.g. DEV-123). Alias should consist of 1-10 uppercase letters, and should be unique within the team.",
            "type": "string"
          },
          "defaultPermission": {
            "$ref": "#/components/schemas/Permission",
            "description": "Default permission for all the team members in this workspace. Note: the final permission can be adjusted corresponding to each user's role, e.g. contributors can't have more than Comment permission."
          },
          "description": {
            "description": "Rich text content as a markdown string (used with markdown media types)",
            "examples": [
              "hello **world**!"
            ],
            "type": "string"
          },
          "itemColor": {
            "$ref": "#/components/schemas/ItemColor",
            "description": "Default color applied to newly created items in this workspace. If not defined - a random color will be assigned to each new item."
          },
          "itemType": {
            "$ref": "#/components/schemas/ItemType",
            "description": "Type of items in this workspace."
          },
          "name": {
            "description": "Name of this workspace.",
            "type": "string"
          },
          "order": {
            "description": "Order number of this workspace for sorting.",
            "format": "int32",
            "type": "integer"
          },
          "progressMode": {
            "$ref": "#/components/schemas/WorkspaceProgressMode",
            "default": "count"
          }
        },
        "required": [
          "name",
          "description",
          "order"
        ],
        "title": "CreateWorkspaceRequestWithMD",
        "type": "object"
      },
      "DateFieldWithFieldEmbed": {
        "properties": {
          "_embedded": {
            "$ref": "#/components/schemas/FieldEmbed"
          },
          "createdAt": {
            "format": "date-time",
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "id": {
            "format": "uuid",
            "type": "string"
          },
          "isTeamField": {
            "type": "boolean"
          },
          "name": {
            "type": "string"
          },
          "required": {
            "type": "boolean"
          },
          "teamId": {
            "format": "uuid",
            "type": "string"
          },
          "typeId": {
            "const": "date",
            "type": "string"
          }
        },
        "required": [
          "id",
          "typeId",
          "name",
          "description",
          "isTeamField",
          "teamId",
          "createdAt",
          "required",
          "_embedded"
        ],
        "title": "DateFieldWithFieldEmbed",
        "type": "object"
      },
      "DateRangeFieldWithFieldEmbed": {
        "properties": {
          "_embedded": {
            "$ref": "#/components/schemas/FieldEmbed"
          },
          "createdAt": {
            "format": "date-time",
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "id": {
            "format": "uuid",
            "type": "string"
          },
          "isTeamField": {
            "type": "boolean"
          },
          "name": {
            "type": "string"
          },
          "required": {
            "type": "boolean"
          },
          "teamId": {
            "format": "uuid",
            "type": "string"
          },
          "typeId": {
            "const": "date-range",
            "type": "string"
          }
        },
        "required": [
          "id",
          "typeId",
          "name",
          "description",
          "isTeamField",
          "teamId",
          "createdAt",
          "required",
          "_embedded"
        ],
        "title": "DateRangeFieldWithFieldEmbed",
        "type": "object"
      },
      "Emoji": {
        "enum": [
          "blue_heart",
          "clap",
          "confused",
          "eyes",
          "+1",
          "rocket",
          "thinking_face",
          "white_check_mark"
        ],
        "title": "Emoji",
        "type": "string"
      },
      "ErrorResponse": {
        "description": "A general error response which is returned by the server for all handled errors.",
        "properties": {
          "code": {
            "description": "Machine readable code",
            "examples": [
              "not_found"
            ],
            "type": "string"
          },
          "data": {
            "description": "Additional informational data about the error",
            "type": "object"
          },
          "message": {
            "description": "Error messages",
            "examples": [
              "Entity not found"
            ],
            "type": "string"
          }
        },
        "required": [
          "code",
          "message",
          "data"
        ],
        "title": "ErrorResponse",
        "type": "object"
      },
      "ExtensionShareLink": {
        "properties": {
          "branding": {
            "type": "boolean"
          },
          "createdAt": {
            "format": "date-time",
            "type": "string"
          },
          "id": {
            "format": "uuid",
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "password": {
            "type": "string"
          },
          "secret": {
            "type": "string"
          },
          "userId": {
            "format": "uuid",
            "type": "string"
          }
        },
        "required": [
          "id",
          "userId",
          "name",
          "secret",
          "branding",
          "createdAt"
        ],
        "title": "ExtensionShareLink",
        "type": "object"
      },
      "Factor": {
        "properties": {
          "criteria": {
            "items": {
              "format": "uuid",
              "type": "string"
            },
            "type": "array"
          },
          "description": {
            "type": "string"
          },
          "direction": {
            "$ref": "#/components/schemas/ScoringDirection"
          },
          "name": {
            "type": "string"
          }
        },
        "required": [
          "name",
          "description",
          "criteria",
          "direction"
        ],
        "title": "Factor",
        "type": "object"
      },
      "FactorId": {
        "enum": [
          "r",
          "x",
          "y"
        ],
        "title": "FactorId",
        "type": "string"
      },
      "Factors": {
        "properties": {
          "r": {
            "$ref": "#/components/schemas/Factor"
          },
          "x": {
            "$ref": "#/components/schemas/Factor"
          },
          "y": {
            "$ref": "#/components/schemas/Factor"
          }
        },
        "required": [
          "y",
          "x",
          "r"
        ],
        "title": "Factors",
        "type": "object"
      },
      "FieldEmbed": {
        "properties": {
          "workspaces": {
            "description": "List of all workspaces where this field is used.",
            "items": {
              "$ref": "#/components/schemas/FieldFieldWorkspaceEmbed"
            },
            "type": "array"
          }
        },
        "required": [
          "workspaces"
        ],
        "title": "FieldEmbed",
        "type": "object"
      },
      "FieldFieldWorkspaceEmbed": {
        "properties": {
          "order": {
            "description": "Order of the field in this specific workspace.",
            "examples": [
              42
            ],
            "format": "int32",
            "type": "integer"
          },
          "workspaceId": {
            "format": "uuid",
            "type": "string"
          }
        },
        "required": [
          "workspaceId",
          "order"
        ],
        "title": "FieldFieldWorkspaceEmbed",
        "type": "object"
      },
      "FieldSearchQuery": {
        "properties": {
          "isTeamField": {
            "description": "Return only fields with the specified isTeamField value.",
            "type": "boolean"
          },
          "workspaceIds": {
            "default": [],
            "description": "Return only fields which are installed in the specified workspaces.",
            "items": {
              "format": "uuid",
              "type": "string"
            },
            "type": "array",
            "uniqueItems": true
          }
        },
        "title": "FieldSearchQuery",
        "type": "object"
      },
      "FieldServerEndpointsFieldToWorkspaceLink": {
        "properties": {
          "fieldId": {
            "format": "uuid",
            "type": "string"
          },
          "workspaceId": {
            "format": "uuid",
            "type": "string"
          }
        },
        "required": [
          "fieldId",
          "workspaceId"
        ],
        "title": "FieldServerEndpointsFieldToWorkspaceLink",
        "type": "object"
      },
      "FieldServerEndpointsFieldTypeInfo": {
        "properties": {
          "typeId": {
            "type": "string"
          }
        },
        "required": [
          "typeId"
        ],
        "title": "FieldServerEndpointsFieldTypeInfo",
        "type": "object"
      },
      "FieldServerEndpointsInstallFieldRequest": {
        "discriminator": {
          "mapping": {
            "boolean": "#/components/schemas/InstallBooleanFieldRequest",
            "date": "#/components/schemas/InstallDateFieldRequest",
            "date-range": "#/components/schemas/InstallDateRangeFieldRequest",
            "number": "#/components/schemas/InstallNumberFieldRequest",
            "people": "#/components/schemas/InstallPeopleFieldRequest",
            "select": "#/components/schemas/InstallSelectFieldRequest",
            "text": "#/components/schemas/InstallTextFieldRequest",
            "time-period": "#/components/schemas/InstallTimePeriodFieldRequest"
          },
          "propertyName": "typeId"
        },
        "oneOf": [
          {
            "$ref": "#/components/schemas/InstallBooleanFieldRequest"
          },
          {
            "$ref": "#/components/schemas/InstallDateFieldRequest"
          },
          {
            "$ref": "#/components/schemas/InstallDateRangeFieldRequest"
          },
          {
            "$ref": "#/components/schemas/InstallNumberFieldRequest"
          },
          {
            "$ref": "#/components/schemas/InstallPeopleFieldRequest"
          },
          {
            "$ref": "#/components/schemas/InstallSelectFieldRequest"
          },
          {
            "$ref": "#/components/schemas/InstallTextFieldRequest"
          },
          {
            "$ref": "#/components/schemas/InstallTimePeriodFieldRequest"
          }
        ],
        "title": "FieldServerEndpointsInstallFieldRequest"
      },
      "FieldServerEndpointsInstallFieldRequestLegacy": {
        "properties": {
          "description": {
            "type": "string"
          },
          "isTeamField": {
            "type": "boolean"
          },
          "name": {
            "type": "string"
          },
          "required": {
            "type": "boolean"
          },
          "settings": {},
          "typeId": {
            "type": "string"
          },
          "workspaceId": {
            "format": "uuid",
            "type": "string"
          }
        },
        "required": [
          "typeId",
          "name",
          "settings",
          "isTeamField",
          "description",
          "required"
        ],
        "title": "FieldServerEndpointsInstallFieldRequestLegacy",
        "type": "object"
      },
      "FieldServerEndpointsReconfigureFieldRequest": {
        "properties": {
          "description": {
            "type": "string"
          },
          "isTeamField": {
            "type": "boolean"
          },
          "name": {
            "type": "string"
          },
          "required": {
            "type": "boolean"
          },
          "settings": {
            "description": "The settings object which corresponds to the type of the requested field, or it can be skipped if the requested field does not have any settings.\nThis schema shows all the available field-settings. See also the Field schema to learn about settings of each specific field type.",
            "oneOf": [
              {
                "$ref": "#/components/schemas/FormSourceFieldTypeSettings"
              },
              {
                "$ref": "#/components/schemas/InsightsFieldTypeSettings"
              },
              {
                "$ref": "#/components/schemas/NumberFieldTypeSettings"
              },
              {
                "$ref": "#/components/schemas/OkrConfidenceFieldSettings"
              },
              {
                "$ref": "#/components/schemas/OkrTimePeriodFieldSettings"
              },
              {
                "$ref": "#/components/schemas/PeopleFieldTypeSettings"
              },
              {
                "$ref": "#/components/schemas/SelectFieldTypeSettings"
              },
              {
                "$ref": "#/components/schemas/TimePeriodFieldSettings"
              },
              {
                "$ref": "#/components/schemas/VotingAppScoreFieldTypeSettings"
              }
            ]
          }
        },
        "required": [
          "name",
          "description",
          "isTeamField"
        ],
        "title": "FieldServerEndpointsReconfigureFieldRequest",
        "type": "object"
      },
      "FieldServerEndpointsReconfigureFieldRequestLegacy": {
        "properties": {
          "description": {
            "type": "string"
          },
          "fieldId": {
            "format": "uuid",
            "type": "string"
          },
          "isTeamField": {
            "type": "boolean"
          },
          "name": {
            "type": "string"
          },
          "required": {
            "type": "boolean"
          },
          "settings": {}
        },
        "required": [
          "fieldId",
          "settings",
          "name",
          "description",
          "isTeamField"
        ],
        "title": "FieldServerEndpointsReconfigureFieldRequestLegacy",
        "type": "object"
      },
      "FieldServerEndpointsReorderFieldsRequest": {
        "properties": {
          "fieldIds": {
            "items": {
              "format": "uuid",
              "type": "string"
            },
            "type": "array"
          },
          "workspaceId": {
            "format": "uuid",
            "type": "string"
          }
        },
        "required": [
          "workspaceId",
          "fieldIds"
        ],
        "title": "FieldServerEndpointsReorderFieldsRequest",
        "type": "object"
      },
      "FieldServerEndpointsUninstallFieldRequest": {
        "properties": {
          "fieldId": {
            "format": "uuid",
            "type": "string"
          }
        },
        "required": [
          "fieldId"
        ],
        "title": "FieldServerEndpointsUninstallFieldRequest",
        "type": "object"
      },
      "FieldWithFieldEmbed": {
        "discriminator": {
          "mapping": {
            "boolean": "#/components/schemas/BooleanFieldWithFieldEmbed",
            "date": "#/components/schemas/DateFieldWithFieldEmbed",
            "date-range": "#/components/schemas/DateRangeFieldWithFieldEmbed",
            "form-source": "#/components/schemas/FormSourceFieldWithFieldEmbed",
            "form-target": "#/components/schemas/FormTargetFieldWithFieldEmbed",
            "insights": "#/components/schemas/InsightsFieldWithFieldEmbed",
            "mirror-source": "#/components/schemas/MirrorSourceFieldWithFieldEmbed",
            "mirror-target": "#/components/schemas/MirrorTargetFieldWithFieldEmbed",
            "number": "#/components/schemas/NumberFieldWithFieldEmbed",
            "okr-checkins": "#/components/schemas/OkrCheckinsFieldWithFieldEmbed",
            "okr-confidence": "#/components/schemas/OkrConfidenceFieldWithFieldEmbed",
            "okr-key-result-reference": "#/components/schemas/OkrKeyResultReferenceFieldWithFieldEmbed",
            "okr-key-results": "#/components/schemas/OkrKeyResultsFieldWithFieldEmbed",
            "okr-progress": "#/components/schemas/OkrProgressFieldWithFieldEmbed",
            "okr-time-period": "#/components/schemas/OkrTimePeriodFieldWithFieldEmbed",
            "people": "#/components/schemas/PeopleFieldWithFieldEmbed",
            "portal": "#/components/schemas/PortalFieldWithFieldEmbed",
            "prioritization": "#/components/schemas/PrioritizationFieldWithFieldEmbed",
            "select": "#/components/schemas/SelectFieldWithFieldEmbed",
            "text": "#/components/schemas/TextFieldWithFieldEmbed",
            "time-period": "#/components/schemas/TimePeriodFieldWithFieldEmbed",
            "votes": "#/components/schemas/VotesFieldWithFieldEmbed",
            "votingScore": "#/components/schemas/VotingScoreFieldWithFieldEmbed"
          },
          "propertyName": "typeId"
        },
        "oneOf": [
          {
            "$ref": "#/components/schemas/BooleanFieldWithFieldEmbed"
          },
          {
            "$ref": "#/components/schemas/DateFieldWithFieldEmbed"
          },
          {
            "$ref": "#/components/schemas/DateRangeFieldWithFieldEmbed"
          },
          {
            "$ref": "#/components/schemas/FormSourceFieldWithFieldEmbed"
          },
          {
            "$ref": "#/components/schemas/FormTargetFieldWithFieldEmbed"
          },
          {
            "$ref": "#/components/schemas/InsightsFieldWithFieldEmbed"
          },
          {
            "$ref": "#/components/schemas/MirrorSourceFieldWithFieldEmbed"
          },
          {
            "$ref": "#/components/schemas/MirrorTargetFieldWithFieldEmbed"
          },
          {
            "$ref": "#/components/schemas/NumberFieldWithFieldEmbed"
          },
          {
            "$ref": "#/components/schemas/OkrCheckinsFieldWithFieldEmbed"
          },
          {
            "$ref": "#/components/schemas/OkrConfidenceFieldWithFieldEmbed"
          },
          {
            "$ref": "#/components/schemas/OkrKeyResultReferenceFieldWithFieldEmbed"
          },
          {
            "$ref": "#/components/schemas/OkrKeyResultsFieldWithFieldEmbed"
          },
          {
            "$ref": "#/components/schemas/OkrProgressFieldWithFieldEmbed"
          },
          {
            "$ref": "#/components/schemas/OkrTimePeriodFieldWithFieldEmbed"
          },
          {
            "$ref": "#/components/schemas/PeopleFieldWithFieldEmbed"
          },
          {
            "$ref": "#/components/schemas/PortalFieldWithFieldEmbed"
          },
          {
            "$ref": "#/components/schemas/PrioritizationFieldWithFieldEmbed"
          },
          {
            "$ref": "#/components/schemas/SelectFieldWithFieldEmbed"
          },
          {
            "$ref": "#/components/schemas/TextFieldWithFieldEmbed"
          },
          {
            "$ref": "#/components/schemas/TimePeriodFieldWithFieldEmbed"
          },
          {
            "$ref": "#/components/schemas/VotesFieldWithFieldEmbed"
          },
          {
            "$ref": "#/components/schemas/VotingScoreFieldWithFieldEmbed"
          }
        ],
        "title": "FieldWithFieldEmbed"
      },
      "FieldWithFieldEmbedPage": {
        "properties": {
          "items": {
            "items": {
              "$ref": "#/components/schemas/FieldWithFieldEmbed"
            },
            "type": "array"
          },
          "totalItems": {
            "format": "int32",
            "type": "integer"
          }
        },
        "required": [
          "items",
          "totalItems"
        ],
        "title": "FieldWithFieldEmbedPage",
        "type": "object"
      },
      "FormAudience": {
        "discriminator": {
          "mapping": {
            "anonymousUsers": "#/components/schemas/FormAudienceAnonymousUsers",
            "teamMembers": "#/components/schemas/FormAudienceTeamMembers"
          },
          "propertyName": "type"
        },
        "oneOf": [
          {
            "$ref": "#/components/schemas/FormAudienceAnonymousUsers"
          },
          {
            "$ref": "#/components/schemas/FormAudienceTeamMembers"
          }
        ],
        "title": "FormAudience"
      },
      "FormAudienceAnonymousUsers": {
        "properties": {
          "type": {
            "const": "anonymousUsers",
            "type": "string"
          }
        },
        "required": [
          "type"
        ],
        "title": "FormAudienceAnonymousUsers",
        "type": "object"
      },
      "FormAudienceTeamMembers": {
        "properties": {
          "type": {
            "const": "teamMembers",
            "type": "string"
          }
        },
        "required": [
          "type"
        ],
        "title": "FormAudienceTeamMembers",
        "type": "object"
      },
      "FormSourceFieldTypeSettings": {
        "properties": {
          "maximum": {
            "format": "int32",
            "type": "integer"
          }
        },
        "title": "FormSourceFieldTypeSettings",
        "type": "object"
      },
      "FormSourceFieldWithFieldEmbed": {
        "properties": {
          "_embedded": {
            "$ref": "#/components/schemas/FieldEmbed"
          },
          "createdAt": {
            "format": "date-time",
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "id": {
            "format": "uuid",
            "type": "string"
          },
          "isTeamField": {
            "type": "boolean"
          },
          "name": {
            "type": "string"
          },
          "required": {
            "type": "boolean"
          },
          "settings": {
            "$ref": "#/components/schemas/FormSourceFieldTypeSettings"
          },
          "teamId": {
            "format": "uuid",
            "type": "string"
          },
          "typeId": {
            "const": "form-source",
            "type": "string"
          }
        },
        "required": [
          "id",
          "typeId",
          "settings",
          "name",
          "description",
          "isTeamField",
          "teamId",
          "createdAt",
          "required",
          "_embedded"
        ],
        "title": "FormSourceFieldWithFieldEmbed",
        "type": "object"
      },
      "FormTargetFieldWithFieldEmbed": {
        "properties": {
          "_embedded": {
            "$ref": "#/components/schemas/FieldEmbed"
          },
          "createdAt": {
            "format": "date-time",
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "id": {
            "format": "uuid",
            "type": "string"
          },
          "isTeamField": {
            "type": "boolean"
          },
          "name": {
            "type": "string"
          },
          "required": {
            "type": "boolean"
          },
          "teamId": {
            "format": "uuid",
            "type": "string"
          },
          "typeId": {
            "const": "form-target",
            "type": "string"
          }
        },
        "required": [
          "id",
          "typeId",
          "name",
          "description",
          "isTeamField",
          "teamId",
          "createdAt",
          "required",
          "_embedded"
        ],
        "title": "FormTargetFieldWithFieldEmbed",
        "type": "object"
      },
      "FormsApp": {
        "properties": {
          "id": {
            "format": "uuid",
            "type": "string"
          },
          "settings": {
            "$ref": "#/components/schemas/FormsAppTypeSettings"
          },
          "teamId": {
            "format": "uuid",
            "type": "string"
          },
          "typeId": {
            "const": "forms",
            "type": "string"
          }
        },
        "required": [
          "id",
          "teamId",
          "typeId",
          "settings"
        ],
        "title": "FormsApp",
        "type": "object"
      },
      "FormsAppTypeFieldSettings": {
        "properties": {
          "fieldId": {
            "format": "uuid",
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "order": {
            "format": "int32",
            "type": "integer"
          },
          "required": {
            "type": "boolean"
          }
        },
        "required": [
          "fieldId",
          "required",
          "order"
        ],
        "title": "FormsAppTypeFieldSettings",
        "type": "object"
      },
      "FormsAppTypeSettings": {
        "properties": {
          "audience": {
            "items": {
              "$ref": "#/components/schemas/FormAudience"
            },
            "type": "array"
          },
          "descriptionName": {
            "type": "string"
          },
          "descriptionOrder": {
            "format": "int32",
            "type": "integer"
          },
          "fields": {
            "items": {
              "$ref": "#/components/schemas/FormsAppTypeFieldSettings"
            },
            "type": "array",
            "uniqueItems": true
          },
          "formDescription": {
            "type": "string"
          },
          "formSourceFieldId": {
            "format": "uuid",
            "type": "string"
          },
          "formTargetFieldId": {
            "format": "uuid",
            "type": "string"
          },
          "formType": {
            "$ref": "#/components/schemas/FormsAppTypeSettingsFormType"
          },
          "requireLogin": {
            "type": "boolean"
          },
          "shareLinks": {
            "items": {
              "$ref": "#/components/schemas/ExtensionShareLink"
            },
            "type": "array"
          },
          "subjectName": {
            "type": "string"
          },
          "targetWorkspaceId": {
            "format": "uuid",
            "type": "string"
          },
          "workspaceId": {
            "format": "uuid",
            "type": "string"
          }
        },
        "required": [
          "workspaceId",
          "targetWorkspaceId",
          "descriptionOrder",
          "formSourceFieldId",
          "formTargetFieldId",
          "fields",
          "formDescription",
          "formType",
          "audience",
          "requireLogin",
          "shareLinks"
        ],
        "title": "FormsAppTypeSettings",
        "type": "object"
      },
      "FormsAppTypeSettingsFormType": {
        "properties": {
          "general": {
            "$ref": "#/components/schemas/FormsAppTypeSettingsFormTypeSettings"
          },
          "item": {
            "$ref": "#/components/schemas/FormsAppTypeSettingsFormTypeSettings"
          }
        },
        "required": [
          "general",
          "item"
        ],
        "title": "FormsAppTypeSettingsFormType",
        "type": "object"
      },
      "FormsAppTypeSettingsFormTypeSettings": {
        "properties": {
          "enabled": {
            "type": "boolean"
          },
          "label": {
            "type": "string"
          }
        },
        "required": [
          "enabled",
          "label"
        ],
        "title": "FormsAppTypeSettingsFormTypeSettings",
        "type": "object"
      },
      "GlobalSearchQuery": {
        "default": {
          "archived": false,
          "assigneeUserGroupIds": [],
          "assigneeUserIds": [],
          "statusCategories": [],
          "workspaceIds": []
        },
        "properties": {
          "archived": {
            "description": "Search only archived or only non-archived items (only non-archived by default)",
            "type": "boolean"
          },
          "assigneeUserGroupIds": {
            "description": "Narrow down the search to items which are assigned to the specified user groups",
            "items": {
              "format": "uuid",
              "type": "string"
            },
            "type": "array"
          },
          "assigneeUserIds": {
            "description": "Narrow down the search to items which are assigned to the specified users",
            "items": {
              "format": "uuid",
              "type": "string"
            },
            "type": "array"
          },
          "contextQuery": {
            "description": "Context-string for AI to match items by similarity",
            "type": "string"
          },
          "searchQuery": {
            "description": "Text to search in contents of items",
            "type": "string"
          },
          "statusCategories": {
            "description": "Narrow down the search to items with status in the specified status-categories",
            "items": {
              "$ref": "#/components/schemas/StatusCategory"
            },
            "type": "array"
          },
          "workspaceIds": {
            "description": "Narrow down the search to specific workspaces",
            "items": {
              "format": "uuid",
              "type": "string"
            },
            "type": "array"
          }
        },
        "required": [
          "workspaceIds",
          "assigneeUserIds",
          "assigneeUserGroupIds",
          "statusCategories"
        ],
        "title": "GlobalSearchQuery",
        "type": "object"
      },
      "GlobalSearchResult": {
        "discriminator": {
          "mapping": {
            "item": "#/components/schemas/GlobalSearchResultItem"
          },
          "propertyName": "type"
        },
        "oneOf": [
          {
            "$ref": "#/components/schemas/GlobalSearchResultItem"
          }
        ],
        "title": "GlobalSearchResult"
      },
      "GlobalSearchResultItem": {
        "properties": {
          "alias": {
            "type": "string"
          },
          "type": {
            "const": "item",
            "type": "string"
          },
          "value": {
            "$ref": "#/components/schemas/Item"
          }
        },
        "required": [
          "value",
          "type"
        ],
        "title": "GlobalSearchResultItem",
        "type": "object"
      },
      "GlobalSearchResultPage": {
        "properties": {
          "items": {
            "items": {
              "$ref": "#/components/schemas/GlobalSearchResult"
            },
            "type": "array"
          },
          "totalItems": {
            "format": "int32",
            "type": "integer"
          }
        },
        "required": [
          "items",
          "totalItems"
        ],
        "title": "GlobalSearchResultPage",
        "type": "object"
      },
      "HealthCheckInsApp": {
        "properties": {
          "id": {
            "format": "uuid",
            "type": "string"
          },
          "settings": {
            "$ref": "#/components/schemas/HealthCheckInsAppTypeSettings"
          },
          "teamId": {
            "format": "uuid",
            "type": "string"
          },
          "typeId": {
            "const": "health-check-ins",
            "type": "string"
          }
        },
        "required": [
          "id",
          "teamId",
          "typeId",
          "settings"
        ],
        "title": "HealthCheckInsApp",
        "type": "object"
      },
      "HealthCheckInsAppTypeSettings": {
        "properties": {
          "healthCheckInsFieldId": {
            "format": "uuid",
            "type": "string"
          },
          "workspaceId": {
            "format": "uuid",
            "type": "string"
          }
        },
        "required": [
          "workspaceId",
          "healthCheckInsFieldId"
        ],
        "title": "HealthCheckInsAppTypeSettings",
        "type": "object"
      },
      "InboxViewCounter": {
        "properties": {
          "count": {
            "description": "Number of items in the counter.",
            "format": "int32",
            "type": "integer"
          },
          "id": {
            "description": "Machine-readable ID of the counter.",
            "type": "string"
          },
          "name": {
            "description": "Human-readable name of the counter.",
            "type": "string"
          }
        },
        "required": [
          "id",
          "name",
          "count"
        ],
        "title": "InboxViewCounter",
        "type": "object"
      },
      "InboxViewCountersRequest": {
        "properties": {
          "archived": {
            "description": "Whether archived items should be included or excluded from all the counters.",
            "type": "boolean"
          },
          "countAssigned": {
            "description": "Whether to also additionally return a counter of items with assigned users.",
            "type": "boolean"
          },
          "filter": {
            "$ref": "#/components/schemas/ItemSearchQueryFilter",
            "description": "Custom filter to apply to the counted items. If not specified, then the default filter from the view settings is used."
          }
        },
        "required": [
          "countAssigned",
          "archived"
        ],
        "title": "InboxViewCountersRequest",
        "type": "object"
      },
      "InsightsApp": {
        "properties": {
          "id": {
            "format": "uuid",
            "type": "string"
          },
          "settings": {
            "$ref": "#/components/schemas/InsightsAppTypeSettings"
          },
          "teamId": {
            "format": "uuid",
            "type": "string"
          },
          "typeId": {
            "const": "insights",
            "type": "string"
          }
        },
        "required": [
          "id",
          "teamId",
          "typeId",
          "settings"
        ],
        "title": "InsightsApp",
        "type": "object"
      },
      "InsightsAppTypeSettings": {
        "properties": {
          "fieldIds": {
            "items": {
              "format": "uuid",
              "type": "string"
            },
            "type": "array",
            "uniqueItems": true
          },
          "insightsFieldId": {
            "format": "uuid",
            "type": "string"
          },
          "scoringMode": {
            "$ref": "#/components/schemas/InsightsScoringMode"
          },
          "showStatus": {
            "type": "boolean"
          },
          "targets": {
            "items": {
              "$ref": "#/components/schemas/InsightsAppTypeSettingsTarget"
            },
            "type": "array"
          },
          "workspaceId": {
            "format": "uuid",
            "type": "string"
          }
        },
        "required": [
          "workspaceId",
          "insightsFieldId",
          "targets",
          "fieldIds",
          "showStatus",
          "scoringMode"
        ],
        "title": "InsightsAppTypeSettings",
        "type": "object"
      },
      "InsightsAppTypeSettingsTarget": {
        "properties": {
          "insightsFieldId": {
            "format": "uuid",
            "type": "string"
          },
          "workspaceId": {
            "format": "uuid",
            "type": "string"
          }
        },
        "required": [
          "workspaceId",
          "insightsFieldId"
        ],
        "title": "InsightsAppTypeSettingsTarget",
        "type": "object"
      },
      "InsightsFieldTypeSettings": {
        "properties": {
          "maximum": {
            "format": "int32",
            "type": "integer"
          }
        },
        "title": "InsightsFieldTypeSettings",
        "type": "object"
      },
      "InsightsFieldWithFieldEmbed": {
        "properties": {
          "_embedded": {
            "$ref": "#/components/schemas/FieldEmbed"
          },
          "createdAt": {
            "format": "date-time",
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "id": {
            "format": "uuid",
            "type": "string"
          },
          "isTeamField": {
            "type": "boolean"
          },
          "name": {
            "type": "string"
          },
          "required": {
            "type": "boolean"
          },
          "settings": {
            "$ref": "#/components/schemas/InsightsFieldTypeSettings"
          },
          "teamId": {
            "format": "uuid",
            "type": "string"
          },
          "typeId": {
            "const": "insights",
            "type": "string"
          }
        },
        "required": [
          "id",
          "typeId",
          "settings",
          "name",
          "description",
          "isTeamField",
          "teamId",
          "createdAt",
          "required",
          "_embedded"
        ],
        "title": "InsightsFieldWithFieldEmbed",
        "type": "object"
      },
      "InsightsScoringMode": {
        "discriminator": {
          "mapping": {
            "customFormula": "#/components/schemas/InsightsScoringModeCustomFormula",
            "default": "#/components/schemas/InsightsScoringModeDefault"
          },
          "propertyName": "type"
        },
        "oneOf": [
          {
            "$ref": "#/components/schemas/InsightsScoringModeCustomFormula"
          },
          {
            "$ref": "#/components/schemas/InsightsScoringModeDefault"
          }
        ],
        "title": "InsightsScoringMode"
      },
      "InsightsScoringModeCustomFormula": {
        "properties": {
          "scoringFormula": {
            "$ref": "#/components/schemas/ScoringFormula"
          },
          "type": {
            "const": "customFormula",
            "type": "string"
          }
        },
        "required": [
          "scoringFormula",
          "type"
        ],
        "title": "InsightsScoringModeCustomFormula",
        "type": "object"
      },
      "InsightsScoringModeDefault": {
        "properties": {
          "type": {
            "const": "default",
            "type": "string"
          }
        },
        "required": [
          "type"
        ],
        "title": "InsightsScoringModeDefault",
        "type": "object"
      },
      "InstallBooleanFieldRequest": {
        "properties": {
          "description": {
            "default": "",
            "description": "User-readable field description.",
            "type": "string"
          },
          "isTeamField": {
            "default": false,
            "description": "Whether the field should be installed as a team-field or a workspace-specific field.",
            "type": "boolean"
          },
          "name": {
            "description": "User-readable field name.",
            "type": "string"
          },
          "required": {
            "type": "boolean"
          },
          "typeId": {
            "const": "boolean",
            "type": "string"
          },
          "workspaceIds": {
            "default": [],
            "description": "If isTeamField=false then exactly one workspace ID should be provided.\nIf isTeamField=true then any amount of workspace IDs can be provided to be linked to the newly installed field.",
            "items": {
              "format": "uuid",
              "type": "string"
            },
            "type": "array"
          }
        },
        "required": [
          "typeId",
          "name",
          "required"
        ],
        "title": "InstallBooleanFieldRequest",
        "type": "object"
      },
      "InstallDateFieldRequest": {
        "properties": {
          "description": {
            "default": "",
            "description": "User-readable field description.",
            "type": "string"
          },
          "isTeamField": {
            "default": false,
            "description": "Whether the field should be installed as a team-field or a workspace-specific field.",
            "type": "boolean"
          },
          "name": {
            "description": "User-readable field name.",
            "type": "string"
          },
          "required": {
            "type": "boolean"
          },
          "typeId": {
            "const": "date",
            "type": "string"
          },
          "workspaceIds": {
            "default": [],
            "description": "If isTeamField=false then exactly one workspace ID should be provided.\nIf isTeamField=true then any amount of workspace IDs can be provided to be linked to the newly installed field.",
            "items": {
              "format": "uuid",
              "type": "string"
            },
            "type": "array"
          }
        },
        "required": [
          "typeId",
          "name",
          "required"
        ],
        "title": "InstallDateFieldRequest",
        "type": "object"
      },
      "InstallDateRangeFieldRequest": {
        "properties": {
          "description": {
            "default": "",
            "description": "User-readable field description.",
            "type": "string"
          },
          "isTeamField": {
            "default": false,
            "description": "Whether the field should be installed as a team-field or a workspace-specific field.",
            "type": "boolean"
          },
          "name": {
            "description": "User-readable field name.",
            "type": "string"
          },
          "required": {
            "type": "boolean"
          },
          "typeId": {
            "const": "date-range",
            "type": "string"
          },
          "workspaceIds": {
            "default": [],
            "description": "If isTeamField=false then exactly one workspace ID should be provided.\nIf isTeamField=true then any amount of workspace IDs can be provided to be linked to the newly installed field.",
            "items": {
              "format": "uuid",
              "type": "string"
            },
            "type": "array"
          }
        },
        "required": [
          "typeId",
          "name",
          "required"
        ],
        "title": "InstallDateRangeFieldRequest",
        "type": "object"
      },
      "InstallNumberFieldRequest": {
        "properties": {
          "description": {
            "default": "",
            "description": "User-readable field description.",
            "type": "string"
          },
          "isTeamField": {
            "default": false,
            "description": "Whether the field should be installed as a team-field or a workspace-specific field.",
            "type": "boolean"
          },
          "name": {
            "description": "User-readable field name.",
            "type": "string"
          },
          "required": {
            "type": "boolean"
          },
          "settings": {
            "$ref": "#/components/schemas/NumberFieldTypeSettings",
            "description": "Field settings."
          },
          "typeId": {
            "const": "number",
            "type": "string"
          },
          "workspaceIds": {
            "default": [],
            "description": "If isTeamField=false then exactly one workspace ID should be provided.\nIf isTeamField=true then any amount of workspace IDs can be provided to be linked to the newly installed field.",
            "items": {
              "format": "uuid",
              "type": "string"
            },
            "type": "array"
          }
        },
        "required": [
          "typeId",
          "name",
          "settings",
          "required"
        ],
        "title": "InstallNumberFieldRequest",
        "type": "object"
      },
      "InstallPeopleFieldRequest": {
        "properties": {
          "description": {
            "default": "",
            "description": "User-readable field description.",
            "type": "string"
          },
          "isTeamField": {
            "default": false,
            "description": "Whether the field should be installed as a team-field or a workspace-specific field.",
            "type": "boolean"
          },
          "name": {
            "description": "User-readable field name.",
            "type": "string"
          },
          "required": {
            "type": "boolean"
          },
          "settings": {
            "$ref": "#/components/schemas/PeopleFieldTypeSettings",
            "description": "Field settings."
          },
          "typeId": {
            "const": "people",
            "type": "string"
          },
          "workspaceIds": {
            "default": [],
            "description": "If isTeamField=false then exactly one workspace ID should be provided.\nIf isTeamField=true then any amount of workspace IDs can be provided to be linked to the newly installed field.",
            "items": {
              "format": "uuid",
              "type": "string"
            },
            "type": "array"
          }
        },
        "required": [
          "typeId",
          "name",
          "settings",
          "required"
        ],
        "title": "InstallPeopleFieldRequest",
        "type": "object"
      },
      "InstallSelectFieldRequest": {
        "properties": {
          "description": {
            "default": "",
            "description": "User-readable field description.",
            "type": "string"
          },
          "isTeamField": {
            "default": false,
            "description": "Whether the field should be installed as a team-field or a workspace-specific field.",
            "type": "boolean"
          },
          "name": {
            "description": "User-readable field name.",
            "type": "string"
          },
          "required": {
            "type": "boolean"
          },
          "settings": {
            "$ref": "#/components/schemas/SelectFieldTypeSettings",
            "description": "Field settings."
          },
          "typeId": {
            "const": "select",
            "type": "string"
          },
          "workspaceIds": {
            "default": [],
            "description": "If isTeamField=false then exactly one workspace ID should be provided.\nIf isTeamField=true then any amount of workspace IDs can be provided to be linked to the newly installed field.",
            "items": {
              "format": "uuid",
              "type": "string"
            },
            "type": "array"
          }
        },
        "required": [
          "typeId",
          "name",
          "settings",
          "required"
        ],
        "title": "InstallSelectFieldRequest",
        "type": "object"
      },
      "InstallTextFieldRequest": {
        "properties": {
          "description": {
            "default": "",
            "description": "User-readable field description.",
            "type": "string"
          },
          "isTeamField": {
            "default": false,
            "description": "Whether the field should be installed as a team-field or a workspace-specific field.",
            "type": "boolean"
          },
          "name": {
            "description": "User-readable field name.",
            "type": "string"
          },
          "required": {
            "type": "boolean"
          },
          "typeId": {
            "const": "text",
            "type": "string"
          },
          "workspaceIds": {
            "default": [],
            "description": "If isTeamField=false then exactly one workspace ID should be provided.\nIf isTeamField=true then any amount of workspace IDs can be provided to be linked to the newly installed field.",
            "items": {
              "format": "uuid",
              "type": "string"
            },
            "type": "array"
          }
        },
        "required": [
          "typeId",
          "name",
          "required"
        ],
        "title": "InstallTextFieldRequest",
        "type": "object"
      },
      "InstallTimePeriodFieldRequest": {
        "properties": {
          "description": {
            "default": "",
            "description": "User-readable field description.",
            "type": "string"
          },
          "isTeamField": {
            "default": false,
            "description": "Whether the field should be installed as a team-field or a workspace-specific field.",
            "type": "boolean"
          },
          "name": {
            "description": "User-readable field name.",
            "type": "string"
          },
          "required": {
            "type": "boolean"
          },
          "settings": {
            "$ref": "#/components/schemas/TimePeriodFieldSettings",
            "description": "Field settings."
          },
          "typeId": {
            "const": "time-period",
            "type": "string"
          },
          "workspaceIds": {
            "default": [],
            "description": "If isTeamField=false then exactly one workspace ID should be provided.\nIf isTeamField=true then any amount of workspace IDs can be provided to be linked to the newly installed field.",
            "items": {
              "format": "uuid",
              "type": "string"
            },
            "type": "array"
          }
        },
        "required": [
          "typeId",
          "name",
          "settings",
          "required"
        ],
        "title": "InstallTimePeriodFieldRequest",
        "type": "object"
      },
      "IntegrationCapabilities": {
        "properties": {
          "debug": {
            "type": "boolean"
          },
          "hierarchy": {
            "type": "boolean"
          },
          "push": {
            "type": "boolean"
          },
          "sync": {
            "type": "boolean"
          }
        },
        "required": [
          "sync",
          "push",
          "hierarchy",
          "debug"
        ],
        "title": "IntegrationCapabilities",
        "type": "object"
      },
      "IntegrationSummary": {
        "properties": {
          "capabilities": {
            "$ref": "#/components/schemas/IntegrationCapabilities"
          },
          "createdAt": {
            "format": "date-time",
            "type": "string"
          },
          "enabled": {
            "type": "boolean"
          },
          "id": {
            "format": "uuid",
            "type": "string"
          },
          "lastSyncAt": {
            "format": "date-time",
            "type": "string"
          },
          "lastSyncState": {
            "$ref": "#/components/schemas/IntegrationSyncState"
          },
          "settings": {},
          "typeId": {
            "type": "string"
          }
        },
        "required": [
          "id",
          "typeId",
          "settings",
          "createdAt",
          "capabilities",
          "enabled"
        ],
        "title": "IntegrationSummary",
        "type": "object"
      },
      "IntegrationSyncState": {
        "properties": {
          "errorCount": {
            "format": "int32",
            "type": "integer"
          },
          "failedRunsCount": {
            "format": "int32",
            "type": "integer"
          },
          "successCount": {
            "format": "int32",
            "type": "integer"
          },
          "totalRunsCount": {
            "format": "int32",
            "type": "integer"
          }
        },
        "required": [
          "successCount",
          "errorCount",
          "totalRunsCount",
          "failedRunsCount"
        ],
        "title": "IntegrationSyncState",
        "type": "object"
      },
      "InviteUserRequest": {
        "properties": {
          "email": {
            "type": "string"
          },
          "fullName": {
            "type": "string"
          },
          "role": {
            "$ref": "#/components/schemas/Role"
          }
        },
        "required": [
          "email",
          "role",
          "fullName"
        ],
        "title": "InviteUserRequest",
        "type": "object"
      },
      "Item": {
        "properties": {
          "archived": {
            "description": "Whether this item is archived.",
            "type": "boolean"
          },
          "assigneeUserGroupIds": {
            "description": "Ids of user groups that are assigned to this item.",
            "items": {
              "format": "uuid",
              "type": "string"
            },
            "type": "array"
          },
          "assigneeUserIds": {
            "description": "Ids of users who are assigned to this item.",
            "items": {
              "format": "uuid",
              "type": "string"
            },
            "type": "array"
          },
          "color": {
            "$ref": "#/components/schemas/ItemColor",
            "description": "Color of this item."
          },
          "createdAt": {
            "description": "Timestamp of when this item was created.",
            "format": "date-time",
            "type": "string"
          },
          "description": {
            "$ref": "#/components/schemas/RichText",
            "description": "Rich text content as structured blocks. Different media types provide markdown support:\n• application/json - Default blocks format\n• application/vnd.airfocus.markdown+json - All RichText fields become markdown strings (recommended)\n• application/json+markdown - Legacy format, only top-level fields converted to markdown"
          },
          "fields": {
            "additionalProperties": {},
            "description": "Values of custom fields, where each key is a custom-field ID and each value is a JSON-formatted value of the corresponding field.",
            "examples": [
              {
                "0fc3cfbc-27e9-3ea6-8a78-7de13dae3e3c": {
                  "number": 42
                },
                "34f05b62-dd43-3e1e-82bc-b0acabd0d004": {
                  "boolean": true
                },
                "5396681e-ea50-3d63-9ae3-c9f8ca17b7d8": {
                  "userGroupIds": [
                    "70e2b87a-b774-3022-9ef0-e55031a1c4fb"
                  ],
                  "userIds": [
                    "24c9e15e-52af-347c-a25b-757e7bee1f9d"
                  ]
                },
                "75fe57ec-4a04-3a30-8cac-5f27223df81a": {
                  "dateRange": {
                    "endDate": "2024-02-14",
                    "startDate": "2024-01-14",
                    "timezone": "UTC"
                  }
                },
                "8be74552-df93-331b-bdd6-b36ed74bdb6a": {
                  "selection": [
                    "2bb225ce-b5ee-3493-967c-fde0d72da242"
                  ]
                },
                "c7824f3d-4d5f-3b2f-a2d0-34758c1e9454": {
                  "text": "A platform built for the new way of doing product management"
                },
                "e34d514f-7db5-38aa-872a-7c8191a09617": {
                  "date": {
                    "date": "2024-01-01",
                    "timezone": "UTC"
                  }
                }
              }
            ],
            "type": "object"
          },
          "id": {
            "description": "Unique identifier of this item.",
            "format": "uuid",
            "type": "string"
          },
          "lastUpdatedAt": {
            "description": "Timestamp of when this item was last updated.",
            "format": "date-time",
            "type": "string"
          },
          "name": {
            "description": "Name (title) of this item.",
            "type": "string"
          },
          "number": {
            "description": "A numeric id of this item, which is used to create an alias to this item like DEV-123. The number is unique within the workspace, and defined by server on item creation.",
            "format": "int32",
            "type": "integer"
          },
          "order": {
            "description": "A order number of this item for sorting.",
            "format": "int32",
            "type": "integer"
          },
          "statusCategoryUpdatedAt": {
            "description": "Timestamp of when the status of this item was last time switched from one category to another.",
            "format": "date-time",
            "type": "string"
          },
          "statusId": {
            "description": "Id of the status of this item.",
            "format": "uuid",
            "type": "string"
          },
          "statusUpdatedAt": {
            "description": "Timestamp of when the status of this item was last updated.",
            "format": "date-time",
            "type": "string"
          },
          "workspaceId": {
            "description": "Id of the workspace this workspace belongs to.",
            "format": "uuid",
            "type": "string"
          }
        },
        "required": [
          "id",
          "workspaceId",
          "statusId",
          "color",
          "name",
          "description",
          "assigneeUserIds",
          "assigneeUserGroupIds",
          "fields",
          "archived",
          "createdAt",
          "lastUpdatedAt",
          "order"
        ],
        "title": "Item",
        "type": "object"
      },
      "ItemAttachment": {
        "description": "A connection link between an item and an uploaded attachment.",
        "properties": {
          "contentType": {
            "description": "Type of updated content.",
            "type": "string"
          },
          "createdAt": {
            "description": "When this attachment link has been created.",
            "format": "date-time",
            "type": "string"
          },
          "id": {
            "description": "ID of an item-attachment link.",
            "format": "uuid",
            "type": "string"
          },
          "itemId": {
            "description": "ID of the item to which the attachment is linked.",
            "format": "uuid",
            "type": "string"
          },
          "lastUpdatedAt": {
            "description": "When this attachment link has been updated for the last time.",
            "format": "date-time",
            "type": "string"
          },
          "name": {
            "description": "Name of the attachment, e.g. its file name (to be displayed in UI).",
            "type": "string"
          },
          "uri": {
            "description": "URI of the attachment contents. It can be any URI, but conventionally it's a relative URI like 'attachment:1ecb9ecd-8a97-403a-a74a-741eb4b8fb69' with UUID of a file uploaded to airfocus file-storage. Such URI is then resolved by clients into a full HTTPS URL.",
            "type": "string"
          }
        },
        "required": [
          "id",
          "itemId",
          "name",
          "uri",
          "contentType",
          "createdAt",
          "lastUpdatedAt"
        ],
        "title": "ItemAttachment",
        "type": "object"
      },
      "ItemAttachmentBulkAction": {
        "discriminator": {
          "mapping": {
            "create": "#/components/schemas/ItemAttachmentBulkCreate",
            "delete": "#/components/schemas/ItemAttachmentBulkDelete",
            "patch": "#/components/schemas/ItemAttachmentBulkPatch",
            "update": "#/components/schemas/ItemAttachmentBulkUpdate"
          },
          "propertyName": "type"
        },
        "oneOf": [
          {
            "$ref": "#/components/schemas/ItemAttachmentBulkCreate"
          },
          {
            "$ref": "#/components/schemas/ItemAttachmentBulkDelete"
          },
          {
            "$ref": "#/components/schemas/ItemAttachmentBulkPatch"
          },
          {
            "$ref": "#/components/schemas/ItemAttachmentBulkUpdate"
          }
        ],
        "title": "ItemAttachmentBulkAction"
      },
      "ItemAttachmentBulkCreate": {
        "properties": {
          "resource": {
            "$ref": "#/components/schemas/ItemAttachment"
          },
          "type": {
            "enum": [
              "create"
            ],
            "type": "string"
          }
        },
        "required": [
          "resource",
          "type"
        ],
        "title": "ItemAttachmentBulkCreate",
        "type": "object"
      },
      "ItemAttachmentBulkDelete": {
        "properties": {
          "id": {
            "format": "uuid",
            "type": "string"
          },
          "type": {
            "enum": [
              "delete"
            ],
            "type": "string"
          }
        },
        "required": [
          "id",
          "type"
        ],
        "title": "ItemAttachmentBulkDelete",
        "type": "object"
      },
      "ItemAttachmentBulkPatch": {
        "properties": {
          "id": {
            "format": "uuid",
            "type": "string"
          },
          "transform": {
            "$ref": "#/components/schemas/JsonPatch"
          },
          "type": {
            "enum": [
              "patch"
            ],
            "type": "string"
          }
        },
        "required": [
          "id",
          "transform",
          "type"
        ],
        "title": "ItemAttachmentBulkPatch",
        "type": "object"
      },
      "ItemAttachmentBulkUpdate": {
        "properties": {
          "id": {
            "format": "uuid",
            "type": "string"
          },
          "resource": {
            "$ref": "#/components/schemas/ItemAttachment"
          },
          "type": {
            "enum": [
              "update"
            ],
            "type": "string"
          }
        },
        "required": [
          "id",
          "resource",
          "type"
        ],
        "title": "ItemAttachmentBulkUpdate",
        "type": "object"
      },
      "ItemAttachmentWithEmbed": {
        "description": "A connection link between an item and an uploaded attachment.",
        "properties": {
          "_embedded": {
            "type": "object"
          },
          "contentType": {
            "description": "Type of updated content.",
            "type": "string"
          },
          "createdAt": {
            "description": "When this attachment link has been created.",
            "format": "date-time",
            "type": "string"
          },
          "id": {
            "description": "ID of an item-attachment link.",
            "format": "uuid",
            "type": "string"
          },
          "itemId": {
            "description": "ID of the item to which the attachment is linked.",
            "format": "uuid",
            "type": "string"
          },
          "lastUpdatedAt": {
            "description": "When this attachment link has been updated for the last time.",
            "format": "date-time",
            "type": "string"
          },
          "name": {
            "description": "Name of the attachment, e.g. its file name (to be displayed in UI).",
            "type": "string"
          },
          "uri": {
            "description": "URI of the attachment contents. It can be any URI, but conventionally it's a relative URI like 'attachment:1ecb9ecd-8a97-403a-a74a-741eb4b8fb69' with UUID of a file uploaded to airfocus file-storage. Such URI is then resolved by clients into a full HTTPS URL.",
            "type": "string"
          }
        },
        "required": [
          "id",
          "itemId",
          "name",
          "uri",
          "contentType",
          "createdAt",
          "lastUpdatedAt",
          "_embedded"
        ],
        "title": "ItemAttachmentWithEmbed",
        "type": "object"
      },
      "ItemAttachmentWithEmbedOrNullList": {
        "items": {
          "$ref": "#/components/schemas/ItemAttachmentWithEmbed"
        },
        "title": "ItemAttachmentWithEmbedOrNullList",
        "type": "array"
      },
      "ItemAttachmentWithEmbedPage": {
        "properties": {
          "items": {
            "items": {
              "$ref": "#/components/schemas/ItemAttachmentWithEmbed"
            },
            "type": "array"
          },
          "totalItems": {
            "format": "int32",
            "type": "integer"
          }
        },
        "required": [
          "items",
          "totalItems"
        ],
        "title": "ItemAttachmentWithEmbedPage",
        "type": "object"
      },
      "ItemBulkAction": {
        "discriminator": {
          "mapping": {
            "create": "#/components/schemas/ItemBulkCreate",
            "delete": "#/components/schemas/ItemBulkDelete",
            "patch": "#/components/schemas/ItemBulkPatch",
            "update": "#/components/schemas/ItemBulkUpdate"
          },
          "propertyName": "type"
        },
        "oneOf": [
          {
            "$ref": "#/components/schemas/ItemBulkCreate"
          },
          {
            "$ref": "#/components/schemas/ItemBulkDelete"
          },
          {
            "$ref": "#/components/schemas/ItemBulkPatch"
          },
          {
            "$ref": "#/components/schemas/ItemBulkUpdate"
          }
        ],
        "title": "ItemBulkAction"
      },
      "ItemBulkCreate": {
        "properties": {
          "resource": {
            "$ref": "#/components/schemas/CreateItemRequest"
          },
          "type": {
            "enum": [
              "create"
            ],
            "type": "string"
          }
        },
        "required": [
          "resource",
          "type"
        ],
        "title": "ItemBulkCreate",
        "type": "object"
      },
      "ItemBulkDelete": {
        "properties": {
          "id": {
            "format": "uuid",
            "type": "string"
          },
          "type": {
            "enum": [
              "delete"
            ],
            "type": "string"
          }
        },
        "required": [
          "id",
          "type"
        ],
        "title": "ItemBulkDelete",
        "type": "object"
      },
      "ItemBulkPatch": {
        "properties": {
          "id": {
            "format": "uuid",
            "type": "string"
          },
          "transform": {
            "$ref": "#/components/schemas/JsonPatch"
          },
          "type": {
            "enum": [
              "patch"
            ],
            "type": "string"
          }
        },
        "required": [
          "id",
          "transform",
          "type"
        ],
        "title": "ItemBulkPatch",
        "type": "object"
      },
      "ItemBulkUpdate": {
        "properties": {
          "id": {
            "format": "uuid",
            "type": "string"
          },
          "resource": {
            "$ref": "#/components/schemas/UpdateItemRequest"
          },
          "type": {
            "enum": [
              "update"
            ],
            "type": "string"
          }
        },
        "required": [
          "id",
          "resource",
          "type"
        ],
        "title": "ItemBulkUpdate",
        "type": "object"
      },
      "ItemColor": {
        "enum": [
          "amber",
          "azure",
          "black",
          "blue",
          "coco",
          "daulphine",
          "emerald",
          "fanta",
          "granite",
          "great",
          "leaf",
          "moss",
          "ocean",
          "orange",
          "pink",
          "purple",
          "red",
          "sky",
          "violet",
          "yellow"
        ],
        "title": "ItemColor",
        "type": "string"
      },
      "ItemComment": {
        "properties": {
          "content": {
            "$ref": "#/components/schemas/RichText",
            "description": "Rich text content as structured blocks. Different media types provide markdown support:\n• application/json - Default blocks format\n• application/vnd.airfocus.markdown+json - All RichText fields become markdown strings (recommended)\n• application/json+markdown - Legacy format, only top-level fields converted to markdown"
          },
          "createdAt": {
            "format": "date-time",
            "type": "string"
          },
          "id": {
            "format": "uuid",
            "type": "string"
          },
          "itemId": {
            "format": "uuid",
            "type": "string"
          },
          "lastUpdatedAt": {
            "format": "date-time",
            "type": "string"
          },
          "reactions": {
            "items": {
              "$ref": "#/components/schemas/ItemCommentReaction"
            },
            "type": "array"
          },
          "userId": {
            "format": "uuid",
            "type": "string"
          }
        },
        "required": [
          "id",
          "itemId",
          "userId",
          "content",
          "reactions",
          "createdAt",
          "lastUpdatedAt"
        ],
        "title": "ItemComment",
        "type": "object"
      },
      "ItemCommentEmbed": {
        "title": "ItemCommentEmbed",
        "type": "object"
      },
      "ItemCommentReaction": {
        "properties": {
          "emoji": {
            "$ref": "#/components/schemas/Emoji"
          },
          "userIds": {
            "items": {
              "format": "uuid",
              "type": "string"
            },
            "type": "array"
          }
        },
        "required": [
          "emoji",
          "userIds"
        ],
        "title": "ItemCommentReaction",
        "type": "object"
      },
      "ItemCommentSearchQuery": {
        "properties": {
          "itemId": {
            "format": "uuid",
            "type": "string"
          }
        },
        "title": "ItemCommentSearchQuery",
        "type": "object"
      },
      "ItemCommentWithItemCommentEmbed": {
        "properties": {
          "_embedded": {
            "$ref": "#/components/schemas/ItemCommentEmbed"
          },
          "content": {
            "$ref": "#/components/schemas/RichText",
            "description": "Rich text content as structured blocks. Different media types provide markdown support:\n• application/json - Default blocks format\n• application/vnd.airfocus.markdown+json - All RichText fields become markdown strings (recommended)\n• application/json+markdown - Legacy format, only top-level fields converted to markdown"
          },
          "createdAt": {
            "format": "date-time",
            "type": "string"
          },
          "id": {
            "format": "uuid",
            "type": "string"
          },
          "itemId": {
            "format": "uuid",
            "type": "string"
          },
          "lastUpdatedAt": {
            "format": "date-time",
            "type": "string"
          },
          "reactions": {
            "items": {
              "$ref": "#/components/schemas/ItemCommentReaction"
            },
            "type": "array"
          },
          "userId": {
            "format": "uuid",
            "type": "string"
          }
        },
        "required": [
          "id",
          "itemId",
          "userId",
          "content",
          "reactions",
          "createdAt",
          "lastUpdatedAt",
          "_embedded"
        ],
        "title": "ItemCommentWithItemCommentEmbed",
        "type": "object"
      },
      "ItemCommentWithItemCommentEmbedOrNullList": {
        "items": {
          "$ref": "#/components/schemas/ItemCommentWithItemCommentEmbed"
        },
        "title": "ItemCommentWithItemCommentEmbedOrNullList",
        "type": "array"
      },
      "ItemCommentWithItemCommentEmbedPage": {
        "properties": {
          "items": {
            "items": {
              "$ref": "#/components/schemas/ItemCommentWithItemCommentEmbed"
            },
            "type": "array"
          },
          "totalItems": {
            "format": "int32",
            "type": "integer"
          }
        },
        "required": [
          "items",
          "totalItems"
        ],
        "title": "ItemCommentWithItemCommentEmbedPage",
        "type": "object"
      },
      "ItemConstraint": {
        "discriminator": {
          "mapping": {
            "integrationPushForbidden": "#/components/schemas/ItemConstraintIntegrationPushForbidden",
            "integrationToInternal": "#/components/schemas/ItemConstraintIntegrationToInternal",
            "propertyReadOnly": "#/components/schemas/ItemConstraintPropertyReadOnly",
            "undeletable": "#/components/schemas/ItemConstraintUndeletable"
          },
          "propertyName": "type"
        },
        "oneOf": [
          {
            "$ref": "#/components/schemas/ItemConstraintIntegrationPushForbidden"
          },
          {
            "$ref": "#/components/schemas/ItemConstraintIntegrationToInternal"
          },
          {
            "$ref": "#/components/schemas/ItemConstraintPropertyReadOnly"
          },
          {
            "$ref": "#/components/schemas/ItemConstraintUndeletable"
          }
        ],
        "title": "ItemConstraint"
      },
      "ItemConstraintIntegrationPushForbidden": {
        "properties": {
          "extensionId": {
            "format": "uuid",
            "type": "string"
          },
          "type": {
            "const": "integrationPushForbidden",
            "type": "string"
          }
        },
        "required": [
          "extensionId",
          "type"
        ],
        "title": "ItemConstraintIntegrationPushForbidden",
        "type": "object"
      },
      "ItemConstraintIntegrationToInternal": {
        "properties": {
          "extensionId": {
            "format": "uuid",
            "type": "string"
          },
          "property": {
            "$ref": "#/components/schemas/RefItemProperty"
          },
          "type": {
            "const": "integrationToInternal",
            "type": "string"
          }
        },
        "required": [
          "extensionId",
          "property",
          "type"
        ],
        "title": "ItemConstraintIntegrationToInternal",
        "type": "object"
      },
      "ItemConstraintPropertyReadOnly": {
        "properties": {
          "extensionId": {
            "format": "uuid",
            "type": "string"
          },
          "property": {
            "$ref": "#/components/schemas/RefItemProperty"
          },
          "type": {
            "const": "propertyReadOnly",
            "type": "string"
          }
        },
        "required": [
          "extensionId",
          "property",
          "type"
        ],
        "title": "ItemConstraintPropertyReadOnly",
        "type": "object"
      },
      "ItemConstraintUndeletable": {
        "properties": {
          "extensionId": {
            "format": "uuid",
            "type": "string"
          },
          "type": {
            "const": "undeletable",
            "type": "string"
          }
        },
        "required": [
          "extensionId",
          "type"
        ],
        "title": "ItemConstraintUndeletable",
        "type": "object"
      },
      "ItemEmbed": {
        "properties": {
          "alias": {
            "type": "string"
          },
          "apps": {
            "additionalProperties": {
              "$ref": "#/components/schemas/ItemEmbedApp"
            },
            "type": "object"
          },
          "attachmentCount": {
            "format": "int32",
            "type": "integer"
          },
          "children": {
            "items": {
              "$ref": "#/components/schemas/RelativeItemInfo"
            },
            "type": "array"
          },
          "commentCount": {
            "format": "int32",
            "type": "integer"
          },
          "constraints": {
            "items": {
              "$ref": "#/components/schemas/ItemConstraint"
            },
            "type": "array"
          },
          "integration": {
            "$ref": "#/components/schemas/ItemEmbedIntegration"
          },
          "linkCount": {
            "format": "int32",
            "type": "integer"
          },
          "parents": {
            "items": {
              "$ref": "#/components/schemas/RelativeItemInfo"
            },
            "type": "array"
          },
          "progress": {
            "$ref": "#/components/schemas/ItemEmbedProgress"
          },
          "watched": {
            "type": "boolean"
          },
          "workspaceItemType": {
            "$ref": "#/components/schemas/ItemType"
          }
        },
        "required": [
          "parents",
          "children",
          "progress",
          "apps",
          "constraints",
          "watched",
          "linkCount",
          "commentCount",
          "attachmentCount"
        ],
        "title": "ItemEmbed",
        "type": "object"
      },
      "ItemEmbedApp": {
        "properties": {
          "data": {},
          "id": {
            "format": "uuid",
            "type": "string"
          },
          "typeId": {
            "type": "string"
          }
        },
        "required": [
          "id",
          "typeId",
          "data"
        ],
        "title": "ItemEmbedApp",
        "type": "object"
      },
      "ItemEmbedIntegration": {
        "properties": {
          "data": {},
          "id": {
            "format": "uuid",
            "type": "string"
          },
          "typeId": {
            "type": "string"
          }
        },
        "required": [
          "id",
          "typeId",
          "data"
        ],
        "title": "ItemEmbedIntegration",
        "type": "object"
      },
      "ItemEmbedProgress": {
        "properties": {
          "closed": {
            "format": "int32",
            "type": "integer"
          },
          "total": {
            "format": "int32",
            "type": "integer"
          }
        },
        "required": [
          "closed",
          "total"
        ],
        "title": "ItemEmbedProgress",
        "type": "object"
      },
      "ItemLinkBulkAction": {
        "discriminator": {
          "mapping": {
            "create": "#/components/schemas/ItemLinkBulkCreate",
            "delete": "#/components/schemas/ItemLinkBulkDelete",
            "patch": "#/components/schemas/ItemLinkBulkPatch",
            "update": "#/components/schemas/ItemLinkBulkUpdate"
          },
          "propertyName": "type"
        },
        "oneOf": [
          {
            "$ref": "#/components/schemas/ItemLinkBulkCreate"
          },
          {
            "$ref": "#/components/schemas/ItemLinkBulkDelete"
          },
          {
            "$ref": "#/components/schemas/ItemLinkBulkPatch"
          },
          {
            "$ref": "#/components/schemas/ItemLinkBulkUpdate"
          }
        ],
        "title": "ItemLinkBulkAction"
      },
      "ItemLinkBulkCreate": {
        "properties": {
          "resource": {
            "$ref": "#/components/schemas/CreateItemLinkRequest"
          },
          "type": {
            "enum": [
              "create"
            ],
            "type": "string"
          }
        },
        "required": [
          "resource",
          "type"
        ],
        "title": "ItemLinkBulkCreate",
        "type": "object"
      },
      "ItemLinkBulkDelete": {
        "properties": {
          "id": {
            "format": "uuid",
            "type": "string"
          },
          "type": {
            "enum": [
              "delete"
            ],
            "type": "string"
          }
        },
        "required": [
          "id",
          "type"
        ],
        "title": "ItemLinkBulkDelete",
        "type": "object"
      },
      "ItemLinkBulkPatch": {
        "properties": {
          "id": {
            "format": "uuid",
            "type": "string"
          },
          "transform": {
            "$ref": "#/components/schemas/JsonPatch"
          },
          "type": {
            "enum": [
              "patch"
            ],
            "type": "string"
          }
        },
        "required": [
          "id",
          "transform",
          "type"
        ],
        "title": "ItemLinkBulkPatch",
        "type": "object"
      },
      "ItemLinkBulkUpdate": {
        "properties": {
          "id": {
            "format": "uuid",
            "type": "string"
          },
          "resource": {
            "$ref": "#/components/schemas/UpdateItemLinkRequest"
          },
          "type": {
            "enum": [
              "update"
            ],
            "type": "string"
          }
        },
        "required": [
          "id",
          "resource",
          "type"
        ],
        "title": "ItemLinkBulkUpdate",
        "type": "object"
      },
      "ItemLinkConstraint": {
        "discriminator": {
          "mapping": {
            "readonly": "#/components/schemas/ItemLinkConstraintReadonly",
            "undeletable": "#/components/schemas/ItemLinkConstraintUndeletable"
          },
          "propertyName": "type"
        },
        "oneOf": [
          {
            "$ref": "#/components/schemas/ItemLinkConstraintReadonly"
          },
          {
            "$ref": "#/components/schemas/ItemLinkConstraintUndeletable"
          }
        ],
        "title": "ItemLinkConstraint"
      },
      "ItemLinkConstraintReadonly": {
        "properties": {
          "extensionId": {
            "format": "uuid",
            "type": "string"
          },
          "type": {
            "const": "readonly",
            "type": "string"
          }
        },
        "required": [
          "extensionId",
          "type"
        ],
        "title": "ItemLinkConstraintReadonly",
        "type": "object"
      },
      "ItemLinkConstraintUndeletable": {
        "properties": {
          "extensionId": {
            "format": "uuid",
            "type": "string"
          },
          "type": {
            "const": "undeletable",
            "type": "string"
          }
        },
        "required": [
          "extensionId",
          "type"
        ],
        "title": "ItemLinkConstraintUndeletable",
        "type": "object"
      },
      "ItemLinkEmbed": {
        "properties": {
          "apps": {
            "additionalProperties": {
              "$ref": "#/components/schemas/ItemLinkEmbedApp"
            },
            "type": "object"
          },
          "constraints": {
            "items": {
              "$ref": "#/components/schemas/ItemLinkConstraint"
            },
            "type": "array"
          },
          "fromWorkspaceId": {
            "format": "uuid",
            "type": "string"
          },
          "toWorkspaceId": {
            "format": "uuid",
            "type": "string"
          }
        },
        "required": [
          "fromWorkspaceId",
          "toWorkspaceId",
          "apps",
          "constraints"
        ],
        "title": "ItemLinkEmbed",
        "type": "object"
      },
      "ItemLinkEmbedApp": {
        "properties": {
          "data": {},
          "id": {
            "format": "uuid",
            "type": "string"
          },
          "typeId": {
            "type": "string"
          }
        },
        "required": [
          "id",
          "typeId",
          "data"
        ],
        "title": "ItemLinkEmbedApp",
        "type": "object"
      },
      "ItemLinkSearchQuery": {
        "description": "Query-parameters for searching item-links.",
        "properties": {
          "includeArchived": {
            "default": false,
            "description": "Also include item-links which connect archived items.",
            "type": "boolean"
          },
          "itemIds": {
            "default": [],
            "description": "Return only those item-links which connect the specified items.",
            "items": {
              "format": "uuid",
              "type": "string"
            },
            "type": "array",
            "uniqueItems": true
          },
          "workspaceIds": {
            "default": [],
            "description": "Return only those item-links which connect items in the specified workspaces.",
            "items": {
              "format": "uuid",
              "type": "string"
            },
            "type": "array",
            "uniqueItems": true
          }
        },
        "title": "ItemLinkSearchQuery",
        "type": "object"
      },
      "ItemLinkType": {
        "description": "Type of an item-link",
        "enum": [
          "dependency",
          "duplicate",
          "relation"
        ],
        "title": "ItemLinkType",
        "type": "string"
      },
      "ItemLinkWithItemLinkEmbed": {
        "properties": {
          "_embedded": {
            "$ref": "#/components/schemas/ItemLinkEmbed"
          },
          "fromItemId": {
            "format": "uuid",
            "type": "string"
          },
          "fromOrder": {
            "description": "How this item-link is ordered in the list of links of the \"fromItem\".",
            "format": "int32",
            "type": "integer"
          },
          "id": {
            "format": "uuid",
            "type": "string"
          },
          "toItemId": {
            "format": "uuid",
            "type": "string"
          },
          "toOrder": {
            "description": "How this item-link is ordered in the list of links of the \"toItem\".",
            "format": "int32",
            "type": "integer"
          },
          "type": {
            "$ref": "#/components/schemas/ItemLinkType"
          },
          "typeId": {
            "format": "uuid",
            "type": "string"
          }
        },
        "required": [
          "id",
          "fromItemId",
          "toItemId",
          "type",
          "fromOrder",
          "toOrder",
          "_embedded"
        ],
        "title": "ItemLinkWithItemLinkEmbed",
        "type": "object"
      },
      "ItemLinkWithItemLinkEmbedOrNullList": {
        "items": {
          "$ref": "#/components/schemas/ItemLinkWithItemLinkEmbed"
        },
        "title": "ItemLinkWithItemLinkEmbedOrNullList",
        "type": "array"
      },
      "ItemLinkWithItemLinkEmbedPage": {
        "properties": {
          "items": {
            "items": {
              "$ref": "#/components/schemas/ItemLinkWithItemLinkEmbed"
            },
            "type": "array"
          },
          "totalItems": {
            "format": "int32",
            "type": "integer"
          }
        },
        "required": [
          "items",
          "totalItems"
        ],
        "title": "ItemLinkWithItemLinkEmbedPage",
        "type": "object"
      },
      "ItemRelationBulkAction": {
        "discriminator": {
          "mapping": {
            "create": "#/components/schemas/ItemRelationBulkCreate",
            "delete": "#/components/schemas/ItemRelationBulkDelete",
            "patch": "#/components/schemas/ItemRelationBulkPatch",
            "update": "#/components/schemas/ItemRelationBulkUpdate"
          },
          "propertyName": "type"
        },
        "oneOf": [
          {
            "$ref": "#/components/schemas/ItemRelationBulkCreate"
          },
          {
            "$ref": "#/components/schemas/ItemRelationBulkDelete"
          },
          {
            "$ref": "#/components/schemas/ItemRelationBulkPatch"
          },
          {
            "$ref": "#/components/schemas/ItemRelationBulkUpdate"
          }
        ],
        "title": "ItemRelationBulkAction"
      },
      "ItemRelationBulkCreate": {
        "properties": {
          "resource": {
            "$ref": "#/components/schemas/ItemRelationCreateRequest"
          },
          "type": {
            "enum": [
              "create"
            ],
            "type": "string"
          }
        },
        "required": [
          "resource",
          "type"
        ],
        "title": "ItemRelationBulkCreate",
        "type": "object"
      },
      "ItemRelationBulkDelete": {
        "properties": {
          "id": {
            "format": "uuid",
            "type": "string"
          },
          "type": {
            "enum": [
              "delete"
            ],
            "type": "string"
          }
        },
        "required": [
          "id",
          "type"
        ],
        "title": "ItemRelationBulkDelete",
        "type": "object"
      },
      "ItemRelationBulkPatch": {
        "properties": {
          "id": {
            "format": "uuid",
            "type": "string"
          },
          "transform": {
            "$ref": "#/components/schemas/JsonPatch"
          },
          "type": {
            "enum": [
              "patch"
            ],
            "type": "string"
          }
        },
        "required": [
          "id",
          "transform",
          "type"
        ],
        "title": "ItemRelationBulkPatch",
        "type": "object"
      },
      "ItemRelationBulkUpdate": {
        "properties": {
          "id": {
            "format": "uuid",
            "type": "string"
          },
          "resource": {
            "$ref": "#/components/schemas/ItemRelationUpdateRequest"
          },
          "type": {
            "enum": [
              "update"
            ],
            "type": "string"
          }
        },
        "required": [
          "id",
          "resource",
          "type"
        ],
        "title": "ItemRelationBulkUpdate",
        "type": "object"
      },
      "ItemRelationConstraint": {
        "discriminator": {
          "mapping": {
            "readonly": "#/components/schemas/ItemRelationConstraintReadonly"
          },
          "propertyName": "type"
        },
        "oneOf": [
          {
            "$ref": "#/components/schemas/ItemRelationConstraintReadonly"
          }
        ],
        "title": "ItemRelationConstraint"
      },
      "ItemRelationConstraintReadonly": {
        "properties": {
          "extensionId": {
            "format": "uuid",
            "type": "string"
          },
          "type": {
            "const": "readonly",
            "type": "string"
          }
        },
        "required": [
          "extensionId",
          "type"
        ],
        "title": "ItemRelationConstraintReadonly",
        "type": "object"
      },
      "ItemRelationCreateRequest": {
        "properties": {
          "childId": {
            "format": "uuid",
            "type": "string"
          },
          "childOrder": {
            "format": "int32",
            "type": "integer"
          },
          "parentId": {
            "format": "uuid",
            "type": "string"
          },
          "parentOrder": {
            "format": "int32",
            "type": "integer"
          }
        },
        "required": [
          "parentId",
          "childId"
        ],
        "title": "ItemRelationCreateRequest",
        "type": "object"
      },
      "ItemRelationEmbed": {
        "properties": {
          "constraints": {
            "items": {
              "$ref": "#/components/schemas/ItemRelationConstraint"
            },
            "type": "array"
          }
        },
        "required": [
          "constraints"
        ],
        "title": "ItemRelationEmbed",
        "type": "object"
      },
      "ItemRelationSearchQuery": {
        "properties": {
          "filter": {
            "$ref": "#/components/schemas/ItemRelationSearchQueryFilter"
          }
        },
        "title": "ItemRelationSearchQuery",
        "type": "object"
      },
      "ItemRelationSearchQueryFilter": {
        "discriminator": {
          "mapping": {
            "child": "#/components/schemas/ItemRelationSearchQueryFilterChild",
            "parent": "#/components/schemas/ItemRelationSearchQueryFilterParent",
            "parentOrChild": "#/components/schemas/ItemRelationSearchQueryFilterParentOrChild"
          },
          "propertyName": "type"
        },
        "oneOf": [
          {
            "$ref": "#/components/schemas/ItemRelationSearchQueryFilterChild"
          },
          {
            "$ref": "#/components/schemas/ItemRelationSearchQueryFilterParent"
          },
          {
            "$ref": "#/components/schemas/ItemRelationSearchQueryFilterParentOrChild"
          }
        ],
        "title": "ItemRelationSearchQueryFilter"
      },
      "ItemRelationSearchQueryFilterChild": {
        "properties": {
          "itemId": {
            "format": "uuid",
            "type": "string"
          },
          "type": {
            "const": "child",
            "type": "string"
          }
        },
        "required": [
          "itemId",
          "type"
        ],
        "title": "ItemRelationSearchQueryFilterChild",
        "type": "object"
      },
      "ItemRelationSearchQueryFilterParent": {
        "properties": {
          "itemId": {
            "format": "uuid",
            "type": "string"
          },
          "type": {
            "const": "parent",
            "type": "string"
          }
        },
        "required": [
          "itemId",
          "type"
        ],
        "title": "ItemRelationSearchQueryFilterParent",
        "type": "object"
      },
      "ItemRelationSearchQueryFilterParentOrChild": {
        "properties": {
          "itemId": {
            "format": "uuid",
            "type": "string"
          },
          "type": {
            "const": "parentOrChild",
            "type": "string"
          }
        },
        "required": [
          "itemId",
          "type"
        ],
        "title": "ItemRelationSearchQueryFilterParentOrChild",
        "type": "object"
      },
      "ItemRelationUpdateRequest": {
        "properties": {
          "childOrder": {
            "format": "int32",
            "type": "integer"
          },
          "parentOrder": {
            "format": "int32",
            "type": "integer"
          }
        },
        "required": [
          "parentOrder",
          "childOrder"
        ],
        "title": "ItemRelationUpdateRequest",
        "type": "object"
      },
      "ItemRelationWithItemRelationEmbed": {
        "properties": {
          "_embedded": {
            "$ref": "#/components/schemas/ItemRelationEmbed"
          },
          "childId": {
            "format": "uuid",
            "type": "string"
          },
          "childOrder": {
            "format": "int32",
            "type": "integer"
          },
          "id": {
            "format": "uuid",
            "type": "string"
          },
          "parentId": {
            "format": "uuid",
            "type": "string"
          },
          "parentOrder": {
            "format": "int32",
            "type": "integer"
          }
        },
        "required": [
          "id",
          "parentId",
          "childId",
          "parentOrder",
          "childOrder",
          "_embedded"
        ],
        "title": "ItemRelationWithItemRelationEmbed",
        "type": "object"
      },
      "ItemRelationWithItemRelationEmbedOrNullList": {
        "items": {
          "$ref": "#/components/schemas/ItemRelationWithItemRelationEmbed"
        },
        "title": "ItemRelationWithItemRelationEmbedOrNullList",
        "type": "array"
      },
      "ItemRelationWithItemRelationEmbedPage": {
        "properties": {
          "items": {
            "items": {
              "$ref": "#/components/schemas/ItemRelationWithItemRelationEmbed"
            },
            "type": "array"
          },
          "totalItems": {
            "format": "int32",
            "type": "integer"
          }
        },
        "required": [
          "items",
          "totalItems"
        ],
        "title": "ItemRelationWithItemRelationEmbedPage",
        "type": "object"
      },
      "ItemSearchQuery": {
        "properties": {
          "archived": {
            "type": "boolean"
          },
          "filter": {
            "$ref": "#/components/schemas/ItemSearchQueryFilter"
          },
          "sort": {
            "$ref": "#/components/schemas/ItemSearchQuerySort"
          }
        },
        "required": [
          "filter",
          "sort",
          "archived"
        ],
        "title": "ItemSearchQuery",
        "type": "object"
      },
      "ItemSearchQueryDateTimeFilterValue": {
        "properties": {
          "date": {
            "format": "date",
            "type": "string"
          },
          "time": {
            "type": "string"
          },
          "zoneId": {
            "type": "string"
          }
        },
        "required": [
          "date",
          "zoneId"
        ],
        "title": "ItemSearchQueryDateTimeFilterValue",
        "type": "object"
      },
      "ItemSearchQueryFilter": {
        "discriminator": {
          "mapping": {
            "and": "#/components/schemas/ItemSearchQueryFilterAnd",
            "assignees:contain": "#/components/schemas/ItemSearchQueryFilterAssigneesContain",
            "assignees:containsAll": "#/components/schemas/ItemSearchQueryFilterAssigneesContainsAll",
            "assignees:containsAny": "#/components/schemas/ItemSearchQueryFilterAssigneesContainsAny",
            "assignees:defined": "#/components/schemas/ItemSearchQueryFilterAssigneesDefined",
            "createdAt:absolute": "#/components/schemas/ItemSearchQueryFilterCreatedAtAbsolute",
            "createdAt:range": "#/components/schemas/ItemSearchQueryFilterCreatedAtRange",
            "createdAt:relative": "#/components/schemas/ItemSearchQueryFilterCreatedAtRelative",
            "field:value": "#/components/schemas/ItemSearchQueryFilterFieldValue",
            "integration:defined": "#/components/schemas/ItemSearchQueryFilterIntegrationDefined",
            "integration:value": "#/components/schemas/ItemSearchQueryFilterIntegrationValue",
            "item:watchSelf": "#/components/schemas/ItemSearchQueryFilterItemWatchSelf",
            "lastUpdatedAt:absolute": "#/components/schemas/ItemSearchQueryFilterLastUpdatedAtAbsolute",
            "lastUpdatedAt:range": "#/components/schemas/ItemSearchQueryFilterLastUpdatedAtRange",
            "lastUpdatedAt:relative": "#/components/schemas/ItemSearchQueryFilterLastUpdatedAtRelative",
            "name:contain": "#/components/schemas/ItemSearchQueryFilterNameContain",
            "name:equal": "#/components/schemas/ItemSearchQueryFilterNameEqual",
            "not": "#/components/schemas/ItemSearchQueryFilterNot",
            "or": "#/components/schemas/ItemSearchQueryFilterOr",
            "parent:defined": "#/components/schemas/ItemSearchQueryFilterParentDefined",
            "parent:value": "#/components/schemas/ItemSearchQueryFilterParentValue",
            "status:containsAny": "#/components/schemas/ItemSearchQueryFilterStatusContainsAny",
            "status:updatedSince": "#/components/schemas/ItemSearchQueryFilterStatusUpdatedSince",
            "statusCategory:containsAny": "#/components/schemas/ItemSearchQueryFilterStatusCategoryContainsAny",
            "statusCategory:updatedSince": "#/components/schemas/ItemSearchQueryFilterStatusCategoryUpdatedSince",
            "updated:since": "#/components/schemas/ItemSearchQueryFilterUpdatedSince"
          },
          "propertyName": "type"
        },
        "examples": [
          {
            "inner": [
              {
                "text": "foo",
                "caseSensitive": false,
                "mode": "contain",
                "type": "name"
              },
              {
                "mode": "defined",
                "type": "assignees"
              }
            ],
            "type": "and"
          }
        ],
        "oneOf": [
          {
            "$ref": "#/components/schemas/ItemSearchQueryFilterAnd"
          },
          {
            "$ref": "#/components/schemas/ItemSearchQueryFilterAssigneesContain"
          },
          {
            "$ref": "#/components/schemas/ItemSearchQueryFilterAssigneesContainsAll"
          },
          {
            "$ref": "#/components/schemas/ItemSearchQueryFilterAssigneesContainsAny"
          },
          {
            "$ref": "#/components/schemas/ItemSearchQueryFilterAssigneesDefined"
          },
          {
            "$ref": "#/components/schemas/ItemSearchQueryFilterCreatedAtAbsolute"
          },
          {
            "$ref": "#/components/schemas/ItemSearchQueryFilterCreatedAtRange"
          },
          {
            "$ref": "#/components/schemas/ItemSearchQueryFilterCreatedAtRelative"
          },
          {
            "$ref": "#/components/schemas/ItemSearchQueryFilterFieldValue"
          },
          {
            "$ref": "#/components/schemas/ItemSearchQueryFilterIntegrationDefined"
          },
          {
            "$ref": "#/components/schemas/ItemSearchQueryFilterIntegrationValue"
          },
          {
            "$ref": "#/components/schemas/ItemSearchQueryFilterItemWatchSelf"
          },
          {
            "$ref": "#/components/schemas/ItemSearchQueryFilterLastUpdatedAtAbsolute"
          },
          {
            "$ref": "#/components/schemas/ItemSearchQueryFilterLastUpdatedAtRange"
          },
          {
            "$ref": "#/components/schemas/ItemSearchQueryFilterLastUpdatedAtRelative"
          },
          {
            "$ref": "#/components/schemas/ItemSearchQueryFilterNameContain"
          },
          {
            "$ref": "#/components/schemas/ItemSearchQueryFilterNameEqual"
          },
          {
            "$ref": "#/components/schemas/ItemSearchQueryFilterNot"
          },
          {
            "$ref": "#/components/schemas/ItemSearchQueryFilterOr"
          },
          {
            "$ref": "#/components/schemas/ItemSearchQueryFilterParentDefined"
          },
          {
            "$ref": "#/components/schemas/ItemSearchQueryFilterParentValue"
          },
          {
            "$ref": "#/components/schemas/ItemSearchQueryFilterStatusCategoryContainsAny"
          },
          {
            "$ref": "#/components/schemas/ItemSearchQueryFilterStatusCategoryUpdatedSince"
          },
          {
            "$ref": "#/components/schemas/ItemSearchQueryFilterStatusContainsAny"
          },
          {
            "$ref": "#/components/schemas/ItemSearchQueryFilterStatusUpdatedSince"
          },
          {
            "$ref": "#/components/schemas/ItemSearchQueryFilterUpdatedSince"
          }
        ],
        "title": "ItemSearchQueryFilter"
      },
      "ItemSearchQueryFilterAnd": {
        "properties": {
          "inner": {
            "items": {
              "$ref": "#/components/schemas/ItemSearchQueryFilter"
            },
            "type": "array"
          },
          "type": {
            "const": "and",
            "type": "string"
          }
        },
        "required": [
          "inner",
          "type"
        ],
        "title": "ItemSearchQueryFilterAnd",
        "type": "object"
      },
      "ItemSearchQueryFilterAssigneesContain": {
        "properties": {
          "type": {
            "const": "assignees:contain",
            "type": "string"
          },
          "user": {
            "$ref": "#/components/schemas/UserRef"
          }
        },
        "required": [
          "user",
          "type"
        ],
        "title": "ItemSearchQueryFilterAssigneesContain",
        "type": "object"
      },
      "ItemSearchQueryFilterAssigneesContainsAll": {
        "properties": {
          "type": {
            "const": "assignees:containsAll",
            "type": "string"
          },
          "users": {
            "items": {
              "$ref": "#/components/schemas/UserRef"
            },
            "type": "array"
          }
        },
        "required": [
          "users",
          "type"
        ],
        "title": "ItemSearchQueryFilterAssigneesContainsAll",
        "type": "object"
      },
      "ItemSearchQueryFilterAssigneesContainsAny": {
        "properties": {
          "type": {
            "const": "assignees:containsAny",
            "type": "string"
          },
          "users": {
            "items": {
              "$ref": "#/components/schemas/UserRef"
            },
            "type": "array"
          }
        },
        "required": [
          "users",
          "type"
        ],
        "title": "ItemSearchQueryFilterAssigneesContainsAny",
        "type": "object"
      },
      "ItemSearchQueryFilterAssigneesDefined": {
        "properties": {
          "type": {
            "const": "assignees:defined",
            "type": "string"
          }
        },
        "required": [
          "type"
        ],
        "title": "ItemSearchQueryFilterAssigneesDefined",
        "type": "object"
      },
      "ItemSearchQueryFilterCreatedAtAbsolute": {
        "properties": {
          "mode": {
            "$ref": "#/components/schemas/ItemSearchQueryTimeMode"
          },
          "type": {
            "const": "createdAt:absolute",
            "type": "string"
          },
          "value": {
            "$ref": "#/components/schemas/ItemSearchQueryDateTimeFilterValue"
          }
        },
        "required": [
          "mode",
          "value",
          "type"
        ],
        "title": "ItemSearchQueryFilterCreatedAtAbsolute",
        "type": "object"
      },
      "ItemSearchQueryFilterCreatedAtRange": {
        "properties": {
          "from": {
            "format": "date",
            "type": "string"
          },
          "type": {
            "const": "createdAt:range",
            "type": "string"
          },
          "until": {
            "format": "date",
            "type": "string"
          }
        },
        "required": [
          "from",
          "until",
          "type"
        ],
        "title": "ItemSearchQueryFilterCreatedAtRange",
        "type": "object"
      },
      "ItemSearchQueryFilterCreatedAtRelative": {
        "properties": {
          "anchor": {
            "$ref": "#/components/schemas/ItemSearchQueryTimeAnchor"
          },
          "type": {
            "const": "createdAt:relative",
            "type": "string"
          }
        },
        "required": [
          "anchor",
          "type"
        ],
        "title": "ItemSearchQueryFilterCreatedAtRelative",
        "type": "object"
      },
      "ItemSearchQueryFilterFieldValue": {
        "properties": {
          "fieldId": {
            "format": "uuid",
            "type": "string"
          },
          "filter": {
            "$ref": "#/components/schemas/JsObject"
          },
          "type": {
            "const": "field:value",
            "type": "string"
          }
        },
        "required": [
          "fieldId",
          "filter",
          "type"
        ],
        "title": "ItemSearchQueryFilterFieldValue",
        "type": "object"
      },
      "ItemSearchQueryFilterIntegrationDefined": {
        "properties": {
          "type": {
            "const": "integration:defined",
            "type": "string"
          }
        },
        "required": [
          "type"
        ],
        "title": "ItemSearchQueryFilterIntegrationDefined",
        "type": "object"
      },
      "ItemSearchQueryFilterIntegrationValue": {
        "properties": {
          "integrationId": {
            "format": "uuid",
            "type": "string"
          },
          "type": {
            "const": "integration:value",
            "type": "string"
          }
        },
        "required": [
          "integrationId",
          "type"
        ],
        "title": "ItemSearchQueryFilterIntegrationValue",
        "type": "object"
      },
      "ItemSearchQueryFilterItemWatchSelf": {
        "properties": {
          "type": {
            "const": "item:watchSelf",
            "type": "string"
          }
        },
        "required": [
          "type"
        ],
        "title": "ItemSearchQueryFilterItemWatchSelf",
        "type": "object"
      },
      "ItemSearchQueryFilterLastUpdatedAtAbsolute": {
        "properties": {
          "mode": {
            "$ref": "#/components/schemas/ItemSearchQueryTimeMode"
          },
          "property": {
            "$ref": "#/components/schemas/RefItemProperty"
          },
          "type": {
            "const": "lastUpdatedAt:absolute",
            "type": "string"
          },
          "value": {
            "$ref": "#/components/schemas/ItemSearchQueryDateTimeFilterValue"
          }
        },
        "required": [
          "mode",
          "value",
          "type"
        ],
        "title": "ItemSearchQueryFilterLastUpdatedAtAbsolute",
        "type": "object"
      },
      "ItemSearchQueryFilterLastUpdatedAtRange": {
        "properties": {
          "from": {
            "format": "date",
            "type": "string"
          },
          "property": {
            "$ref": "#/components/schemas/RefItemProperty"
          },
          "type": {
            "const": "lastUpdatedAt:range",
            "type": "string"
          },
          "until": {
            "format": "date",
            "type": "string"
          }
        },
        "required": [
          "from",
          "until",
          "type"
        ],
        "title": "ItemSearchQueryFilterLastUpdatedAtRange",
        "type": "object"
      },
      "ItemSearchQueryFilterLastUpdatedAtRelative": {
        "properties": {
          "anchor": {
            "$ref": "#/components/schemas/ItemSearchQueryTimeAnchor"
          },
          "property": {
            "$ref": "#/components/schemas/RefItemProperty"
          },
          "type": {
            "const": "lastUpdatedAt:relative",
            "type": "string"
          }
        },
        "required": [
          "anchor",
          "type"
        ],
        "title": "ItemSearchQueryFilterLastUpdatedAtRelative",
        "type": "object"
      },
      "ItemSearchQueryFilterNameContain": {
        "properties": {
          "caseSensitive": {
            "type": "boolean"
          },
          "text": {
            "type": "string"
          },
          "type": {
            "const": "name:contain",
            "type": "string"
          }
        },
        "required": [
          "text",
          "caseSensitive",
          "type"
        ],
        "title": "ItemSearchQueryFilterNameContain",
        "type": "object"
      },
      "ItemSearchQueryFilterNameEqual": {
        "properties": {
          "caseSensitive": {
            "type": "boolean"
          },
          "text": {
            "type": "string"
          },
          "type": {
            "const": "name:equal",
            "type": "string"
          }
        },
        "required": [
          "text",
          "caseSensitive",
          "type"
        ],
        "title": "ItemSearchQueryFilterNameEqual",
        "type": "object"
      },
      "ItemSearchQueryFilterNot": {
        "properties": {
          "inner": {
            "$ref": "#/components/schemas/ItemSearchQueryFilter"
          },
          "type": {
            "const": "not",
            "type": "string"
          }
        },
        "required": [
          "inner",
          "type"
        ],
        "title": "ItemSearchQueryFilterNot",
        "type": "object"
      },
      "ItemSearchQueryFilterOr": {
        "properties": {
          "inner": {
            "items": {
              "$ref": "#/components/schemas/ItemSearchQueryFilter"
            },
            "type": "array"
          },
          "type": {
            "const": "or",
            "type": "string"
          }
        },
        "required": [
          "inner",
          "type"
        ],
        "title": "ItemSearchQueryFilterOr",
        "type": "object"
      },
      "ItemSearchQueryFilterParentDefined": {
        "properties": {
          "type": {
            "const": "parent:defined",
            "type": "string"
          }
        },
        "required": [
          "type"
        ],
        "title": "ItemSearchQueryFilterParentDefined",
        "type": "object"
      },
      "ItemSearchQueryFilterParentValue": {
        "properties": {
          "itemId": {
            "format": "uuid",
            "type": "string"
          },
          "type": {
            "const": "parent:value",
            "type": "string"
          },
          "workspaceId": {
            "format": "uuid",
            "type": "string"
          }
        },
        "required": [
          "workspaceId",
          "itemId",
          "type"
        ],
        "title": "ItemSearchQueryFilterParentValue",
        "type": "object"
      },
      "ItemSearchQueryFilterStatusCategoryContainsAny": {
        "properties": {
          "categories": {
            "items": {
              "$ref": "#/components/schemas/StatusCategory"
            },
            "type": "array",
            "uniqueItems": true
          },
          "type": {
            "const": "statusCategory:containsAny",
            "type": "string"
          }
        },
        "required": [
          "categories",
          "type"
        ],
        "title": "ItemSearchQueryFilterStatusCategoryContainsAny",
        "type": "object"
      },
      "ItemSearchQueryFilterStatusCategoryUpdatedSince": {
        "properties": {
          "type": {
            "const": "statusCategory:updatedSince",
            "type": "string"
          },
          "value": {
            "$ref": "#/components/schemas/ItemSearchQueryTimeAnchor"
          }
        },
        "required": [
          "value",
          "type"
        ],
        "title": "ItemSearchQueryFilterStatusCategoryUpdatedSince",
        "type": "object"
      },
      "ItemSearchQueryFilterStatusContainsAny": {
        "properties": {
          "statusIds": {
            "items": {
              "format": "uuid",
              "type": "string"
            },
            "type": "array",
            "uniqueItems": true
          },
          "type": {
            "const": "status:containsAny",
            "type": "string"
          }
        },
        "required": [
          "statusIds",
          "type"
        ],
        "title": "ItemSearchQueryFilterStatusContainsAny",
        "type": "object"
      },
      "ItemSearchQueryFilterStatusUpdatedSince": {
        "properties": {
          "type": {
            "const": "status:updatedSince",
            "type": "string"
          },
          "value": {
            "$ref": "#/components/schemas/ItemSearchQueryTimeAnchor"
          }
        },
        "required": [
          "value",
          "type"
        ],
        "title": "ItemSearchQueryFilterStatusUpdatedSince",
        "type": "object"
      },
      "ItemSearchQueryFilterUpdatedSince": {
        "properties": {
          "property": {
            "$ref": "#/components/schemas/RefItemProperty"
          },
          "timestamp": {
            "format": "date-time",
            "type": "string"
          },
          "type": {
            "const": "updated:since",
            "type": "string"
          }
        },
        "required": [
          "timestamp",
          "type"
        ],
        "title": "ItemSearchQueryFilterUpdatedSince",
        "type": "object"
      },
      "ItemSearchQuerySort": {
        "discriminator": {
          "mapping": {
            "createdAt": "#/components/schemas/ItemSearchQuerySortCreatedAt",
            "field": "#/components/schemas/ItemSearchQuerySortField",
            "lastUpdatedAt": "#/components/schemas/ItemSearchQuerySortLastUpdatedAt",
            "name": "#/components/schemas/ItemSearchQuerySortName",
            "order": "#/components/schemas/ItemSearchQuerySortOrder",
            "status": "#/components/schemas/ItemSearchQuerySortStatus"
          },
          "propertyName": "type"
        },
        "oneOf": [
          {
            "$ref": "#/components/schemas/ItemSearchQuerySortCreatedAt"
          },
          {
            "$ref": "#/components/schemas/ItemSearchQuerySortField"
          },
          {
            "$ref": "#/components/schemas/ItemSearchQuerySortLastUpdatedAt"
          },
          {
            "$ref": "#/components/schemas/ItemSearchQuerySortName"
          },
          {
            "$ref": "#/components/schemas/ItemSearchQuerySortOrder"
          },
          {
            "$ref": "#/components/schemas/ItemSearchQuerySortStatus"
          }
        ],
        "title": "ItemSearchQuerySort"
      },
      "ItemSearchQuerySortCreatedAt": {
        "properties": {
          "direction": {
            "$ref": "#/components/schemas/ItemSearchQuerySortDirection"
          },
          "type": {
            "const": "createdAt",
            "type": "string"
          }
        },
        "required": [
          "direction",
          "type"
        ],
        "title": "ItemSearchQuerySortCreatedAt",
        "type": "object"
      },
      "ItemSearchQuerySortDirection": {
        "enum": [
          "asc",
          "desc"
        ],
        "title": "ItemSearchQuerySortDirection",
        "type": "string"
      },
      "ItemSearchQuerySortField": {
        "properties": {
          "direction": {
            "$ref": "#/components/schemas/ItemSearchQuerySortDirection"
          },
          "fieldId": {
            "format": "uuid",
            "type": "string"
          },
          "type": {
            "const": "field",
            "type": "string"
          }
        },
        "required": [
          "fieldId",
          "direction",
          "type"
        ],
        "title": "ItemSearchQuerySortField",
        "type": "object"
      },
      "ItemSearchQuerySortLastUpdatedAt": {
        "properties": {
          "direction": {
            "$ref": "#/components/schemas/ItemSearchQuerySortDirection"
          },
          "type": {
            "const": "lastUpdatedAt",
            "type": "string"
          }
        },
        "required": [
          "direction",
          "type"
        ],
        "title": "ItemSearchQuerySortLastUpdatedAt",
        "type": "object"
      },
      "ItemSearchQuerySortName": {
        "properties": {
          "direction": {
            "$ref": "#/components/schemas/ItemSearchQuerySortDirection"
          },
          "type": {
            "const": "name",
            "type": "string"
          }
        },
        "required": [
          "direction",
          "type"
        ],
        "title": "ItemSearchQuerySortName",
        "type": "object"
      },
      "ItemSearchQuerySortOrder": {
        "properties": {
          "direction": {
            "$ref": "#/components/schemas/ItemSearchQuerySortDirection"
          },
          "type": {
            "const": "order",
            "type": "string"
          }
        },
        "required": [
          "direction",
          "type"
        ],
        "title": "ItemSearchQuerySortOrder",
        "type": "object"
      },
      "ItemSearchQuerySortStatus": {
        "properties": {
          "direction": {
            "$ref": "#/components/schemas/ItemSearchQuerySortDirection"
          },
          "type": {
            "const": "status",
            "type": "string"
          }
        },
        "required": [
          "direction",
          "type"
        ],
        "title": "ItemSearchQuerySortStatus",
        "type": "object"
      },
      "ItemSearchQueryTimeAnchor": {
        "discriminator": {
          "mapping": {
            "days": "#/components/schemas/ItemSearchQueryTimeAnchorDays",
            "months": "#/components/schemas/ItemSearchQueryTimeAnchorMonths",
            "weeks": "#/components/schemas/ItemSearchQueryTimeAnchorWeeks"
          },
          "propertyName": "type"
        },
        "oneOf": [
          {
            "$ref": "#/components/schemas/ItemSearchQueryTimeAnchorDays"
          },
          {
            "$ref": "#/components/schemas/ItemSearchQueryTimeAnchorMonths"
          },
          {
            "$ref": "#/components/schemas/ItemSearchQueryTimeAnchorWeeks"
          }
        ],
        "title": "ItemSearchQueryTimeAnchor"
      },
      "ItemSearchQueryTimeAnchorDays": {
        "properties": {
          "count": {
            "format": "int32",
            "type": "integer"
          },
          "type": {
            "const": "days",
            "type": "string"
          }
        },
        "required": [
          "count",
          "type"
        ],
        "title": "ItemSearchQueryTimeAnchorDays",
        "type": "object"
      },
      "ItemSearchQueryTimeAnchorMonths": {
        "properties": {
          "count": {
            "format": "int32",
            "type": "integer"
          },
          "type": {
            "const": "months",
            "type": "string"
          }
        },
        "required": [
          "count",
          "type"
        ],
        "title": "ItemSearchQueryTimeAnchorMonths",
        "type": "object"
      },
      "ItemSearchQueryTimeAnchorWeeks": {
        "properties": {
          "count": {
            "format": "int32",
            "type": "integer"
          },
          "type": {
            "const": "weeks",
            "type": "string"
          }
        },
        "required": [
          "count",
          "type"
        ],
        "title": "ItemSearchQueryTimeAnchorWeeks",
        "type": "object"
      },
      "ItemSearchQueryTimeMode": {
        "enum": [
          "after",
          "afterOrOn",
          "before",
          "beforeOrOn"
        ],
        "title": "ItemSearchQueryTimeMode",
        "type": "string"
      },
      "ItemType": {
        "enum": [
          "bug",
          "epic",
          "experiment",
          "feature",
          "feedback",
          "idea",
          "initiative",
          "app:okr:objective",
          "opportunity",
          "product",
          "project",
          "story",
          "task"
        ],
        "title": "ItemType",
        "type": "string"
      },
      "ItemWithItemEmbed": {
        "properties": {
          "_embedded": {
            "$ref": "#/components/schemas/ItemEmbed"
          },
          "archived": {
            "description": "Whether this item is archived.",
            "type": "boolean"
          },
          "assigneeUserGroupIds": {
            "description": "Ids of user groups that are assigned to this item.",
            "items": {
              "format": "uuid",
              "type": "string"
            },
            "type": "array"
          },
          "assigneeUserIds": {
            "description": "Ids of users who are assigned to this item.",
            "items": {
              "format": "uuid",
              "type": "string"
            },
            "type": "array"
          },
          "color": {
            "$ref": "#/components/schemas/ItemColor",
            "description": "Color of this item."
          },
          "createdAt": {
            "description": "Timestamp of when this item was created.",
            "format": "date-time",
            "type": "string"
          },
          "description": {
            "$ref": "#/components/schemas/RichText",
            "description": "Rich text content as structured blocks. Different media types provide markdown support:\n• application/json - Default blocks format\n• application/vnd.airfocus.markdown+json - All RichText fields become markdown strings (recommended)\n• application/json+markdown - Legacy format, only top-level fields converted to markdown"
          },
          "fields": {
            "additionalProperties": {},
            "description": "Values of custom fields, where each key is a custom-field ID and each value is a JSON-formatted value of the corresponding field.",
            "examples": [
              {
                "0fc3cfbc-27e9-3ea6-8a78-7de13dae3e3c": {
                  "number": 42
                },
                "34f05b62-dd43-3e1e-82bc-b0acabd0d004": {
                  "boolean": true
                },
                "5396681e-ea50-3d63-9ae3-c9f8ca17b7d8": {
                  "userGroupIds": [
                    "70e2b87a-b774-3022-9ef0-e55031a1c4fb"
                  ],
                  "userIds": [
                    "24c9e15e-52af-347c-a25b-757e7bee1f9d"
                  ]
                },
                "75fe57ec-4a04-3a30-8cac-5f27223df81a": {
                  "dateRange": {
                    "endDate": "2024-02-14",
                    "startDate": "2024-01-14",
                    "timezone": "UTC"
                  }
                },
                "8be74552-df93-331b-bdd6-b36ed74bdb6a": {
                  "selection": [
                    "2bb225ce-b5ee-3493-967c-fde0d72da242"
                  ]
                },
                "c7824f3d-4d5f-3b2f-a2d0-34758c1e9454": {
                  "text": "A platform built for the new way of doing product management"
                },
                "e34d514f-7db5-38aa-872a-7c8191a09617": {
                  "date": {
                    "date": "2024-01-01",
                    "timezone": "UTC"
                  }
                }
              }
            ],
            "type": "object"
          },
          "id": {
            "description": "Unique identifier of this item.",
            "format": "uuid",
            "type": "string"
          },
          "lastUpdatedAt": {
            "description": "Timestamp of when this item was last updated.",
            "format": "date-time",
            "type": "string"
          },
          "name": {
            "description": "Name (title) of this item.",
            "type": "string"
          },
          "number": {
            "description": "A numeric id of this item, which is used to create an alias to this item like DEV-123. The number is unique within the workspace, and defined by server on item creation.",
            "format": "int32",
            "type": "integer"
          },
          "order": {
            "description": "A order number of this item for sorting.",
            "format": "int32",
            "type": "integer"
          },
          "statusCategoryUpdatedAt": {
            "description": "Timestamp of when the status of this item was last time switched from one category to another.",
            "format": "date-time",
            "type": "string"
          },
          "statusId": {
            "description": "Id of the status of this item.",
            "format": "uuid",
            "type": "string"
          },
          "statusUpdatedAt": {
            "description": "Timestamp of when the status of this item was last updated.",
            "format": "date-time",
            "type": "string"
          },
          "workspaceId": {
            "description": "Id of the workspace this workspace belongs to.",
            "format": "uuid",
            "type": "string"
          }
        },
        "required": [
          "id",
          "workspaceId",
          "statusId",
          "color",
          "name",
          "description",
          "assigneeUserIds",
          "assigneeUserGroupIds",
          "fields",
          "archived",
          "createdAt",
          "lastUpdatedAt",
          "order",
          "_embedded"
        ],
        "title": "ItemWithItemEmbed",
        "type": "object"
      },
      "ItemWithItemEmbedOrNullList": {
        "items": {
          "$ref": "#/components/schemas/ItemWithItemEmbed"
        },
        "title": "ItemWithItemEmbedOrNullList",
        "type": "array"
      },
      "ItemWithItemEmbedPage": {
        "properties": {
          "items": {
            "items": {
              "$ref": "#/components/schemas/ItemWithItemEmbed"
            },
            "type": "array"
          },
          "totalItems": {
            "format": "int32",
            "type": "integer"
          }
        },
        "required": [
          "items",
          "totalItems"
        ],
        "title": "ItemWithItemEmbedPage",
        "type": "object"
      },
      "ItemWithMDWithItemEmbed": {
        "description": "Item with Markdown string description.",
        "properties": {
          "_embedded": {
            "$ref": "#/components/schemas/ItemEmbed"
          },
          "archived": {
            "description": "Whether this item is archived.",
            "type": "boolean"
          },
          "assigneeUserGroupIds": {
            "description": "Ids of user groups that are assigned to this item.",
            "items": {
              "format": "uuid",
              "type": "string"
            },
            "type": "array"
          },
          "assigneeUserIds": {
            "description": "Ids of users who are assigned to this item.",
            "items": {
              "format": "uuid",
              "type": "string"
            },
            "type": "array"
          },
          "color": {
            "$ref": "#/components/schemas/ItemColor",
            "description": "Color of this item."
          },
          "createdAt": {
            "description": "Timestamp of when this item was created.",
            "format": "date-time",
            "type": "string"
          },
          "description": {
            "description": "Rich text content as a markdown string (used with markdown media types)",
            "examples": [
              "hello **world**!"
            ],
            "type": "string"
          },
          "fields": {
            "additionalProperties": {},
            "description": "Values of custom fields, where each key is a custom-field ID and each value is a JSON-formatted value of the corresponding field.",
            "examples": [
              {
                "0fc3cfbc-27e9-3ea6-8a78-7de13dae3e3c": {
                  "number": 42
                },
                "34f05b62-dd43-3e1e-82bc-b0acabd0d004": {
                  "boolean": true
                },
                "5396681e-ea50-3d63-9ae3-c9f8ca17b7d8": {
                  "userGroupIds": [
                    "70e2b87a-b774-3022-9ef0-e55031a1c4fb"
                  ],
                  "userIds": [
                    "24c9e15e-52af-347c-a25b-757e7bee1f9d"
                  ]
                },
                "75fe57ec-4a04-3a30-8cac-5f27223df81a": {
                  "dateRange": {
                    "endDate": "2024-02-14",
                    "startDate": "2024-01-14",
                    "timezone": "UTC"
                  }
                },
                "8be74552-df93-331b-bdd6-b36ed74bdb6a": {
                  "selection": [
                    "2bb225ce-b5ee-3493-967c-fde0d72da242"
                  ]
                },
                "c7824f3d-4d5f-3b2f-a2d0-34758c1e9454": {
                  "text": "A platform built for the new way of doing product management"
                },
                "e34d514f-7db5-38aa-872a-7c8191a09617": {
                  "date": {
                    "date": "2024-01-01",
                    "timezone": "UTC"
                  }
                }
              }
            ],
            "type": "object"
          },
          "id": {
            "description": "Unique identifier of this item.",
            "format": "uuid",
            "type": "string"
          },
          "lastUpdatedAt": {
            "description": "Timestamp of when this item was last updated.",
            "format": "date-time",
            "type": "string"
          },
          "name": {
            "description": "Name (title) of this item.",
            "type": "string"
          },
          "number": {
            "description": "A numeric id of this item, which is used to create an alias to this item like DEV-123. The number is unique within the workspace, and defined by server on item creation.",
            "format": "int32",
            "type": "integer"
          },
          "order": {
            "description": "A order number of this item for sorting.",
            "format": "int32",
            "type": "integer"
          },
          "statusCategoryUpdatedAt": {
            "description": "Timestamp of when the status of this item was last time switched from one category to another.",
            "format": "date-time",
            "type": "string"
          },
          "statusId": {
            "description": "Id of the status of this item.",
            "format": "uuid",
            "type": "string"
          },
          "statusUpdatedAt": {
            "description": "Timestamp of when the status of this item was last updated.",
            "format": "date-time",
            "type": "string"
          },
          "workspaceId": {
            "description": "Id of the workspace this workspace belongs to.",
            "format": "uuid",
            "type": "string"
          }
        },
        "required": [
          "id",
          "workspaceId",
          "statusId",
          "color",
          "name",
          "description",
          "assigneeUserIds",
          "assigneeUserGroupIds",
          "fields",
          "archived",
          "createdAt",
          "lastUpdatedAt",
          "order",
          "_embedded"
        ],
        "title": "ItemWithMDWithItemEmbed",
        "type": "object"
      },
      "ItemWithMDWithItemEmbedOrNullList": {
        "items": {
          "$ref": "#/components/schemas/ItemWithMDWithItemEmbed"
        },
        "title": "ItemWithMDWithItemEmbedOrNullList",
        "type": "array"
      },
      "ItemWithMDWithItemEmbedPage": {
        "properties": {
          "items": {
            "items": {
              "$ref": "#/components/schemas/ItemWithMDWithItemEmbed"
            },
            "type": "array"
          },
          "totalItems": {
            "format": "int32",
            "type": "integer"
          }
        },
        "required": [
          "items",
          "totalItems"
        ],
        "title": "ItemWithMDWithItemEmbedPage",
        "type": "object"
      },
      "JsObject": {
        "title": "JsObject",
        "type": "object"
      },
      "JsonPatch": {
        "description": "A JSON Patch document. See https://jsonpatch.com/ for more information.",
        "items": {
          "$ref": "#/components/schemas/JsonPatchOperation"
        },
        "title": "JsonPatch",
        "type": "array"
      },
      "JsonPatchAdd": {
        "properties": {
          "op": {
            "enum": [
              "add"
            ],
            "type": "string"
          },
          "path": {
            "type": "string"
          },
          "value": {}
        },
        "required": [
          "path",
          "value",
          "op"
        ],
        "title": "JsonPatchAdd",
        "type": "object"
      },
      "JsonPatchCopy": {
        "properties": {
          "from": {
            "type": "string"
          },
          "op": {
            "enum": [
              "copy"
            ],
            "type": "string"
          },
          "path": {
            "type": "string"
          }
        },
        "required": [
          "from",
          "path",
          "op"
        ],
        "title": "JsonPatchCopy",
        "type": "object"
      },
      "JsonPatchMove": {
        "properties": {
          "from": {
            "type": "string"
          },
          "op": {
            "enum": [
              "move"
            ],
            "type": "string"
          },
          "path": {
            "type": "string"
          }
        },
        "required": [
          "from",
          "path",
          "op"
        ],
        "title": "JsonPatchMove",
        "type": "object"
      },
      "JsonPatchOperation": {
        "discriminator": {
          "mapping": {
            "add": "#/components/schemas/JsonPatchAdd",
            "copy": "#/components/schemas/JsonPatchCopy",
            "move": "#/components/schemas/JsonPatchMove",
            "remove": "#/components/schemas/JsonPatchRemove",
            "replace": "#/components/schemas/JsonPatchReplace",
            "test": "#/components/schemas/JsonPatchTest"
          },
          "propertyName": "op"
        },
        "oneOf": [
          {
            "$ref": "#/components/schemas/JsonPatchAdd"
          },
          {
            "$ref": "#/components/schemas/JsonPatchCopy"
          },
          {
            "$ref": "#/components/schemas/JsonPatchMove"
          },
          {
            "$ref": "#/components/schemas/JsonPatchRemove"
          },
          {
            "$ref": "#/components/schemas/JsonPatchReplace"
          },
          {
            "$ref": "#/components/schemas/JsonPatchTest"
          }
        ],
        "title": "JsonPatchOperation"
      },
      "JsonPatchRemove": {
        "properties": {
          "old": {},
          "op": {
            "enum": [
              "remove"
            ],
            "type": "string"
          },
          "path": {
            "type": "string"
          }
        },
        "required": [
          "path",
          "op"
        ],
        "title": "JsonPatchRemove",
        "type": "object"
      },
      "JsonPatchReplace": {
        "properties": {
          "old": {},
          "op": {
            "enum": [
              "replace"
            ],
            "type": "string"
          },
          "path": {
            "type": "string"
          },
          "value": {}
        },
        "required": [
          "path",
          "value",
          "op"
        ],
        "title": "JsonPatchReplace",
        "type": "object"
      },
      "JsonPatchTest": {
        "properties": {
          "op": {
            "enum": [
              "test"
            ],
            "type": "string"
          },
          "path": {
            "type": "string"
          },
          "value": {}
        },
        "required": [
          "path",
          "value",
          "op"
        ],
        "title": "JsonPatchTest",
        "type": "object"
      },
      "KickUserRequest": {
        "properties": {
          "userId": {
            "format": "uuid",
            "type": "string"
          }
        },
        "required": [
          "userId"
        ],
        "title": "KickUserRequest",
        "type": "object"
      },
      "MappingDirection": {
        "description": "The direction in which mapped values are written.",
        "enum": [
          "both",
          "toInternalOnce",
          "toExternal",
          "toInternal"
        ],
        "title": "MappingDirection",
        "type": "string"
      },
      "MappingSettingsAirfocusMappingSettings": {
        "discriminator": {
          "mapping": {
            "simple": "#/components/schemas/MappingSettingsAirfocusMappingSettingsSimple",
            "withOptions": "#/components/schemas/MappingSettingsAirfocusMappingSettingsWithOptions"
          },
          "propertyName": "type"
        },
        "oneOf": [
          {
            "$ref": "#/components/schemas/MappingSettingsAirfocusMappingSettingsSimple"
          },
          {
            "$ref": "#/components/schemas/MappingSettingsAirfocusMappingSettingsWithOptions"
          }
        ],
        "title": "MappingSettingsAirfocusMappingSettings"
      },
      "MappingSettingsAirfocusMappingSettingsOptionPair": {
        "properties": {
          "externalId": {
            "type": "string"
          },
          "internalId": {
            "type": "string"
          }
        },
        "required": [
          "internalId",
          "externalId"
        ],
        "title": "MappingSettingsAirfocusMappingSettingsOptionPair",
        "type": "object"
      },
      "MappingSettingsAirfocusMappingSettingsSimple": {
        "properties": {
          "direction": {
            "$ref": "#/components/schemas/MappingDirection"
          },
          "externalId": {
            "$ref": "#/components/schemas/RefItemProperty"
          },
          "internalId": {
            "$ref": "#/components/schemas/RefItemProperty"
          },
          "type": {
            "const": "simple",
            "type": "string"
          }
        },
        "required": [
          "internalId",
          "externalId",
          "direction",
          "type"
        ],
        "title": "MappingSettingsAirfocusMappingSettingsSimple",
        "type": "object"
      },
      "MappingSettingsAirfocusMappingSettingsWithOptions": {
        "properties": {
          "direction": {
            "$ref": "#/components/schemas/MappingDirection"
          },
          "enableAutoCreateOptionsExternal": {
            "type": "boolean"
          },
          "enableAutoCreateOptionsInternal": {
            "type": "boolean"
          },
          "enableAutoMapping": {
            "type": "boolean"
          },
          "externalId": {
            "$ref": "#/components/schemas/RefItemProperty"
          },
          "internalId": {
            "$ref": "#/components/schemas/RefItemProperty"
          },
          "pairs": {
            "items": {
              "$ref": "#/components/schemas/MappingSettingsAirfocusMappingSettingsOptionPair"
            },
            "type": "array"
          },
          "type": {
            "const": "withOptions",
            "type": "string"
          }
        },
        "required": [
          "internalId",
          "externalId",
          "direction",
          "pairs",
          "enableAutoMapping",
          "enableAutoCreateOptionsInternal",
          "enableAutoCreateOptionsExternal",
          "type"
        ],
        "title": "MappingSettingsAirfocusMappingSettingsWithOptions",
        "type": "object"
      },
      "MilestoneBulkAction": {
        "discriminator": {
          "mapping": {
            "create": "#/components/schemas/MilestoneBulkCreate",
            "delete": "#/components/schemas/MilestoneBulkDelete",
            "patch": "#/components/schemas/MilestoneBulkPatch",
            "update": "#/components/schemas/MilestoneBulkUpdate"
          },
          "propertyName": "type"
        },
        "oneOf": [
          {
            "$ref": "#/components/schemas/MilestoneBulkCreate"
          },
          {
            "$ref": "#/components/schemas/MilestoneBulkDelete"
          },
          {
            "$ref": "#/components/schemas/MilestoneBulkPatch"
          },
          {
            "$ref": "#/components/schemas/MilestoneBulkUpdate"
          }
        ],
        "title": "MilestoneBulkAction"
      },
      "MilestoneBulkCreate": {
        "properties": {
          "resource": {
            "$ref": "#/components/schemas/CreateMilestoneRequest"
          },
          "type": {
            "enum": [
              "create"
            ],
            "type": "string"
          }
        },
        "required": [
          "resource",
          "type"
        ],
        "title": "MilestoneBulkCreate",
        "type": "object"
      },
      "MilestoneBulkDelete": {
        "properties": {
          "id": {
            "format": "uuid",
            "type": "string"
          },
          "type": {
            "enum": [
              "delete"
            ],
            "type": "string"
          }
        },
        "required": [
          "id",
          "type"
        ],
        "title": "MilestoneBulkDelete",
        "type": "object"
      },
      "MilestoneBulkPatch": {
        "properties": {
          "id": {
            "format": "uuid",
            "type": "string"
          },
          "transform": {
            "$ref": "#/components/schemas/JsonPatch"
          },
          "type": {
            "enum": [
              "patch"
            ],
            "type": "string"
          }
        },
        "required": [
          "id",
          "transform",
          "type"
        ],
        "title": "MilestoneBulkPatch",
        "type": "object"
      },
      "MilestoneBulkUpdate": {
        "properties": {
          "id": {
            "format": "uuid",
            "type": "string"
          },
          "resource": {
            "$ref": "#/components/schemas/UpdateMilestoneRequest"
          },
          "type": {
            "enum": [
              "update"
            ],
            "type": "string"
          }
        },
        "required": [
          "id",
          "resource",
          "type"
        ],
        "title": "MilestoneBulkUpdate",
        "type": "object"
      },
      "MilestoneWithEmbed": {
        "properties": {
          "_embedded": {
            "type": "object"
          },
          "createdAt": {
            "format": "date-time",
            "type": "string"
          },
          "date": {
            "format": "date",
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "id": {
            "format": "uuid",
            "type": "string"
          },
          "lastUpdatedAt": {
            "format": "date-time",
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "timezone": {
            "type": "string"
          },
          "workspaceId": {
            "format": "uuid",
            "type": "string"
          }
        },
        "required": [
          "id",
          "workspaceId",
          "name",
          "description",
          "date",
          "createdAt",
          "lastUpdatedAt",
          "_embedded"
        ],
        "title": "MilestoneWithEmbed",
        "type": "object"
      },
      "MilestoneWithEmbedOrNullList": {
        "items": {
          "$ref": "#/components/schemas/MilestoneWithEmbed"
        },
        "title": "MilestoneWithEmbedOrNullList",
        "type": "array"
      },
      "MilestoneWithEmbedPage": {
        "properties": {
          "items": {
            "items": {
              "$ref": "#/components/schemas/MilestoneWithEmbed"
            },
            "type": "array"
          },
          "totalItems": {
            "format": "int32",
            "type": "integer"
          }
        },
        "required": [
          "items",
          "totalItems"
        ],
        "title": "MilestoneWithEmbedPage",
        "type": "object"
      },
      "MirrorApp": {
        "properties": {
          "id": {
            "format": "uuid",
            "type": "string"
          },
          "settings": {
            "$ref": "#/components/schemas/MirrorAppTypeSettings"
          },
          "teamId": {
            "format": "uuid",
            "type": "string"
          },
          "typeId": {
            "const": "mirror",
            "type": "string"
          }
        },
        "required": [
          "id",
          "teamId",
          "typeId",
          "settings"
        ],
        "title": "MirrorApp",
        "type": "object"
      },
      "MirrorAppTypeSettings": {
        "properties": {
          "mirrorFieldId": {
            "format": "uuid",
            "type": "string"
          },
          "prioritizationFieldId": {
            "format": "uuid",
            "type": "string"
          },
          "sources": {
            "items": {
              "$ref": "#/components/schemas/MirrorAppTypeSettingsSource"
            },
            "type": "array"
          },
          "workspaceId": {
            "format": "uuid",
            "type": "string"
          }
        },
        "required": [
          "workspaceId",
          "mirrorFieldId",
          "sources"
        ],
        "title": "MirrorAppTypeSettings",
        "type": "object"
      },
      "MirrorAppTypeSettingsSource": {
        "properties": {
          "filter": {
            "$ref": "#/components/schemas/ItemSearchQueryFilter"
          },
          "mapping": {
            "items": {
              "$ref": "#/components/schemas/MappingSettingsAirfocusMappingSettings"
            },
            "type": "array"
          },
          "mirrorFieldId": {
            "format": "uuid",
            "type": "string"
          },
          "prioritizationFieldId": {
            "format": "uuid",
            "type": "string"
          },
          "workspaceId": {
            "format": "uuid",
            "type": "string"
          }
        },
        "required": [
          "workspaceId",
          "mirrorFieldId",
          "mapping"
        ],
        "title": "MirrorAppTypeSettingsSource",
        "type": "object"
      },
      "MirrorSourceFieldWithFieldEmbed": {
        "properties": {
          "_embedded": {
            "$ref": "#/components/schemas/FieldEmbed"
          },
          "createdAt": {
            "format": "date-time",
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "id": {
            "format": "uuid",
            "type": "string"
          },
          "isTeamField": {
            "type": "boolean"
          },
          "name": {
            "type": "string"
          },
          "required": {
            "type": "boolean"
          },
          "teamId": {
            "format": "uuid",
            "type": "string"
          },
          "typeId": {
            "const": "mirror-source",
            "type": "string"
          }
        },
        "required": [
          "id",
          "typeId",
          "name",
          "description",
          "isTeamField",
          "teamId",
          "createdAt",
          "required",
          "_embedded"
        ],
        "title": "MirrorSourceFieldWithFieldEmbed",
        "type": "object"
      },
      "MirrorTargetFieldWithFieldEmbed": {
        "properties": {
          "_embedded": {
            "$ref": "#/components/schemas/FieldEmbed"
          },
          "createdAt": {
            "format": "date-time",
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "id": {
            "format": "uuid",
            "type": "string"
          },
          "isTeamField": {
            "type": "boolean"
          },
          "name": {
            "type": "string"
          },
          "required": {
            "type": "boolean"
          },
          "teamId": {
            "format": "uuid",
            "type": "string"
          },
          "typeId": {
            "const": "mirror-target",
            "type": "string"
          }
        },
        "required": [
          "id",
          "typeId",
          "name",
          "description",
          "isTeamField",
          "teamId",
          "createdAt",
          "required",
          "_embedded"
        ],
        "title": "MirrorTargetFieldWithFieldEmbed",
        "type": "object"
      },
      "NumberFieldTypeSettings": {
        "properties": {
          "maximum": {
            "type": "number"
          },
          "minimum": {
            "type": "number"
          },
          "overflow": {
            "type": "boolean"
          },
          "stepping": {
            "$ref": "#/components/schemas/NumberFieldTypeSettingsStepping"
          },
          "unit": {
            "$ref": "#/components/schemas/NumberFieldTypeSettingsUnit"
          }
        },
        "required": [
          "overflow"
        ],
        "title": "NumberFieldTypeSettings",
        "type": "object"
      },
      "NumberFieldTypeSettingsStepping": {
        "discriminator": {
          "mapping": {
            "equal": "#/components/schemas/NumberFieldTypeSettingsSteppingEqual",
            "exponential": "#/components/schemas/NumberFieldTypeSettingsSteppingExponential",
            "fibonacci": "#/components/schemas/NumberFieldTypeSettingsSteppingFibonacci"
          },
          "propertyName": "type"
        },
        "oneOf": [
          {
            "$ref": "#/components/schemas/NumberFieldTypeSettingsSteppingEqual"
          },
          {
            "$ref": "#/components/schemas/NumberFieldTypeSettingsSteppingExponential"
          },
          {
            "$ref": "#/components/schemas/NumberFieldTypeSettingsSteppingFibonacci"
          }
        ],
        "title": "NumberFieldTypeSettingsStepping"
      },
      "NumberFieldTypeSettingsSteppingEqual": {
        "properties": {
          "delta": {
            "type": "number"
          },
          "type": {
            "const": "equal",
            "type": "string"
          }
        },
        "required": [
          "delta",
          "type"
        ],
        "title": "NumberFieldTypeSettingsSteppingEqual",
        "type": "object"
      },
      "NumberFieldTypeSettingsSteppingExponential": {
        "properties": {
          "factor": {
            "type": "number"
          },
          "type": {
            "const": "exponential",
            "type": "string"
          }
        },
        "required": [
          "factor",
          "type"
        ],
        "title": "NumberFieldTypeSettingsSteppingExponential",
        "type": "object"
      },
      "NumberFieldTypeSettingsSteppingFibonacci": {
        "properties": {
          "type": {
            "const": "fibonacci",
            "type": "string"
          }
        },
        "required": [
          "type"
        ],
        "title": "NumberFieldTypeSettingsSteppingFibonacci",
        "type": "object"
      },
      "NumberFieldTypeSettingsUnit": {
        "discriminator": {
          "mapping": {
            "custom": "#/components/schemas/NumberFieldTypeSettingsUnitCustom",
            "money": "#/components/schemas/NumberFieldTypeSettingsUnitMoney",
            "percent": "#/components/schemas/NumberFieldTypeSettingsUnitPercent",
            "storyPoints": "#/components/schemas/NumberFieldTypeSettingsUnitStoryPoints"
          },
          "propertyName": "type"
        },
        "oneOf": [
          {
            "$ref": "#/components/schemas/NumberFieldTypeSettingsUnitCustom"
          },
          {
            "$ref": "#/components/schemas/NumberFieldTypeSettingsUnitMoney"
          },
          {
            "$ref": "#/components/schemas/NumberFieldTypeSettingsUnitPercent"
          },
          {
            "$ref": "#/components/schemas/NumberFieldTypeSettingsUnitStoryPoints"
          }
        ],
        "title": "NumberFieldTypeSettingsUnit"
      },
      "NumberFieldTypeSettingsUnitCustom": {
        "properties": {
          "prefix": {
            "type": "string"
          },
          "suffix": {
            "type": "string"
          },
          "type": {
            "const": "custom",
            "type": "string"
          }
        },
        "required": [
          "prefix",
          "suffix",
          "type"
        ],
        "title": "NumberFieldTypeSettingsUnitCustom",
        "type": "object"
      },
      "NumberFieldTypeSettingsUnitMoney": {
        "properties": {
          "currency": {
            "type": "string"
          },
          "type": {
            "const": "money",
            "type": "string"
          }
        },
        "required": [
          "currency",
          "type"
        ],
        "title": "NumberFieldTypeSettingsUnitMoney",
        "type": "object"
      },
      "NumberFieldTypeSettingsUnitPercent": {
        "properties": {
          "type": {
            "const": "percent",
            "type": "string"
          }
        },
        "required": [
          "type"
        ],
        "title": "NumberFieldTypeSettingsUnitPercent",
        "type": "object"
      },
      "NumberFieldTypeSettingsUnitStoryPoints": {
        "properties": {
          "type": {
            "const": "storyPoints",
            "type": "string"
          }
        },
        "required": [
          "type"
        ],
        "title": "NumberFieldTypeSettingsUnitStoryPoints",
        "type": "object"
      },
      "NumberFieldWithFieldEmbed": {
        "properties": {
          "_embedded": {
            "$ref": "#/components/schemas/FieldEmbed"
          },
          "createdAt": {
            "format": "date-time",
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "id": {
            "format": "uuid",
            "type": "string"
          },
          "isTeamField": {
            "type": "boolean"
          },
          "name": {
            "type": "string"
          },
          "required": {
            "type": "boolean"
          },
          "settings": {
            "$ref": "#/components/schemas/NumberFieldTypeSettings"
          },
          "teamId": {
            "format": "uuid",
            "type": "string"
          },
          "typeId": {
            "const": "number",
            "type": "string"
          }
        },
        "required": [
          "id",
          "typeId",
          "settings",
          "name",
          "description",
          "isTeamField",
          "teamId",
          "createdAt",
          "required",
          "_embedded"
        ],
        "title": "NumberFieldWithFieldEmbed",
        "type": "object"
      },
      "OkrApp": {
        "properties": {
          "id": {
            "format": "uuid",
            "type": "string"
          },
          "settings": {
            "$ref": "#/components/schemas/OkrAppTypeSettings"
          },
          "teamId": {
            "format": "uuid",
            "type": "string"
          },
          "typeId": {
            "const": "okr",
            "type": "string"
          }
        },
        "required": [
          "id",
          "teamId",
          "typeId",
          "settings"
        ],
        "title": "OkrApp",
        "type": "object"
      },
      "OkrAppTypeSettings": {
        "properties": {
          "confidence": {
            "$ref": "#/components/schemas/OkrConfidenceFieldSettings"
          },
          "hierarchy": {
            "$ref": "#/components/schemas/OkrAppTypeSettingsHierarchyNode"
          },
          "linkedWorkspaces": {
            "additionalProperties": {
              "$ref": "#/components/schemas/OkrAppTypeSettingsLinkedWorkspaceSettings"
            },
            "type": "object"
          },
          "objectiveWorkspaces": {
            "additionalProperties": {
              "$ref": "#/components/schemas/OkrAppTypeSettingsObjectiveWorkspaceSettings"
            },
            "type": "object"
          },
          "timePeriods": {
            "$ref": "#/components/schemas/OkrTimePeriodFieldSettings"
          }
        },
        "required": [
          "objectiveWorkspaces",
          "linkedWorkspaces",
          "timePeriods",
          "confidence"
        ],
        "title": "OkrAppTypeSettings",
        "type": "object"
      },
      "OkrAppTypeSettingsHierarchyNode": {
        "properties": {
          "children": {
            "items": {
              "$ref": "#/components/schemas/OkrAppTypeSettingsHierarchyNode"
            },
            "type": "array"
          },
          "workspaceId": {
            "format": "uuid",
            "type": "string"
          }
        },
        "required": [
          "workspaceId",
          "children"
        ],
        "title": "OkrAppTypeSettingsHierarchyNode",
        "type": "object"
      },
      "OkrAppTypeSettingsLinkedWorkspaceSettings": {
        "properties": {
          "keyResultReferenceFieldId": {
            "format": "uuid",
            "type": "string"
          },
          "workspaceId": {
            "format": "uuid",
            "type": "string"
          }
        },
        "required": [
          "workspaceId",
          "keyResultReferenceFieldId"
        ],
        "title": "OkrAppTypeSettingsLinkedWorkspaceSettings",
        "type": "object"
      },
      "OkrAppTypeSettingsObjectiveWorkspaceSettings": {
        "properties": {
          "checkinsFieldId": {
            "format": "uuid",
            "type": "string"
          },
          "confidenceFieldId": {
            "format": "uuid",
            "type": "string"
          },
          "keyResultsFieldId": {
            "format": "uuid",
            "type": "string"
          },
          "linkedWorkspaceIds": {
            "items": {
              "format": "uuid",
              "type": "string"
            },
            "type": "array"
          },
          "progressFieldId": {
            "format": "uuid",
            "type": "string"
          },
          "timePeriodFieldId": {
            "format": "uuid",
            "type": "string"
          },
          "workspaceId": {
            "format": "uuid",
            "type": "string"
          }
        },
        "required": [
          "workspaceId",
          "linkedWorkspaceIds",
          "checkinsFieldId",
          "confidenceFieldId",
          "keyResultsFieldId",
          "progressFieldId",
          "timePeriodFieldId"
        ],
        "title": "OkrAppTypeSettingsObjectiveWorkspaceSettings",
        "type": "object"
      },
      "OkrCheckinsFieldWithFieldEmbed": {
        "properties": {
          "_embedded": {
            "$ref": "#/components/schemas/FieldEmbed"
          },
          "createdAt": {
            "format": "date-time",
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "id": {
            "format": "uuid",
            "type": "string"
          },
          "isTeamField": {
            "type": "boolean"
          },
          "name": {
            "type": "string"
          },
          "required": {
            "type": "boolean"
          },
          "teamId": {
            "format": "uuid",
            "type": "string"
          },
          "typeId": {
            "const": "okr-checkins",
            "type": "string"
          }
        },
        "required": [
          "id",
          "typeId",
          "name",
          "description",
          "isTeamField",
          "teamId",
          "createdAt",
          "required",
          "_embedded"
        ],
        "title": "OkrCheckinsFieldWithFieldEmbed",
        "type": "object"
      },
      "OkrConfidenceFieldSettings": {
        "properties": {
          "low": {
            "format": "int32",
            "type": "integer"
          },
          "medium": {
            "format": "int32",
            "type": "integer"
          }
        },
        "required": [
          "low",
          "medium"
        ],
        "title": "OkrConfidenceFieldSettings",
        "type": "object"
      },
      "OkrConfidenceFieldWithFieldEmbed": {
        "properties": {
          "_embedded": {
            "$ref": "#/components/schemas/FieldEmbed"
          },
          "createdAt": {
            "format": "date-time",
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "id": {
            "format": "uuid",
            "type": "string"
          },
          "isTeamField": {
            "type": "boolean"
          },
          "name": {
            "type": "string"
          },
          "required": {
            "type": "boolean"
          },
          "settings": {
            "$ref": "#/components/schemas/OkrConfidenceFieldSettings"
          },
          "teamId": {
            "format": "uuid",
            "type": "string"
          },
          "typeId": {
            "const": "okr-confidence",
            "type": "string"
          }
        },
        "required": [
          "id",
          "typeId",
          "settings",
          "name",
          "description",
          "isTeamField",
          "teamId",
          "createdAt",
          "required",
          "_embedded"
        ],
        "title": "OkrConfidenceFieldWithFieldEmbed",
        "type": "object"
      },
      "OkrKeyResultReferenceFieldWithFieldEmbed": {
        "properties": {
          "_embedded": {
            "$ref": "#/components/schemas/FieldEmbed"
          },
          "createdAt": {
            "format": "date-time",
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "id": {
            "format": "uuid",
            "type": "string"
          },
          "isTeamField": {
            "type": "boolean"
          },
          "name": {
            "type": "string"
          },
          "required": {
            "type": "boolean"
          },
          "teamId": {
            "format": "uuid",
            "type": "string"
          },
          "typeId": {
            "const": "okr-key-result-reference",
            "type": "string"
          }
        },
        "required": [
          "id",
          "typeId",
          "name",
          "description",
          "isTeamField",
          "teamId",
          "createdAt",
          "required",
          "_embedded"
        ],
        "title": "OkrKeyResultReferenceFieldWithFieldEmbed",
        "type": "object"
      },
      "OkrKeyResultsFieldWithFieldEmbed": {
        "properties": {
          "_embedded": {
            "$ref": "#/components/schemas/FieldEmbed"
          },
          "createdAt": {
            "format": "date-time",
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "id": {
            "format": "uuid",
            "type": "string"
          },
          "isTeamField": {
            "type": "boolean"
          },
          "name": {
            "type": "string"
          },
          "required": {
            "type": "boolean"
          },
          "teamId": {
            "format": "uuid",
            "type": "string"
          },
          "typeId": {
            "const": "okr-key-results",
            "type": "string"
          }
        },
        "required": [
          "id",
          "typeId",
          "name",
          "description",
          "isTeamField",
          "teamId",
          "createdAt",
          "required",
          "_embedded"
        ],
        "title": "OkrKeyResultsFieldWithFieldEmbed",
        "type": "object"
      },
      "OkrProgressFieldWithFieldEmbed": {
        "properties": {
          "_embedded": {
            "$ref": "#/components/schemas/FieldEmbed"
          },
          "createdAt": {
            "format": "date-time",
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "id": {
            "format": "uuid",
            "type": "string"
          },
          "isTeamField": {
            "type": "boolean"
          },
          "name": {
            "type": "string"
          },
          "required": {
            "type": "boolean"
          },
          "teamId": {
            "format": "uuid",
            "type": "string"
          },
          "typeId": {
            "const": "okr-progress",
            "type": "string"
          }
        },
        "required": [
          "id",
          "typeId",
          "name",
          "description",
          "isTeamField",
          "teamId",
          "createdAt",
          "required",
          "_embedded"
        ],
        "title": "OkrProgressFieldWithFieldEmbed",
        "type": "object"
      },
      "OkrTimePeriodFieldSettings": {
        "properties": {
          "timePeriods": {
            "items": {
              "$ref": "#/components/schemas/TimePeriod"
            },
            "type": "array"
          }
        },
        "required": [
          "timePeriods"
        ],
        "title": "OkrTimePeriodFieldSettings",
        "type": "object"
      },
      "OkrTimePeriodFieldWithFieldEmbed": {
        "properties": {
          "_embedded": {
            "$ref": "#/components/schemas/FieldEmbed"
          },
          "createdAt": {
            "format": "date-time",
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "id": {
            "format": "uuid",
            "type": "string"
          },
          "isTeamField": {
            "type": "boolean"
          },
          "name": {
            "type": "string"
          },
          "required": {
            "type": "boolean"
          },
          "settings": {
            "$ref": "#/components/schemas/OkrTimePeriodFieldSettings"
          },
          "teamId": {
            "format": "uuid",
            "type": "string"
          },
          "typeId": {
            "const": "okr-time-period",
            "type": "string"
          }
        },
        "required": [
          "id",
          "typeId",
          "settings",
          "name",
          "description",
          "isTeamField",
          "teamId",
          "createdAt",
          "required",
          "_embedded"
        ],
        "title": "OkrTimePeriodFieldWithFieldEmbed",
        "type": "object"
      },
      "PeopleFieldTypeSettings": {
        "properties": {
          "autoAssign": {
            "type": "boolean"
          }
        },
        "required": [
          "autoAssign"
        ],
        "title": "PeopleFieldTypeSettings",
        "type": "object"
      },
      "PeopleFieldWithFieldEmbed": {
        "properties": {
          "_embedded": {
            "$ref": "#/components/schemas/FieldEmbed"
          },
          "createdAt": {
            "format": "date-time",
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "id": {
            "format": "uuid",
            "type": "string"
          },
          "isTeamField": {
            "type": "boolean"
          },
          "name": {
            "type": "string"
          },
          "required": {
            "type": "boolean"
          },
          "settings": {
            "$ref": "#/components/schemas/PeopleFieldTypeSettings"
          },
          "teamId": {
            "format": "uuid",
            "type": "string"
          },
          "typeId": {
            "const": "people",
            "type": "string"
          }
        },
        "required": [
          "id",
          "typeId",
          "settings",
          "name",
          "description",
          "isTeamField",
          "teamId",
          "createdAt",
          "required",
          "_embedded"
        ],
        "title": "PeopleFieldWithFieldEmbed",
        "type": "object"
      },
      "Permission": {
        "enum": [
          "comment",
          "full",
          "read",
          "write"
        ],
        "title": "Permission",
        "type": "string"
      },
      "PortalApp": {
        "properties": {
          "id": {
            "format": "uuid",
            "type": "string"
          },
          "settings": {
            "$ref": "#/components/schemas/PortalAppTypeSettings"
          },
          "teamId": {
            "format": "uuid",
            "type": "string"
          },
          "typeId": {
            "const": "portal",
            "type": "string"
          }
        },
        "required": [
          "id",
          "teamId",
          "typeId",
          "settings"
        ],
        "title": "PortalApp",
        "type": "object"
      },
      "PortalAppTypeSettings": {
        "properties": {
          "color": {
            "type": "string"
          },
          "faviconImageId": {
            "type": "string"
          },
          "logoImageId": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "ownerUserId": {
            "format": "uuid",
            "type": "string"
          },
          "pages": {
            "items": {
              "$ref": "#/components/schemas/PortalAppTypeSettingsPortalPage"
            },
            "type": "array"
          },
          "password": {
            "type": "string"
          },
          "public": {
            "type": "boolean"
          },
          "requireLogin": {
            "type": "boolean"
          },
          "slug": {
            "type": "string"
          }
        },
        "required": [
          "public",
          "name",
          "slug",
          "ownerUserId",
          "pages",
          "requireLogin"
        ],
        "title": "PortalAppTypeSettings",
        "type": "object"
      },
      "PortalAppTypeSettingsPortalPage": {
        "discriminator": {
          "mapping": {
            "url": "#/components/schemas/PortalAppTypeSettingsPortalPageUrlPage",
            "workspace": "#/components/schemas/PortalAppTypeSettingsPortalPageWorkspacePage"
          },
          "propertyName": "type"
        },
        "oneOf": [
          {
            "$ref": "#/components/schemas/PortalAppTypeSettingsPortalPageUrlPage"
          },
          {
            "$ref": "#/components/schemas/PortalAppTypeSettingsPortalPageWorkspacePage"
          }
        ],
        "title": "PortalAppTypeSettingsPortalPage"
      },
      "PortalAppTypeSettingsPortalPageUrlPage": {
        "properties": {
          "public": {
            "type": "boolean"
          },
          "title": {
            "type": "string"
          },
          "type": {
            "const": "url",
            "type": "string"
          },
          "url": {
            "type": "string"
          }
        },
        "required": [
          "title",
          "url",
          "public",
          "type"
        ],
        "title": "PortalAppTypeSettingsPortalPageUrlPage",
        "type": "object"
      },
      "PortalAppTypeSettingsPortalPageWorkspacePage": {
        "properties": {
          "fieldIds": {
            "items": {
              "format": "uuid",
              "type": "string"
            },
            "type": "array",
            "uniqueItems": true
          },
          "heroDescription": {
            "type": "string"
          },
          "heroTitle": {
            "type": "string"
          },
          "metaDescription": {
            "type": "string"
          },
          "metaTitle": {
            "type": "string"
          },
          "portalFieldId": {
            "format": "uuid",
            "type": "string"
          },
          "public": {
            "type": "boolean"
          },
          "searchIndex": {
            "type": "boolean"
          },
          "slug": {
            "type": "string"
          },
          "title": {
            "type": "string"
          },
          "type": {
            "const": "workspace",
            "type": "string"
          },
          "view": {
            "$ref": "#/components/schemas/PortalAppTypeSettingsPortalView"
          },
          "workspaceId": {
            "format": "uuid",
            "type": "string"
          }
        },
        "required": [
          "slug",
          "title",
          "workspaceId",
          "view",
          "public",
          "portalFieldId",
          "fieldIds",
          "searchIndex",
          "type"
        ],
        "title": "PortalAppTypeSettingsPortalPageWorkspacePage",
        "type": "object"
      },
      "PortalAppTypeSettingsPortalView": {
        "discriminator": {
          "mapping": {
            "grid": "#/components/schemas/PortalAppTypeSettingsPortalViewGridView"
          },
          "propertyName": "type"
        },
        "oneOf": [
          {
            "$ref": "#/components/schemas/PortalAppTypeSettingsPortalViewGridView"
          }
        ],
        "title": "PortalAppTypeSettingsPortalView"
      },
      "PortalAppTypeSettingsPortalViewGridView": {
        "properties": {
          "publicFields": {
            "default": [],
            "items": {
              "$ref": "#/components/schemas/PortalAppTypeSettingsPortalViewPortalField"
            },
            "type": "array",
            "uniqueItems": true
          },
          "showFilters": {
            "type": "boolean"
          },
          "swimlaneMode": {
            "$ref": "#/components/schemas/SwimlaneMode"
          },
          "tabMode": {
            "$ref": "#/components/schemas/SwimlaneMode"
          },
          "type": {
            "const": "grid",
            "type": "string"
          }
        },
        "required": [
          "type"
        ],
        "title": "PortalAppTypeSettingsPortalViewGridView",
        "type": "object"
      },
      "PortalAppTypeSettingsPortalViewPortalField": {
        "discriminator": {
          "mapping": {
            "field": "#/components/schemas/PortalAppTypeSettingsPortalViewPortalFieldField",
            "status": "#/components/schemas/PortalAppTypeSettingsPortalViewPortalFieldStatus",
            "statusCategory": "#/components/schemas/PortalAppTypeSettingsPortalViewPortalFieldStatusCategory"
          },
          "propertyName": "type"
        },
        "oneOf": [
          {
            "$ref": "#/components/schemas/PortalAppTypeSettingsPortalViewPortalFieldField"
          },
          {
            "$ref": "#/components/schemas/PortalAppTypeSettingsPortalViewPortalFieldStatus"
          },
          {
            "$ref": "#/components/schemas/PortalAppTypeSettingsPortalViewPortalFieldStatusCategory"
          }
        ],
        "title": "PortalAppTypeSettingsPortalViewPortalField"
      },
      "PortalAppTypeSettingsPortalViewPortalFieldField": {
        "properties": {
          "fieldId": {
            "format": "uuid",
            "type": "string"
          },
          "type": {
            "const": "field",
            "type": "string"
          }
        },
        "required": [
          "fieldId",
          "type"
        ],
        "title": "PortalAppTypeSettingsPortalViewPortalFieldField",
        "type": "object"
      },
      "PortalAppTypeSettingsPortalViewPortalFieldStatus": {
        "properties": {
          "type": {
            "const": "status",
            "type": "string"
          }
        },
        "required": [
          "type"
        ],
        "title": "PortalAppTypeSettingsPortalViewPortalFieldStatus",
        "type": "object"
      },
      "PortalAppTypeSettingsPortalViewPortalFieldStatusCategory": {
        "properties": {
          "type": {
            "const": "statusCategory",
            "type": "string"
          }
        },
        "required": [
          "type"
        ],
        "title": "PortalAppTypeSettingsPortalViewPortalFieldStatusCategory",
        "type": "object"
      },
      "PortalFieldWithFieldEmbed": {
        "properties": {
          "_embedded": {
            "$ref": "#/components/schemas/FieldEmbed"
          },
          "createdAt": {
            "format": "date-time",
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "id": {
            "format": "uuid",
            "type": "string"
          },
          "isTeamField": {
            "type": "boolean"
          },
          "name": {
            "type": "string"
          },
          "required": {
            "type": "boolean"
          },
          "teamId": {
            "format": "uuid",
            "type": "string"
          },
          "typeId": {
            "const": "portal",
            "type": "string"
          }
        },
        "required": [
          "id",
          "typeId",
          "name",
          "description",
          "isTeamField",
          "teamId",
          "createdAt",
          "required",
          "_embedded"
        ],
        "title": "PortalFieldWithFieldEmbed",
        "type": "object"
      },
      "PortfolioApp": {
        "properties": {
          "id": {
            "format": "uuid",
            "type": "string"
          },
          "settings": {
            "$ref": "#/components/schemas/PortfolioAppSettings"
          },
          "teamId": {
            "format": "uuid",
            "type": "string"
          },
          "typeId": {
            "const": "portfolio",
            "type": "string"
          }
        },
        "required": [
          "id",
          "teamId",
          "typeId",
          "settings"
        ],
        "title": "PortfolioApp",
        "type": "object"
      },
      "PortfolioAppSettings": {
        "properties": {
          "sources": {
            "items": {
              "$ref": "#/components/schemas/PortfolioAppSourceSettings"
            },
            "type": "array"
          },
          "targetFieldId": {
            "format": "uuid",
            "type": "string"
          },
          "workspaceId": {
            "format": "uuid",
            "type": "string"
          }
        },
        "required": [
          "workspaceId",
          "targetFieldId",
          "sources"
        ],
        "title": "PortfolioAppSettings",
        "type": "object"
      },
      "PortfolioAppSourceSettings": {
        "properties": {
          "filter": {
            "$ref": "#/components/schemas/ItemSearchQueryFilter"
          },
          "workspaceId": {
            "format": "uuid",
            "type": "string"
          }
        },
        "required": [
          "workspaceId"
        ],
        "title": "PortfolioAppSourceSettings",
        "type": "object"
      },
      "PrioritizationApp": {
        "properties": {
          "id": {
            "format": "uuid",
            "type": "string"
          },
          "settings": {
            "$ref": "#/components/schemas/PrioritizationAppTypeConfiguration"
          },
          "teamId": {
            "format": "uuid",
            "type": "string"
          },
          "typeId": {
            "const": "prioritization",
            "type": "string"
          }
        },
        "required": [
          "id",
          "teamId",
          "typeId",
          "settings"
        ],
        "title": "PrioritizationApp",
        "type": "object"
      },
      "PrioritizationAppTypeConfiguration": {
        "properties": {
          "factors": {
            "$ref": "#/components/schemas/Factors"
          },
          "mode": {
            "$ref": "#/components/schemas/ScoringMode"
          },
          "workspaceId": {
            "format": "uuid",
            "type": "string"
          }
        },
        "required": [
          "workspaceId",
          "factors",
          "mode"
        ],
        "title": "PrioritizationAppTypeConfiguration",
        "type": "object"
      },
      "PrioritizationFieldWithFieldEmbed": {
        "properties": {
          "_embedded": {
            "$ref": "#/components/schemas/FieldEmbed"
          },
          "createdAt": {
            "format": "date-time",
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "id": {
            "format": "uuid",
            "type": "string"
          },
          "isTeamField": {
            "type": "boolean"
          },
          "name": {
            "type": "string"
          },
          "required": {
            "type": "boolean"
          },
          "teamId": {
            "format": "uuid",
            "type": "string"
          },
          "typeId": {
            "const": "prioritization",
            "type": "string"
          }
        },
        "required": [
          "id",
          "typeId",
          "name",
          "description",
          "isTeamField",
          "teamId",
          "createdAt",
          "required",
          "_embedded"
        ],
        "title": "PrioritizationFieldWithFieldEmbed",
        "type": "object"
      },
      "RefItemProperty": {
        "oneOf": [
          {
            "enum": [
              "archived",
              "assignees",
              "color",
              "description",
              "lastUpdatedAt",
              "name",
              "status",
              "statusCategoryUpdatedAt"
            ],
            "type": "string"
          },
          {
            "description": "A combination of 'fieldid:' prefix and a UUID field-id.",
            "pattern": "^fieldid:[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$",
            "type": "string"
          }
        ],
        "title": "RefItemProperty"
      },
      "RelativeItemInfo": {
        "properties": {
          "alias": {
            "type": "string"
          },
          "childOrder": {
            "format": "int32",
            "type": "integer"
          },
          "item": {
            "$ref": "#/components/schemas/Item"
          },
          "itemId": {
            "format": "uuid",
            "type": "string"
          },
          "itemType": {
            "$ref": "#/components/schemas/ItemType"
          },
          "parentOrder": {
            "format": "int32",
            "type": "integer"
          },
          "relationId": {
            "format": "uuid",
            "type": "string"
          },
          "workspaceId": {
            "format": "uuid",
            "type": "string"
          }
        },
        "required": [
          "relationId",
          "workspaceId",
          "itemId",
          "parentOrder",
          "childOrder"
        ],
        "title": "RelativeItemInfo",
        "type": "object"
      },
      "ResendUserInviteRequest": {
        "properties": {
          "email": {
            "type": "string"
          }
        },
        "required": [
          "email"
        ],
        "title": "ResendUserInviteRequest",
        "type": "object"
      },
      "RichText": {
        "examples": [
          {
            "blocks": [
              {
                "content": [
                  {
                    "content": "hello world",
                    "type": "text"
                  }
                ],
                "type": "paragraph"
              }
            ],
            "richText": true
          }
        ],
        "properties": {
          "blocks": {
            "items": {
              "$ref": "#/components/schemas/RichTextBlock"
            },
            "type": "array"
          }
        },
        "required": [
          "blocks"
        ],
        "title": "RichText",
        "type": "object"
      },
      "RichTextBlock": {
        "discriminator": {
          "mapping": {
            "attachment": "#/components/schemas/RichTextBlockAttachment",
            "blockquote": "#/components/schemas/RichTextBlockBlockquote",
            "code": "#/components/schemas/RichTextBlockCode",
            "custom": "#/components/schemas/RichTextBlockCustom",
            "embed": "#/components/schemas/RichTextBlockEmbed",
            "headline": "#/components/schemas/RichTextBlockHeadline",
            "indentation": "#/components/schemas/RichTextBlockIndentation",
            "list": "#/components/schemas/RichTextBlockList",
            "panel": "#/components/schemas/RichTextBlockPanel",
            "paragraph": "#/components/schemas/RichTextBlockParagraph"
          },
          "propertyName": "type"
        },
        "oneOf": [
          {
            "$ref": "#/components/schemas/RichTextBlockAttachment"
          },
          {
            "$ref": "#/components/schemas/RichTextBlockBlockquote"
          },
          {
            "$ref": "#/components/schemas/RichTextBlockCode"
          },
          {
            "$ref": "#/components/schemas/RichTextBlockCustom"
          },
          {
            "$ref": "#/components/schemas/RichTextBlockEmbed"
          },
          {
            "$ref": "#/components/schemas/RichTextBlockHeadline"
          },
          {
            "$ref": "#/components/schemas/RichTextBlockIndentation"
          },
          {
            "$ref": "#/components/schemas/RichTextBlockList"
          },
          {
            "$ref": "#/components/schemas/RichTextBlockPanel"
          },
          {
            "$ref": "#/components/schemas/RichTextBlockParagraph"
          }
        ],
        "title": "RichTextBlock"
      },
      "RichTextBlockAttachment": {
        "properties": {
          "attachmentId": {
            "format": "uuid",
            "type": "string"
          },
          "caption": {
            "type": "string"
          },
          "contentType": {
            "type": "string"
          },
          "meta": {
            "type": "object"
          },
          "type": {
            "const": "attachment",
            "type": "string"
          },
          "width": {
            "format": "int32",
            "type": "integer"
          }
        },
        "required": [
          "attachmentId",
          "contentType",
          "type"
        ],
        "title": "RichTextBlockAttachment",
        "type": "object"
      },
      "RichTextBlockBlockquote": {
        "properties": {
          "content": {
            "items": {
              "$ref": "#/components/schemas/RichTextInline"
            },
            "type": "array"
          },
          "meta": {
            "type": "object"
          },
          "type": {
            "const": "blockquote",
            "type": "string"
          }
        },
        "required": [
          "content",
          "type"
        ],
        "title": "RichTextBlockBlockquote",
        "type": "object"
      },
      "RichTextBlockCode": {
        "properties": {
          "content": {
            "type": "string"
          },
          "language": {
            "type": "string"
          },
          "meta": {
            "type": "object"
          },
          "type": {
            "const": "code",
            "type": "string"
          }
        },
        "required": [
          "content",
          "type"
        ],
        "title": "RichTextBlockCode",
        "type": "object"
      },
      "RichTextBlockCustom": {
        "properties": {
          "id": {
            "type": "string"
          },
          "meta": {
            "type": "object"
          },
          "raw": {
            "type": "string"
          },
          "type": {
            "const": "custom",
            "type": "string"
          }
        },
        "required": [
          "id",
          "raw",
          "type"
        ],
        "title": "RichTextBlockCustom",
        "type": "object"
      },
      "RichTextBlockEmbed": {
        "properties": {
          "caption": {
            "type": "string"
          },
          "height": {
            "format": "int32",
            "type": "integer"
          },
          "meta": {
            "type": "object"
          },
          "type": {
            "const": "embed",
            "type": "string"
          },
          "url": {
            "type": "string"
          }
        },
        "required": [
          "url",
          "type"
        ],
        "title": "RichTextBlockEmbed",
        "type": "object"
      },
      "RichTextBlockHeadline": {
        "properties": {
          "content": {
            "items": {
              "$ref": "#/components/schemas/RichTextInline"
            },
            "type": "array"
          },
          "level": {
            "format": "int32",
            "type": "integer"
          },
          "meta": {
            "type": "object"
          },
          "type": {
            "const": "headline",
            "type": "string"
          }
        },
        "required": [
          "level",
          "content",
          "type"
        ],
        "title": "RichTextBlockHeadline",
        "type": "object"
      },
      "RichTextBlockIndentation": {
        "properties": {
          "content": {
            "items": {
              "$ref": "#/components/schemas/RichTextBlock"
            },
            "type": "array"
          },
          "type": {
            "const": "indentation",
            "type": "string"
          }
        },
        "required": [
          "content",
          "type"
        ],
        "title": "RichTextBlockIndentation",
        "type": "object"
      },
      "RichTextBlockList": {
        "properties": {
          "bulletListMarker": {
            "type": "string"
          },
          "items": {
            "items": {
              "$ref": "#/components/schemas/RichTextListItem"
            },
            "type": "array"
          },
          "meta": {
            "type": "object"
          },
          "ordered": {
            "type": "boolean"
          },
          "orderedListDelimiter": {
            "type": "string"
          },
          "orderedListStartsAt": {
            "format": "int32",
            "type": "integer"
          },
          "type": {
            "const": "list",
            "type": "string"
          }
        },
        "required": [
          "ordered",
          "items",
          "type"
        ],
        "title": "RichTextBlockList",
        "type": "object"
      },
      "RichTextBlockPanel": {
        "properties": {
          "colorHex": {
            "type": "string"
          },
          "content": {
            "items": {
              "$ref": "#/components/schemas/RichTextBlock"
            },
            "type": "array"
          },
          "title": {
            "type": "string"
          },
          "type": {
            "const": "panel",
            "type": "string"
          }
        },
        "required": [
          "content",
          "type"
        ],
        "title": "RichTextBlockPanel",
        "type": "object"
      },
      "RichTextBlockParagraph": {
        "properties": {
          "content": {
            "items": {
              "$ref": "#/components/schemas/RichTextInline"
            },
            "type": "array"
          },
          "meta": {
            "type": "object"
          },
          "type": {
            "const": "paragraph",
            "type": "string"
          }
        },
        "required": [
          "content",
          "type"
        ],
        "title": "RichTextBlockParagraph",
        "type": "object"
      },
      "RichTextInline": {
        "discriminator": {
          "mapping": {
            "bold": "#/components/schemas/RichTextInlineBold",
            "code": "#/components/schemas/RichTextInlineCode",
            "custom": "#/components/schemas/RichTextInlineCustom",
            "groupMention": "#/components/schemas/RichTextInlineGroupMention",
            "image": "#/components/schemas/RichTextInlineImage",
            "italic": "#/components/schemas/RichTextInlineItalic",
            "link": "#/components/schemas/RichTextInlineLink",
            "mention": "#/components/schemas/RichTextInlineMention",
            "strikeThrough": "#/components/schemas/RichTextInlineStrikeThrough",
            "text": "#/components/schemas/RichTextInlineText",
            "underline": "#/components/schemas/RichTextInlineUnderline"
          },
          "propertyName": "type"
        },
        "oneOf": [
          {
            "$ref": "#/components/schemas/RichTextInlineBold"
          },
          {
            "$ref": "#/components/schemas/RichTextInlineCode"
          },
          {
            "$ref": "#/components/schemas/RichTextInlineCustom"
          },
          {
            "$ref": "#/components/schemas/RichTextInlineGroupMention"
          },
          {
            "$ref": "#/components/schemas/RichTextInlineImage"
          },
          {
            "$ref": "#/components/schemas/RichTextInlineItalic"
          },
          {
            "$ref": "#/components/schemas/RichTextInlineLink"
          },
          {
            "$ref": "#/components/schemas/RichTextInlineMention"
          },
          {
            "$ref": "#/components/schemas/RichTextInlineStrikeThrough"
          },
          {
            "$ref": "#/components/schemas/RichTextInlineText"
          },
          {
            "$ref": "#/components/schemas/RichTextInlineUnderline"
          }
        ],
        "title": "RichTextInline"
      },
      "RichTextInlineBold": {
        "properties": {
          "content": {
            "items": {
              "$ref": "#/components/schemas/RichTextInline"
            },
            "type": "array"
          },
          "type": {
            "const": "bold",
            "type": "string"
          }
        },
        "required": [
          "content",
          "type"
        ],
        "title": "RichTextInlineBold",
        "type": "object"
      },
      "RichTextInlineCode": {
        "properties": {
          "content": {
            "type": "string"
          },
          "meta": {
            "type": "object"
          },
          "type": {
            "const": "code",
            "type": "string"
          }
        },
        "required": [
          "content",
          "type"
        ],
        "title": "RichTextInlineCode",
        "type": "object"
      },
      "RichTextInlineCustom": {
        "properties": {
          "id": {
            "type": "string"
          },
          "meta": {
            "type": "object"
          },
          "raw": {
            "type": "string"
          },
          "type": {
            "const": "custom",
            "type": "string"
          }
        },
        "required": [
          "id",
          "raw",
          "type"
        ],
        "title": "RichTextInlineCustom",
        "type": "object"
      },
      "RichTextInlineGroupMention": {
        "properties": {
          "meta": {
            "type": "object"
          },
          "type": {
            "const": "groupMention",
            "type": "string"
          },
          "userGroupId": {
            "format": "uuid",
            "type": "string"
          }
        },
        "required": [
          "userGroupId",
          "type"
        ],
        "title": "RichTextInlineGroupMention",
        "type": "object"
      },
      "RichTextInlineImage": {
        "properties": {
          "content": {
            "items": {
              "$ref": "#/components/schemas/RichTextInline"
            },
            "type": "array"
          },
          "type": {
            "const": "image",
            "type": "string"
          },
          "url": {
            "type": "string"
          }
        },
        "required": [
          "content",
          "url",
          "type"
        ],
        "title": "RichTextInlineImage",
        "type": "object"
      },
      "RichTextInlineItalic": {
        "properties": {
          "content": {
            "items": {
              "$ref": "#/components/schemas/RichTextInline"
            },
            "type": "array"
          },
          "type": {
            "const": "italic",
            "type": "string"
          }
        },
        "required": [
          "content",
          "type"
        ],
        "title": "RichTextInlineItalic",
        "type": "object"
      },
      "RichTextInlineLink": {
        "properties": {
          "content": {
            "items": {
              "$ref": "#/components/schemas/RichTextInline"
            },
            "type": "array"
          },
          "type": {
            "const": "link",
            "type": "string"
          },
          "url": {
            "type": "string"
          }
        },
        "required": [
          "content",
          "url",
          "type"
        ],
        "title": "RichTextInlineLink",
        "type": "object"
      },
      "RichTextInlineMention": {
        "properties": {
          "meta": {
            "type": "object"
          },
          "type": {
            "const": "mention",
            "type": "string"
          },
          "userId": {
            "format": "uuid",
            "type": "string"
          }
        },
        "required": [
          "userId",
          "type"
        ],
        "title": "RichTextInlineMention",
        "type": "object"
      },
      "RichTextInlineStrikeThrough": {
        "properties": {
          "content": {
            "items": {
              "$ref": "#/components/schemas/RichTextInline"
            },
            "type": "array"
          },
          "type": {
            "const": "strikeThrough",
            "type": "string"
          }
        },
        "required": [
          "content",
          "type"
        ],
        "title": "RichTextInlineStrikeThrough",
        "type": "object"
      },
      "RichTextInlineText": {
        "properties": {
          "content": {
            "type": "string"
          },
          "meta": {
            "type": "object"
          },
          "type": {
            "const": "text",
            "type": "string"
          }
        },
        "required": [
          "content",
          "type"
        ],
        "title": "RichTextInlineText",
        "type": "object"
      },
      "RichTextInlineUnderline": {
        "properties": {
          "content": {
            "items": {
              "$ref": "#/components/schemas/RichTextInline"
            },
            "type": "array"
          },
          "type": {
            "const": "underline",
            "type": "string"
          }
        },
        "required": [
          "content",
          "type"
        ],
        "title": "RichTextInlineUnderline",
        "type": "object"
      },
      "RichTextListItem": {
        "properties": {
          "content": {
            "items": {
              "$ref": "#/components/schemas/RichTextBlock"
            },
            "type": "array"
          }
        },
        "required": [
          "content"
        ],
        "title": "RichTextListItem",
        "type": "object"
      },
      "Role": {
        "enum": [
          "admin",
          "contributor",
          "editor"
        ],
        "title": "Role",
        "type": "string"
      },
      "ScoringDirection": {
        "enum": [
          "higherIsBetter",
          "lowerIsBetter"
        ],
        "title": "ScoringDirection",
        "type": "string"
      },
      "ScoringFormula": {
        "discriminator": {
          "mapping": {
            "absolute": "#/components/schemas/ScoringFormulaAbsolute",
            "addition": "#/components/schemas/ScoringFormulaAddition",
            "constant": "#/components/schemas/ScoringFormulaConstant",
            "criterionNormalizedNumericValue": "#/components/schemas/ScoringFormulaCriterionNormalizedNumericValue",
            "criterionNumericValue": "#/components/schemas/ScoringFormulaCriterionNumericValue",
            "division": "#/components/schemas/ScoringFormulaDivision",
            "factorScore": "#/components/schemas/ScoringFormulaFactorScore",
            "logarithm": "#/components/schemas/ScoringFormulaLogarithm",
            "maximum": "#/components/schemas/ScoringFormulaMaximum",
            "minimum": "#/components/schemas/ScoringFormulaMinimum",
            "multiplication": "#/components/schemas/ScoringFormulaMultiplication",
            "negative": "#/components/schemas/ScoringFormulaNegative",
            "power": "#/components/schemas/ScoringFormulaPower",
            "sqrt": "#/components/schemas/ScoringFormulaSquareRoot",
            "subtraction": "#/components/schemas/ScoringFormulaSubtraction"
          },
          "propertyName": "type"
        },
        "oneOf": [
          {
            "$ref": "#/components/schemas/ScoringFormulaAbsolute"
          },
          {
            "$ref": "#/components/schemas/ScoringFormulaAddition"
          },
          {
            "$ref": "#/components/schemas/ScoringFormulaConstant"
          },
          {
            "$ref": "#/components/schemas/ScoringFormulaCriterionNormalizedNumericValue"
          },
          {
            "$ref": "#/components/schemas/ScoringFormulaCriterionNumericValue"
          },
          {
            "$ref": "#/components/schemas/ScoringFormulaDivision"
          },
          {
            "$ref": "#/components/schemas/ScoringFormulaFactorScore"
          },
          {
            "$ref": "#/components/schemas/ScoringFormulaLogarithm"
          },
          {
            "$ref": "#/components/schemas/ScoringFormulaMaximum"
          },
          {
            "$ref": "#/components/schemas/ScoringFormulaMinimum"
          },
          {
            "$ref": "#/components/schemas/ScoringFormulaMultiplication"
          },
          {
            "$ref": "#/components/schemas/ScoringFormulaNegative"
          },
          {
            "$ref": "#/components/schemas/ScoringFormulaPower"
          },
          {
            "$ref": "#/components/schemas/ScoringFormulaSquareRoot"
          },
          {
            "$ref": "#/components/schemas/ScoringFormulaSubtraction"
          }
        ],
        "title": "ScoringFormula"
      },
      "ScoringFormulaAbsolute": {
        "properties": {
          "innder": {
            "$ref": "#/components/schemas/ScoringFormula"
          },
          "type": {
            "const": "absolute",
            "type": "string"
          }
        },
        "required": [
          "innder",
          "type"
        ],
        "title": "ScoringFormulaAbsolute",
        "type": "object"
      },
      "ScoringFormulaAddition": {
        "properties": {
          "left": {
            "$ref": "#/components/schemas/ScoringFormula"
          },
          "right": {
            "$ref": "#/components/schemas/ScoringFormula"
          },
          "type": {
            "const": "addition",
            "type": "string"
          }
        },
        "required": [
          "left",
          "right",
          "type"
        ],
        "title": "ScoringFormulaAddition",
        "type": "object"
      },
      "ScoringFormulaConstant": {
        "properties": {
          "type": {
            "const": "constant",
            "type": "string"
          },
          "value": {
            "type": "number"
          }
        },
        "required": [
          "value",
          "type"
        ],
        "title": "ScoringFormulaConstant",
        "type": "object"
      },
      "ScoringFormulaCriterionNormalizedNumericValue": {
        "properties": {
          "criterionId": {
            "format": "uuid",
            "type": "string"
          },
          "type": {
            "const": "criterionNormalizedNumericValue",
            "type": "string"
          }
        },
        "required": [
          "criterionId",
          "type"
        ],
        "title": "ScoringFormulaCriterionNormalizedNumericValue",
        "type": "object"
      },
      "ScoringFormulaCriterionNumericValue": {
        "properties": {
          "criterionId": {
            "format": "uuid",
            "type": "string"
          },
          "type": {
            "const": "criterionNumericValue",
            "type": "string"
          }
        },
        "required": [
          "criterionId",
          "type"
        ],
        "title": "ScoringFormulaCriterionNumericValue",
        "type": "object"
      },
      "ScoringFormulaDivision": {
        "properties": {
          "left": {
            "$ref": "#/components/schemas/ScoringFormula"
          },
          "right": {
            "$ref": "#/components/schemas/ScoringFormula"
          },
          "type": {
            "const": "division",
            "type": "string"
          }
        },
        "required": [
          "left",
          "right",
          "type"
        ],
        "title": "ScoringFormulaDivision",
        "type": "object"
      },
      "ScoringFormulaFactorScore": {
        "properties": {
          "factorId": {
            "$ref": "#/components/schemas/FactorId"
          },
          "type": {
            "const": "factorScore",
            "type": "string"
          }
        },
        "required": [
          "factorId",
          "type"
        ],
        "title": "ScoringFormulaFactorScore",
        "type": "object"
      },
      "ScoringFormulaLogarithm": {
        "properties": {
          "innder": {
            "$ref": "#/components/schemas/ScoringFormula"
          },
          "type": {
            "const": "logarithm",
            "type": "string"
          }
        },
        "required": [
          "innder",
          "type"
        ],
        "title": "ScoringFormulaLogarithm",
        "type": "object"
      },
      "ScoringFormulaMaximum": {
        "properties": {
          "arguments": {
            "items": {
              "$ref": "#/components/schemas/ScoringFormula"
            },
            "type": "array"
          },
          "type": {
            "const": "maximum",
            "type": "string"
          }
        },
        "required": [
          "arguments",
          "type"
        ],
        "title": "ScoringFormulaMaximum",
        "type": "object"
      },
      "ScoringFormulaMinimum": {
        "properties": {
          "arguments": {
            "items": {
              "$ref": "#/components/schemas/ScoringFormula"
            },
            "type": "array"
          },
          "type": {
            "const": "minimum",
            "type": "string"
          }
        },
        "required": [
          "arguments",
          "type"
        ],
        "title": "ScoringFormulaMinimum",
        "type": "object"
      },
      "ScoringFormulaMultiplication": {
        "properties": {
          "left": {
            "$ref": "#/components/schemas/ScoringFormula"
          },
          "right": {
            "$ref": "#/components/schemas/ScoringFormula"
          },
          "type": {
            "const": "multiplication",
            "type": "string"
          }
        },
        "required": [
          "left",
          "right",
          "type"
        ],
        "title": "ScoringFormulaMultiplication",
        "type": "object"
      },
      "ScoringFormulaNegative": {
        "properties": {
          "innder": {
            "$ref": "#/components/schemas/ScoringFormula"
          },
          "type": {
            "const": "negative",
            "type": "string"
          }
        },
        "required": [
          "innder",
          "type"
        ],
        "title": "ScoringFormulaNegative",
        "type": "object"
      },
      "ScoringFormulaPower": {
        "properties": {
          "left": {
            "$ref": "#/components/schemas/ScoringFormula"
          },
          "right": {
            "$ref": "#/components/schemas/ScoringFormula"
          },
          "type": {
            "const": "power",
            "type": "string"
          }
        },
        "required": [
          "left",
          "right",
          "type"
        ],
        "title": "ScoringFormulaPower",
        "type": "object"
      },
      "ScoringFormulaSquareRoot": {
        "properties": {
          "innder": {
            "$ref": "#/components/schemas/ScoringFormula"
          },
          "type": {
            "const": "sqrt",
            "type": "string"
          }
        },
        "required": [
          "innder",
          "type"
        ],
        "title": "ScoringFormulaSquareRoot",
        "type": "object"
      },
      "ScoringFormulaSubtraction": {
        "properties": {
          "left": {
            "$ref": "#/components/schemas/ScoringFormula"
          },
          "right": {
            "$ref": "#/components/schemas/ScoringFormula"
          },
          "type": {
            "const": "subtraction",
            "type": "string"
          }
        },
        "required": [
          "left",
          "right",
          "type"
        ],
        "title": "ScoringFormulaSubtraction",
        "type": "object"
      },
      "ScoringMode": {
        "discriminator": {
          "mapping": {
            "customFormula": "#/components/schemas/ScoringModeCustomFormula",
            "customWeighting": "#/components/schemas/ScoringModeCustomWeighting"
          },
          "propertyName": "type"
        },
        "oneOf": [
          {
            "$ref": "#/components/schemas/ScoringModeCustomFormula"
          },
          {
            "$ref": "#/components/schemas/ScoringModeCustomWeighting"
          }
        ],
        "title": "ScoringMode"
      },
      "ScoringModeCustomFormula": {
        "properties": {
          "factorFormulas": {
            "additionalProperties": {
              "$ref": "#/components/schemas/ScoringFormula"
            },
            "type": "object"
          },
          "itemScoreFormula": {
            "$ref": "#/components/schemas/ScoringFormula"
          },
          "type": {
            "const": "customFormula",
            "type": "string"
          }
        },
        "required": [
          "factorFormulas",
          "itemScoreFormula",
          "type"
        ],
        "title": "ScoringModeCustomFormula",
        "type": "object"
      },
      "ScoringModeCustomWeighting": {
        "properties": {
          "criterionWeights": {
            "additionalProperties": {
              "type": "number"
            },
            "type": "object"
          },
          "factorWeights": {
            "additionalProperties": {
              "type": "number"
            },
            "type": "object"
          },
          "type": {
            "const": "customWeighting",
            "type": "string"
          }
        },
        "required": [
          "factorWeights",
          "criterionWeights",
          "type"
        ],
        "title": "ScoringModeCustomWeighting",
        "type": "object"
      },
      "SelectFieldOptionColor": {
        "enum": [
          "blue",
          "coco",
          "daulphine",
          "great",
          "orange",
          "pink",
          "red",
          "violet",
          "yellow"
        ],
        "title": "SelectFieldOptionColor",
        "type": "string"
      },
      "SelectFieldTypeOption": {
        "properties": {
          "color": {
            "$ref": "#/components/schemas/SelectFieldOptionColor"
          },
          "default": {
            "type": "boolean"
          },
          "description": {
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "numericValue": {
            "type": "number"
          }
        },
        "required": [
          "id",
          "name",
          "description",
          "default"
        ],
        "title": "SelectFieldTypeOption",
        "type": "object"
      },
      "SelectFieldTypeSettings": {
        "properties": {
          "aiSettings": {
            "$ref": "#/components/schemas/AiFieldSettings"
          },
          "multi": {
            "type": "boolean"
          },
          "options": {
            "items": {
              "$ref": "#/components/schemas/SelectFieldTypeOption"
            },
            "type": "array"
          }
        },
        "required": [
          "options",
          "multi"
        ],
        "title": "SelectFieldTypeSettings",
        "type": "object"
      },
      "SelectFieldWithFieldEmbed": {
        "properties": {
          "_embedded": {
            "$ref": "#/components/schemas/FieldEmbed"
          },
          "createdAt": {
            "format": "date-time",
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "id": {
            "format": "uuid",
            "type": "string"
          },
          "isTeamField": {
            "type": "boolean"
          },
          "name": {
            "type": "string"
          },
          "required": {
            "type": "boolean"
          },
          "settings": {
            "$ref": "#/components/schemas/SelectFieldTypeSettings"
          },
          "teamId": {
            "format": "uuid",
            "type": "string"
          },
          "typeId": {
            "const": "select",
            "type": "string"
          }
        },
        "required": [
          "id",
          "typeId",
          "settings",
          "name",
          "description",
          "isTeamField",
          "teamId",
          "createdAt",
          "required",
          "_embedded"
        ],
        "title": "SelectFieldWithFieldEmbed",
        "type": "object"
      },
      "SetClientSettingsRequest": {
        "properties": {
          "path": {
            "type": "string"
          },
          "value": {}
        },
        "required": [
          "value"
        ],
        "title": "SetClientSettingsRequest",
        "type": "object"
      },
      "SetWorkspaceStatusesRequest": {
        "properties": {
          "replacements": {
            "additionalProperties": {
              "format": "uuid",
              "type": "string"
            },
            "description": "A map of status replacements, where key is and OLD status-id and value is a NEW status-id. Replacements must be specified for each status being deleted from the workspace.This mapping will be used to migrate all items in the workspace to new statuses before deleting the old ones.",
            "type": "object"
          },
          "statuses": {
            "description": "Statuses to be set for the specified workspace. New statuses will be added to database, missing statuses will be removed from database.",
            "items": {
              "$ref": "#/components/schemas/Status"
            },
            "type": "array"
          }
        },
        "required": [
          "statuses",
          "replacements"
        ],
        "title": "SetWorkspaceStatusesRequest",
        "type": "object"
      },
      "Status": {
        "properties": {
          "category": {
            "$ref": "#/components/schemas/StatusCategory"
          },
          "color": {
            "$ref": "#/components/schemas/StatusColor"
          },
          "default": {
            "description": "Whether this status should be applied by default to newly created items. There can be only one default status in each workspace.",
            "type": "boolean"
          },
          "id": {
            "format": "uuid",
            "type": "string"
          },
          "name": {
            "description": "Name of this status in UI.",
            "type": "string"
          },
          "order": {
            "description": "Order of this status comparing to other statuses in the same workspace.",
            "format": "int32",
            "type": "integer"
          },
          "workspaceId": {
            "format": "uuid",
            "type": "string"
          }
        },
        "required": [
          "id",
          "workspaceId",
          "category",
          "name",
          "default",
          "order"
        ],
        "title": "Status",
        "type": "object"
      },
      "StatusCategory": {
        "description": "Status category adds some additional meaning to each status:\n- 'draft': only semantic meaning\n- 'active': only semantic meaning\n- 'closed': items with a status in this category will be considered as completed, which contributes to progress calculation (e.g. \"1/3 items completed\").",
        "enum": [
          "active",
          "closed",
          "draft"
        ],
        "title": "StatusCategory",
        "type": "string"
      },
      "StatusColor": {
        "description": "Color of a status-chip in UI.",
        "enum": [
          "blue",
          "coco",
          "daulphine",
          "great",
          "orange",
          "pink",
          "red",
          "violet",
          "yellow"
        ],
        "title": "StatusColor",
        "type": "string"
      },
      "StoreAcceptedTosRequest": {
        "properties": {
          "text": {
            "type": "string"
          }
        },
        "required": [
          "text"
        ],
        "title": "StoreAcceptedTosRequest",
        "type": "object"
      },
      "SwimlaneMode": {
        "discriminator": {
          "mapping": {
            "app": "#/components/schemas/SwimlaneModeApp",
            "assignees": "#/components/schemas/SwimlaneModeAssignees",
            "field": "#/components/schemas/SwimlaneModeField",
            "parent": "#/components/schemas/SwimlaneModeParent",
            "status": "#/components/schemas/SwimlaneModeStatus",
            "statusCategory": "#/components/schemas/SwimlaneModeStatusCategory"
          },
          "propertyName": "type"
        },
        "oneOf": [
          {
            "$ref": "#/components/schemas/SwimlaneModeApp"
          },
          {
            "$ref": "#/components/schemas/SwimlaneModeAssignees"
          },
          {
            "$ref": "#/components/schemas/SwimlaneModeField"
          },
          {
            "$ref": "#/components/schemas/SwimlaneModeParent"
          },
          {
            "$ref": "#/components/schemas/SwimlaneModeStatus"
          },
          {
            "$ref": "#/components/schemas/SwimlaneModeStatusCategory"
          }
        ],
        "title": "SwimlaneMode"
      },
      "SwimlaneModeApp": {
        "properties": {
          "appId": {
            "format": "uuid",
            "type": "string"
          },
          "type": {
            "const": "app",
            "type": "string"
          }
        },
        "required": [
          "appId",
          "type"
        ],
        "title": "SwimlaneModeApp",
        "type": "object"
      },
      "SwimlaneModeAssignees": {
        "properties": {
          "type": {
            "const": "assignees",
            "type": "string"
          }
        },
        "required": [
          "type"
        ],
        "title": "SwimlaneModeAssignees",
        "type": "object"
      },
      "SwimlaneModeField": {
        "properties": {
          "fieldId": {
            "format": "uuid",
            "type": "string"
          },
          "type": {
            "const": "field",
            "type": "string"
          }
        },
        "required": [
          "fieldId",
          "type"
        ],
        "title": "SwimlaneModeField",
        "type": "object"
      },
      "SwimlaneModeParent": {
        "properties": {
          "type": {
            "const": "parent",
            "type": "string"
          }
        },
        "required": [
          "type"
        ],
        "title": "SwimlaneModeParent",
        "type": "object"
      },
      "SwimlaneModeStatus": {
        "properties": {
          "type": {
            "const": "status",
            "type": "string"
          }
        },
        "required": [
          "type"
        ],
        "title": "SwimlaneModeStatus",
        "type": "object"
      },
      "SwimlaneModeStatusCategory": {
        "properties": {
          "type": {
            "const": "statusCategory",
            "type": "string"
          }
        },
        "required": [
          "type"
        ],
        "title": "SwimlaneModeStatusCategory",
        "type": "object"
      },
      "Team": {
        "properties": {
          "companyInfo": {
            "$ref": "#/components/schemas/TeamCompanyInfo"
          },
          "createdAt": {
            "format": "date-time",
            "type": "string"
          },
          "flags": {
            "$ref": "#/components/schemas/TeamFlags"
          },
          "name": {
            "type": "string"
          },
          "slug": {
            "type": "string"
          },
          "state": {
            "$ref": "#/components/schemas/TeamState"
          },
          "teamId": {
            "format": "uuid",
            "type": "string"
          },
          "updatedAt": {
            "format": "date-time",
            "type": "string"
          }
        },
        "required": [
          "teamId",
          "slug",
          "name",
          "state",
          "flags",
          "createdAt",
          "updatedAt"
        ],
        "title": "Team",
        "type": "object"
      },
      "TeamCompanyInfo": {
        "properties": {
          "role": {
            "$ref": "#/components/schemas/TeamCompanyInfoRole"
          },
          "size": {
            "$ref": "#/components/schemas/TeamCompanyInfoSize"
          },
          "telephone": {
            "type": "string"
          }
        },
        "required": [
          "size",
          "role"
        ],
        "title": "TeamCompanyInfo",
        "type": "object"
      },
      "TeamCompanyInfoRole": {
        "enum": [
          "customerSuccess",
          "design",
          "engineering",
          "marketing",
          "notListed",
          "productManagement",
          "projectManagement",
          "sales",
          "unknown"
        ],
        "title": "TeamCompanyInfoRole",
        "type": "string"
      },
      "TeamCompanyInfoSize": {
        "enum": [
          "range1000plus",
          "range11to50",
          "range1to10",
          "range201to1000",
          "range51to200",
          "unknown"
        ],
        "title": "TeamCompanyInfoSize",
        "type": "string"
      },
      "TeamFlag": {
        "properties": {
          "enforced": {
            "type": "boolean"
          },
          "explicit": {
            "type": "boolean"
          },
          "value": {
            "type": "boolean"
          }
        },
        "required": [
          "value",
          "enforced",
          "explicit"
        ],
        "title": "TeamFlag",
        "type": "object"
      },
      "TeamFlags": {
        "properties": {
          "enableAi": {
            "$ref": "#/components/schemas/TeamFlag"
          },
          "enableOkrApp": {
            "$ref": "#/components/schemas/TeamFlag"
          },
          "forbidShareLinkCreation": {
            "$ref": "#/components/schemas/TeamFlag"
          },
          "removeBranding": {
            "$ref": "#/components/schemas/TeamFlag"
          },
          "requirePortalLogin": {
            "$ref": "#/components/schemas/TeamFlag"
          },
          "requirePortalPassword": {
            "$ref": "#/components/schemas/TeamFlag"
          },
          "requireShareLinkPassword": {
            "$ref": "#/components/schemas/TeamFlag"
          },
          "restrictShareLinkCreation": {
            "$ref": "#/components/schemas/TeamFlag"
          }
        },
        "required": [
          "enableAi",
          "enableOkrApp",
          "removeBranding",
          "forbidShareLinkCreation",
          "restrictShareLinkCreation",
          "requireShareLinkPassword",
          "requirePortalLogin",
          "requirePortalPassword"
        ],
        "title": "TeamFlags",
        "type": "object"
      },
      "TeamState": {
        "properties": {
          "features": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "uniqueItems": true
          },
          "seats": {
            "$ref": "#/components/schemas/TeamStateAllTeamStateSeats"
          },
          "subscription": {
            "$ref": "#/components/schemas/TeamStateSubscription"
          },
          "trialUntil": {
            "deprecated": true,
            "format": "date-time",
            "type": "string"
          },
          "workspaces": {
            "$ref": "#/components/schemas/TeamStateWorkspaces"
          }
        },
        "required": [
          "features",
          "seats",
          "workspaces",
          "subscription"
        ],
        "title": "TeamState",
        "type": "object"
      },
      "TeamStateAllTeamStateSeats": {
        "properties": {
          "admin": {
            "$ref": "#/components/schemas/TeamStateSeats"
          },
          "any": {
            "$ref": "#/components/schemas/TeamStateSeats"
          },
          "contributor": {
            "$ref": "#/components/schemas/TeamStateSeats"
          },
          "editor": {
            "$ref": "#/components/schemas/TeamStateSeats"
          }
        },
        "title": "TeamStateAllTeamStateSeats",
        "type": "object"
      },
      "TeamStateSeats": {
        "properties": {
          "free": {
            "format": "int32",
            "type": "integer"
          },
          "total": {
            "type": "integer"
          },
          "used": {
            "format": "int32",
            "type": "integer"
          }
        },
        "required": [
          "total",
          "used",
          "free"
        ],
        "title": "TeamStateSeats",
        "type": "object"
      },
      "TeamStateSubscription": {
        "discriminator": {
          "mapping": {
            "expired": "#/components/schemas/TeamStateSubscriptionExpired",
            "subscribed": "#/components/schemas/TeamStateSubscriptionSubscribed",
            "trial": "#/components/schemas/TeamStateSubscriptionTrial"
          },
          "propertyName": "type"
        },
        "oneOf": [
          {
            "$ref": "#/components/schemas/TeamStateSubscriptionExpired"
          },
          {
            "$ref": "#/components/schemas/TeamStateSubscriptionSubscribed"
          },
          {
            "$ref": "#/components/schemas/TeamStateSubscriptionTrial"
          }
        ],
        "title": "TeamStateSubscription"
      },
      "TeamStateSubscriptionExpired": {
        "properties": {
          "trialUntil": {
            "format": "date-time",
            "type": "string"
          },
          "type": {
            "const": "expired",
            "type": "string"
          }
        },
        "required": [
          "trialUntil",
          "type"
        ],
        "title": "TeamStateSubscriptionExpired",
        "type": "object"
      },
      "TeamStateSubscriptionSubscribed": {
        "properties": {
          "type": {
            "const": "subscribed",
            "type": "string"
          }
        },
        "required": [
          "type"
        ],
        "title": "TeamStateSubscriptionSubscribed",
        "type": "object"
      },
      "TeamStateSubscriptionTrial": {
        "properties": {
          "trialUntil": {
            "format": "date-time",
            "type": "string"
          },
          "type": {
            "const": "trial",
            "type": "string"
          }
        },
        "required": [
          "trialUntil",
          "type"
        ],
        "title": "TeamStateSubscriptionTrial",
        "type": "object"
      },
      "TeamStateWorkspaces": {
        "properties": {
          "total": {
            "type": "integer"
          }
        },
        "required": [
          "total"
        ],
        "title": "TeamStateWorkspaces",
        "type": "object"
      },
      "Template": {
        "properties": {
          "abstract": {
            "type": "string"
          },
          "apps": {
            "items": {
              "$ref": "#/components/schemas/TemplateApp"
            },
            "type": "array"
          },
          "description": {
            "type": "string"
          },
          "featured": {
            "type": "boolean"
          },
          "id": {
            "type": "string"
          },
          "imageUrl": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "views": {
            "items": {
              "$ref": "#/components/schemas/TemplateView"
            },
            "type": "array"
          },
          "viewsSectionTitle": {
            "type": "string"
          },
          "workspacesCount": {
            "format": "int32",
            "type": "integer"
          }
        },
        "required": [
          "id",
          "name",
          "featured",
          "abstract",
          "description",
          "viewsSectionTitle",
          "workspacesCount",
          "apps",
          "views"
        ],
        "title": "Template",
        "type": "object"
      },
      "TemplateApp": {
        "properties": {
          "description": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "typeId": {
            "type": "string"
          }
        },
        "required": [
          "typeId",
          "name"
        ],
        "title": "TemplateApp",
        "type": "object"
      },
      "TemplateCategory": {
        "properties": {
          "name": {
            "type": "string"
          },
          "slug": {
            "type": "string"
          },
          "templateIds": {
            "items": {
              "type": "string"
            },
            "type": "array"
          }
        },
        "required": [
          "slug",
          "name",
          "templateIds"
        ],
        "title": "TemplateCategory",
        "type": "object"
      },
      "TemplatePageWithEmbed": {
        "properties": {
          "_embedded": {
            "$ref": "#/components/schemas/TemplateSearchEmbed"
          },
          "items": {
            "items": {
              "$ref": "#/components/schemas/Template"
            },
            "type": "array"
          },
          "totalItems": {
            "format": "int32",
            "type": "integer"
          }
        },
        "required": [
          "items",
          "_embedded",
          "totalItems"
        ],
        "title": "TemplatePageWithEmbed",
        "type": "object"
      },
      "TemplateParameters": {
        "properties": {
          "insightsTargetWorkspaceId": {
            "format": "uuid",
            "type": "string"
          }
        },
        "title": "TemplateParameters",
        "type": "object"
      },
      "TemplateSearchEmbed": {
        "properties": {
          "categories": {
            "items": {
              "$ref": "#/components/schemas/TemplateCategory"
            },
            "type": "array"
          }
        },
        "required": [
          "categories"
        ],
        "title": "TemplateSearchEmbed",
        "type": "object"
      },
      "TemplateView": {
        "properties": {
          "description": {
            "type": "string"
          },
          "iconName": {
            "type": "string"
          },
          "imageUrl": {
            "type": "string"
          },
          "name": {
            "type": "string"
          }
        },
        "required": [
          "name",
          "imageUrl"
        ],
        "title": "TemplateView",
        "type": "object"
      },
      "TextFieldWithFieldEmbed": {
        "properties": {
          "_embedded": {
            "$ref": "#/components/schemas/FieldEmbed"
          },
          "createdAt": {
            "format": "date-time",
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "id": {
            "format": "uuid",
            "type": "string"
          },
          "isTeamField": {
            "type": "boolean"
          },
          "name": {
            "type": "string"
          },
          "required": {
            "type": "boolean"
          },
          "teamId": {
            "format": "uuid",
            "type": "string"
          },
          "typeId": {
            "const": "text",
            "type": "string"
          }
        },
        "required": [
          "id",
          "typeId",
          "name",
          "description",
          "isTeamField",
          "teamId",
          "createdAt",
          "required",
          "_embedded"
        ],
        "title": "TextFieldWithFieldEmbed",
        "type": "object"
      },
      "TimePeriod": {
        "properties": {
          "endDate": {
            "format": "date",
            "type": "string"
          },
          "id": {
            "format": "uuid",
            "type": "string"
          },
          "label": {
            "type": "string"
          },
          "startDate": {
            "format": "date",
            "type": "string"
          }
        },
        "required": [
          "id",
          "label",
          "startDate",
          "endDate"
        ],
        "title": "TimePeriod",
        "type": "object"
      },
      "TimePeriodFieldSettings": {
        "discriminator": {
          "mapping": {
            "iterations": "#/components/schemas/TimePeriodFieldSettingsIterations",
            "simple": "#/components/schemas/TimePeriodFieldSettingsSimple"
          },
          "propertyName": "type"
        },
        "oneOf": [
          {
            "$ref": "#/components/schemas/TimePeriodFieldSettingsIterations"
          },
          {
            "$ref": "#/components/schemas/TimePeriodFieldSettingsSimple"
          }
        ],
        "title": "TimePeriodFieldSettings"
      },
      "TimePeriodFieldSettingsIterations": {
        "properties": {
          "currentId": {
            "format": "uuid",
            "type": "string"
          },
          "multi": {
            "type": "boolean"
          },
          "timePeriods": {
            "items": {
              "$ref": "#/components/schemas/TimePeriod"
            },
            "type": "array"
          },
          "type": {
            "const": "iterations",
            "type": "string"
          }
        },
        "required": [
          "timePeriods",
          "currentId",
          "multi",
          "type"
        ],
        "title": "TimePeriodFieldSettingsIterations",
        "type": "object"
      },
      "TimePeriodFieldSettingsSimple": {
        "properties": {
          "multi": {
            "type": "boolean"
          },
          "timePeriods": {
            "items": {
              "$ref": "#/components/schemas/TimePeriod"
            },
            "type": "array"
          },
          "type": {
            "const": "simple",
            "type": "string"
          }
        },
        "required": [
          "timePeriods",
          "multi",
          "type"
        ],
        "title": "TimePeriodFieldSettingsSimple",
        "type": "object"
      },
      "TimePeriodFieldWithFieldEmbed": {
        "properties": {
          "_embedded": {
            "$ref": "#/components/schemas/FieldEmbed"
          },
          "createdAt": {
            "format": "date-time",
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "id": {
            "format": "uuid",
            "type": "string"
          },
          "isTeamField": {
            "type": "boolean"
          },
          "name": {
            "type": "string"
          },
          "required": {
            "type": "boolean"
          },
          "settings": {
            "$ref": "#/components/schemas/TimePeriodFieldSettings"
          },
          "teamId": {
            "format": "uuid",
            "type": "string"
          },
          "typeId": {
            "const": "time-period",
            "type": "string"
          }
        },
        "required": [
          "id",
          "typeId",
          "settings",
          "name",
          "description",
          "isTeamField",
          "teamId",
          "createdAt",
          "required",
          "_embedded"
        ],
        "title": "TimePeriodFieldWithFieldEmbed",
        "type": "object"
      },
      "UpdateItemLinkRequest": {
        "properties": {
          "fromItemId": {
            "format": "uuid",
            "type": "string"
          },
          "fromOrder": {
            "description": "How this item-link is ordered in the list of links of the \"fromItem\".",
            "format": "int32",
            "type": "integer"
          },
          "toItemId": {
            "format": "uuid",
            "type": "string"
          },
          "toOrder": {
            "description": "How this item-link is ordered in the list of links of the \"toItem\".",
            "format": "int32",
            "type": "integer"
          },
          "type": {
            "$ref": "#/components/schemas/ItemLinkType"
          },
          "typeId": {
            "format": "uuid",
            "type": "string"
          }
        },
        "required": [
          "fromItemId",
          "toItemId",
          "type",
          "fromOrder",
          "toOrder"
        ],
        "title": "UpdateItemLinkRequest",
        "type": "object"
      },
      "UpdateItemRequest": {
        "properties": {
          "archived": {
            "default": false,
            "description": "Whether this item is archived.",
            "type": "boolean"
          },
          "assigneeUserGroupIds": {
            "description": "Ids of user groups that are assigned to this item.",
            "items": {
              "format": "uuid",
              "type": "string"
            },
            "type": "array"
          },
          "assigneeUserIds": {
            "description": "Ids of users who are assigned to this item.",
            "items": {
              "format": "uuid",
              "type": "string"
            },
            "type": "array"
          },
          "color": {
            "$ref": "#/components/schemas/ItemColor",
            "description": "Color of this item."
          },
          "description": {
            "$ref": "#/components/schemas/RichText",
            "description": "Rich text content as structured blocks. Different media types provide markdown support:\n• application/json - Default blocks format\n• application/vnd.airfocus.markdown+json - All RichText fields become markdown strings (recommended)\n• application/json+markdown - Legacy format, only top-level fields converted to markdown"
          },
          "fields": {
            "additionalProperties": {},
            "description": "Values of custom fields, where each key is a custom-field ID and each value is a JSON-formatted value of the corresponding field.",
            "examples": [
              {
                "0fc3cfbc-27e9-3ea6-8a78-7de13dae3e3c": {
                  "number": 42
                },
                "34f05b62-dd43-3e1e-82bc-b0acabd0d004": {
                  "boolean": true
                },
                "5396681e-ea50-3d63-9ae3-c9f8ca17b7d8": {
                  "userGroupIds": [
                    "70e2b87a-b774-3022-9ef0-e55031a1c4fb"
                  ],
                  "userIds": [
                    "24c9e15e-52af-347c-a25b-757e7bee1f9d"
                  ]
                },
                "75fe57ec-4a04-3a30-8cac-5f27223df81a": {
                  "dateRange": {
                    "endDate": "2024-02-14",
                    "startDate": "2024-01-14",
                    "timezone": "UTC"
                  }
                },
                "8be74552-df93-331b-bdd6-b36ed74bdb6a": {
                  "selection": [
                    "2bb225ce-b5ee-3493-967c-fde0d72da242"
                  ]
                },
                "c7824f3d-4d5f-3b2f-a2d0-34758c1e9454": {
                  "text": "A platform built for the new way of doing product management"
                },
                "e34d514f-7db5-38aa-872a-7c8191a09617": {
                  "date": {
                    "date": "2024-01-01",
                    "timezone": "UTC"
                  }
                }
              }
            ],
            "type": "object"
          },
          "name": {
            "description": "Name (title) of this item.",
            "type": "string"
          },
          "order": {
            "description": "A order number of this item for sorting.",
            "format": "int32",
            "type": "integer"
          },
          "statusId": {
            "description": "Id of the status of this item.",
            "format": "uuid",
            "type": "string"
          }
        },
        "required": [
          "statusId",
          "color",
          "name",
          "description",
          "assigneeUserIds",
          "assigneeUserGroupIds",
          "fields",
          "order"
        ],
        "title": "UpdateItemRequest",
        "type": "object"
      },
      "UpdateItemRequestWithMD": {
        "description": "Item with Markdown string description.",
        "properties": {
          "archived": {
            "default": false,
            "description": "Whether this item is archived.",
            "type": "boolean"
          },
          "assigneeUserGroupIds": {
            "description": "Ids of user groups that are assigned to this item.",
            "items": {
              "format": "uuid",
              "type": "string"
            },
            "type": "array"
          },
          "assigneeUserIds": {
            "description": "Ids of users who are assigned to this item.",
            "items": {
              "format": "uuid",
              "type": "string"
            },
            "type": "array"
          },
          "color": {
            "$ref": "#/components/schemas/ItemColor",
            "description": "Color of this item."
          },
          "description": {
            "description": "Rich text content as a markdown string (used with markdown media types)",
            "examples": [
              "hello **world**!"
            ],
            "type": "string"
          },
          "fields": {
            "additionalProperties": {},
            "description": "Values of custom fields, where each key is a custom-field ID and each value is a JSON-formatted value of the corresponding field.",
            "examples": [
              {
                "0fc3cfbc-27e9-3ea6-8a78-7de13dae3e3c": {
                  "number": 42
                },
                "34f05b62-dd43-3e1e-82bc-b0acabd0d004": {
                  "boolean": true
                },
                "5396681e-ea50-3d63-9ae3-c9f8ca17b7d8": {
                  "userGroupIds": [
                    "70e2b87a-b774-3022-9ef0-e55031a1c4fb"
                  ],
                  "userIds": [
                    "24c9e15e-52af-347c-a25b-757e7bee1f9d"
                  ]
                },
                "75fe57ec-4a04-3a30-8cac-5f27223df81a": {
                  "dateRange": {
                    "endDate": "2024-02-14",
                    "startDate": "2024-01-14",
                    "timezone": "UTC"
                  }
                },
                "8be74552-df93-331b-bdd6-b36ed74bdb6a": {
                  "selection": [
                    "2bb225ce-b5ee-3493-967c-fde0d72da242"
                  ]
                },
                "c7824f3d-4d5f-3b2f-a2d0-34758c1e9454": {
                  "text": "A platform built for the new way of doing product management"
                },
                "e34d514f-7db5-38aa-872a-7c8191a09617": {
                  "date": {
                    "date": "2024-01-01",
                    "timezone": "UTC"
                  }
                }
              }
            ],
            "type": "object"
          },
          "name": {
            "description": "Name (title) of this item.",
            "type": "string"
          },
          "order": {
            "description": "A order number of this item for sorting.",
            "format": "int32",
            "type": "integer"
          },
          "statusId": {
            "description": "Id of the status of this item.",
            "format": "uuid",
            "type": "string"
          }
        },
        "required": [
          "statusId",
          "color",
          "name",
          "description",
          "assigneeUserIds",
          "assigneeUserGroupIds",
          "fields",
          "order"
        ],
        "title": "UpdateItemRequestWithMD",
        "type": "object"
      },
      "UpdateMilestoneRequest": {
        "properties": {
          "date": {
            "format": "date",
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "timezone": {
            "type": "string"
          }
        },
        "required": [
          "name",
          "description",
          "date"
        ],
        "title": "UpdateMilestoneRequest",
        "type": "object"
      },
      "UpdateTeamFlagsRequest": {
        "properties": {
          "enableAi": {
            "type": "boolean"
          },
          "enableOkrApp": {
            "type": "boolean"
          },
          "forbidShareLinkCreation": {
            "type": "boolean"
          },
          "removeBranding": {
            "type": "boolean"
          },
          "requirePortalLogin": {
            "type": "boolean"
          },
          "requirePortalPassword": {
            "type": "boolean"
          },
          "requireShareLinkPassword": {
            "type": "boolean"
          },
          "restrictShareLinkCreation": {
            "type": "boolean"
          }
        },
        "title": "UpdateTeamFlagsRequest",
        "type": "object"
      },
      "UpdateUserRequest": {
        "properties": {
          "avatarAttachmentId": {
            "format": "uuid",
            "type": "string"
          },
          "email": {
            "type": "string"
          },
          "fullName": {
            "type": "string"
          }
        },
        "required": [
          "email",
          "fullName"
        ],
        "title": "UpdateUserRequest",
        "type": "object"
      },
      "UpdateWorkspaceRequest": {
        "properties": {
          "alias": {
            "description": "A custom code of this workspace (e.g. PROD, DEV, etc), which is used to create aliases for items (e.g. DEV-123). Alias should consist of 1-10 uppercase letters, and should be unique within the team.",
            "type": "string"
          },
          "defaultPermission": {
            "$ref": "#/components/schemas/Permission",
            "description": "Default permission for all the team members in this workspace. Note: the final permission can be adjusted corresponding to each user's role, e.g. contributors can't have more than Comment permission."
          },
          "description": {
            "$ref": "#/components/schemas/RichText",
            "description": "Description of this workspace."
          },
          "itemColor": {
            "$ref": "#/components/schemas/ItemColor",
            "description": "Default color applied to newly created items in this workspace. If not defined - a random color will be assigned to each new item."
          },
          "itemType": {
            "$ref": "#/components/schemas/ItemType",
            "description": "Type of items in this workspace."
          },
          "name": {
            "description": "Name of this workspace.",
            "type": "string"
          },
          "order": {
            "description": "Order number of this workspace for sorting.",
            "format": "int32",
            "type": "integer"
          },
          "progressMode": {
            "$ref": "#/components/schemas/WorkspaceProgressMode",
            "default": "count"
          }
        },
        "required": [
          "name",
          "description",
          "order"
        ],
        "title": "UpdateWorkspaceRequest",
        "type": "object"
      },
      "UpdateWorkspaceRequestWithMD": {
        "description": "Workspace with Markdown string description.",
        "properties": {
          "alias": {
            "description": "A custom code of this workspace (e.g. PROD, DEV, etc), which is used to create aliases for items (e.g. DEV-123). Alias should consist of 1-10 uppercase letters, and should be unique within the team.",
            "type": "string"
          },
          "defaultPermission": {
            "$ref": "#/components/schemas/Permission",
            "description": "Default permission for all the team members in this workspace. Note: the final permission can be adjusted corresponding to each user's role, e.g. contributors can't have more than Comment permission."
          },
          "description": {
            "description": "Rich text content as a markdown string (used with markdown media types)",
            "examples": [
              "hello **world**!"
            ],
            "type": "string"
          },
          "itemColor": {
            "$ref": "#/components/schemas/ItemColor",
            "description": "Default color applied to newly created items in this workspace. If not defined - a random color will be assigned to each new item."
          },
          "itemType": {
            "$ref": "#/components/schemas/ItemType",
            "description": "Type of items in this workspace."
          },
          "name": {
            "description": "Name of this workspace.",
            "type": "string"
          },
          "order": {
            "description": "Order number of this workspace for sorting.",
            "format": "int32",
            "type": "integer"
          },
          "progressMode": {
            "$ref": "#/components/schemas/WorkspaceProgressMode",
            "default": "count"
          }
        },
        "required": [
          "name",
          "description",
          "order"
        ],
        "title": "UpdateWorkspaceRequestWithMD",
        "type": "object"
      },
      "User": {
        "properties": {
          "avatarAttachmentId": {
            "format": "uuid",
            "type": "string"
          },
          "createdAt": {
            "format": "date-time",
            "type": "string"
          },
          "disabled": {
            "type": "boolean"
          },
          "email": {
            "type": "string"
          },
          "emailVerified": {
            "type": "boolean"
          },
          "fullName": {
            "type": "string"
          },
          "isTeamCreator": {
            "type": "boolean"
          },
          "lastSeenAt": {
            "format": "date-time",
            "type": "string"
          },
          "role": {
            "$ref": "#/components/schemas/Role"
          },
          "state": {
            "$ref": "#/components/schemas/UserState"
          },
          "teamId": {
            "format": "uuid",
            "type": "string"
          },
          "updatedAt": {
            "format": "date-time",
            "type": "string"
          },
          "userId": {
            "format": "uuid",
            "type": "string"
          }
        },
        "required": [
          "userId",
          "teamId",
          "email",
          "fullName",
          "role",
          "state",
          "isTeamCreator",
          "disabled",
          "emailVerified",
          "createdAt",
          "updatedAt"
        ],
        "title": "User",
        "type": "object"
      },
      "UserRef": {
        "discriminator": {
          "mapping": {
            "current": "#/components/schemas/UserRefUserRefCurrent",
            "groupId": "#/components/schemas/UserRefUserGroupRefId",
            "id": "#/components/schemas/UserRefUserRefId"
          },
          "propertyName": "type"
        },
        "oneOf": [
          {
            "$ref": "#/components/schemas/UserRefUserGroupRefId"
          },
          {
            "$ref": "#/components/schemas/UserRefUserRefCurrent"
          },
          {
            "$ref": "#/components/schemas/UserRefUserRefId"
          }
        ],
        "title": "UserRef"
      },
      "UserRefUserGroupRefId": {
        "properties": {
          "id": {
            "format": "uuid",
            "type": "string"
          },
          "type": {
            "const": "groupId",
            "type": "string"
          }
        },
        "required": [
          "id",
          "type"
        ],
        "title": "UserRefUserGroupRefId",
        "type": "object"
      },
      "UserRefUserRefCurrent": {
        "properties": {
          "type": {
            "const": "current",
            "type": "string"
          }
        },
        "required": [
          "type"
        ],
        "title": "UserRefUserRefCurrent",
        "type": "object"
      },
      "UserRefUserRefId": {
        "properties": {
          "id": {
            "format": "uuid",
            "type": "string"
          },
          "type": {
            "const": "id",
            "type": "string"
          }
        },
        "required": [
          "id",
          "type"
        ],
        "title": "UserRefUserRefId",
        "type": "object"
      },
      "UserState": {
        "properties": {
          "pending": {
            "type": "boolean"
          },
          "unseated": {
            "type": "boolean"
          }
        },
        "required": [
          "unseated",
          "pending"
        ],
        "title": "UserState",
        "type": "object"
      },
      "ViewEmbed": {
        "properties": {
          "currentPermission": {
            "$ref": "#/components/schemas/ViewPermission"
          },
          "userGroupPermissions": {
            "additionalProperties": {
              "$ref": "#/components/schemas/ViewPermission"
            },
            "type": "object"
          },
          "userPermissions": {
            "additionalProperties": {
              "$ref": "#/components/schemas/ViewPermission"
            },
            "type": "object"
          }
        },
        "required": [
          "userPermissions",
          "userGroupPermissions",
          "currentPermission"
        ],
        "title": "ViewEmbed",
        "type": "object"
      },
      "ViewPermission": {
        "enum": [
          "manage",
          "view"
        ],
        "title": "ViewPermission",
        "type": "string"
      },
      "ViewWithViewEmbed": {
        "properties": {
          "_embedded": {
            "$ref": "#/components/schemas/ViewEmbed"
          },
          "description": {
            "type": "string"
          },
          "id": {
            "format": "uuid",
            "type": "string"
          },
          "isPrivate": {
            "type": "boolean"
          },
          "itemFilter": {
            "$ref": "#/components/schemas/ItemSearchQueryFilter"
          },
          "itemSort": {
            "items": {
              "$ref": "#/components/schemas/ItemSearchQuerySort"
            },
            "type": "array"
          },
          "name": {
            "type": "string"
          },
          "order": {
            "format": "int32",
            "type": "integer"
          },
          "pinnedToPosition": {
            "format": "int32",
            "type": "integer"
          },
          "settings": {},
          "typeId": {
            "type": "string"
          },
          "workspaceId": {
            "format": "uuid",
            "type": "string"
          }
        },
        "required": [
          "id",
          "workspaceId",
          "typeId",
          "settings",
          "name",
          "description",
          "itemSort",
          "order",
          "isPrivate",
          "_embedded"
        ],
        "title": "ViewWithViewEmbed",
        "type": "object"
      },
      "VotesFieldWithFieldEmbed": {
        "properties": {
          "_embedded": {
            "$ref": "#/components/schemas/FieldEmbed"
          },
          "createdAt": {
            "format": "date-time",
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "id": {
            "format": "uuid",
            "type": "string"
          },
          "isTeamField": {
            "type": "boolean"
          },
          "name": {
            "type": "string"
          },
          "required": {
            "type": "boolean"
          },
          "teamId": {
            "format": "uuid",
            "type": "string"
          },
          "typeId": {
            "const": "votes",
            "type": "string"
          }
        },
        "required": [
          "id",
          "typeId",
          "name",
          "description",
          "isTeamField",
          "teamId",
          "createdAt",
          "required",
          "_embedded"
        ],
        "title": "VotesFieldWithFieldEmbed",
        "type": "object"
      },
      "VotingApp": {
        "properties": {
          "id": {
            "format": "uuid",
            "type": "string"
          },
          "settings": {
            "$ref": "#/components/schemas/VotingAppTypeSettings"
          },
          "teamId": {
            "format": "uuid",
            "type": "string"
          },
          "typeId": {
            "const": "voting",
            "type": "string"
          }
        },
        "required": [
          "id",
          "teamId",
          "typeId",
          "settings"
        ],
        "title": "VotingApp",
        "type": "object"
      },
      "VotingAppAudience": {
        "discriminator": {
          "mapping": {
            "anonymousUsers": "#/components/schemas/VotingAppAudienceAnonymousUsers",
            "teamMembers": "#/components/schemas/VotingAppAudienceTeamMembers"
          },
          "propertyName": "type"
        },
        "oneOf": [
          {
            "$ref": "#/components/schemas/VotingAppAudienceAnonymousUsers"
          },
          {
            "$ref": "#/components/schemas/VotingAppAudienceTeamMembers"
          }
        ],
        "title": "VotingAppAudience"
      },
      "VotingAppAudienceAnonymousUsers": {
        "properties": {
          "type": {
            "const": "anonymousUsers",
            "type": "string"
          }
        },
        "required": [
          "type"
        ],
        "title": "VotingAppAudienceAnonymousUsers",
        "type": "object"
      },
      "VotingAppAudienceTeamMembers": {
        "properties": {
          "type": {
            "const": "teamMembers",
            "type": "string"
          }
        },
        "required": [
          "type"
        ],
        "title": "VotingAppAudienceTeamMembers",
        "type": "object"
      },
      "VotingAppReactionType": {
        "properties": {
          "id": {
            "format": "uuid",
            "type": "string"
          },
          "title": {
            "type": "string"
          },
          "weight": {
            "type": "number"
          }
        },
        "required": [
          "id",
          "title",
          "weight"
        ],
        "title": "VotingAppReactionType",
        "type": "object"
      },
      "VotingAppScoreFieldTypeSettings": {
        "properties": {
          "maximum": {
            "type": "number"
          },
          "minimum": {
            "type": "number"
          }
        },
        "title": "VotingAppScoreFieldTypeSettings",
        "type": "object"
      },
      "VotingAppTypeSettings": {
        "properties": {
          "allowedReactions": {
            "items": {
              "$ref": "#/components/schemas/VotingAppReactionType"
            },
            "type": "array"
          },
          "audience": {
            "items": {
              "$ref": "#/components/schemas/VotingAppAudience"
            },
            "type": "array"
          },
          "scoreFieldId": {
            "format": "uuid",
            "type": "string"
          },
          "showCountsForPublic": {
            "type": "boolean"
          },
          "votesFieldId": {
            "format": "uuid",
            "type": "string"
          },
          "workspaceId": {
            "format": "uuid",
            "type": "string"
          }
        },
        "required": [
          "workspaceId",
          "votesFieldId",
          "scoreFieldId",
          "allowedReactions",
          "audience",
          "showCountsForPublic"
        ],
        "title": "VotingAppTypeSettings",
        "type": "object"
      },
      "VotingScoreFieldWithFieldEmbed": {
        "properties": {
          "_embedded": {
            "$ref": "#/components/schemas/FieldEmbed"
          },
          "createdAt": {
            "format": "date-time",
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "id": {
            "format": "uuid",
            "type": "string"
          },
          "isTeamField": {
            "type": "boolean"
          },
          "name": {
            "type": "string"
          },
          "required": {
            "type": "boolean"
          },
          "settings": {
            "$ref": "#/components/schemas/VotingAppScoreFieldTypeSettings"
          },
          "teamId": {
            "format": "uuid",
            "type": "string"
          },
          "typeId": {
            "const": "votingScore",
            "type": "string"
          }
        },
        "required": [
          "id",
          "typeId",
          "settings",
          "name",
          "description",
          "isTeamField",
          "teamId",
          "createdAt",
          "required",
          "_embedded"
        ],
        "title": "VotingScoreFieldWithFieldEmbed",
        "type": "object"
      },
      "Workspace": {
        "properties": {
          "alias": {
            "description": "A custom code of this workspace (e.g. PROD, DEV, etc), which is used to create aliases for items (e.g. DEV-123). Alias should consist of 1-10 uppercase letters, and should be unique within the team.",
            "type": "string"
          },
          "createdAt": {
            "description": "Timestamp of when this workspace was created.",
            "format": "date-time",
            "type": "string"
          },
          "defaultPermission": {
            "$ref": "#/components/schemas/Permission",
            "description": "Default permission for all the team members in this workspace. Note: the final permission can be adjusted corresponding to each user's role, e.g. contributors can't have more than Comment permission."
          },
          "description": {
            "$ref": "#/components/schemas/RichText",
            "description": "Description of this workspace."
          },
          "id": {
            "description": "Unique identifier of this workspace.",
            "format": "uuid",
            "type": "string"
          },
          "itemColor": {
            "$ref": "#/components/schemas/ItemColor",
            "description": "Default color applied to newly created items in this workspace. If not defined - a random color will be assigned to each new item."
          },
          "itemType": {
            "$ref": "#/components/schemas/ItemType",
            "description": "Type of items in this workspace."
          },
          "lastUpdatedAt": {
            "description": "Timestamp of when this workspace was last updated.",
            "format": "date-time",
            "type": "string"
          },
          "metadata": {
            "$ref": "#/components/schemas/WorkspaceWorkspaceMetadata"
          },
          "name": {
            "description": "Name of this workspace.",
            "type": "string"
          },
          "namespace": {
            "$ref": "#/components/schemas/WorkspaceNamespace",
            "description": "The system namespace of this workspace."
          },
          "order": {
            "description": "Order number of this workspace for sorting.",
            "format": "int32",
            "type": "integer"
          },
          "progressMode": {
            "$ref": "#/components/schemas/WorkspaceProgressMode"
          },
          "teamId": {
            "description": "Id of the team this workspace belongs to.",
            "format": "uuid",
            "type": "string"
          }
        },
        "required": [
          "id",
          "teamId",
          "name",
          "description",
          "progressMode",
          "createdAt",
          "lastUpdatedAt",
          "namespace",
          "order"
        ],
        "title": "Workspace",
        "type": "object"
      },
      "WorkspaceBulkAction": {
        "discriminator": {
          "mapping": {
            "create": "#/components/schemas/WorkspaceBulkCreate",
            "delete": "#/components/schemas/WorkspaceBulkDelete",
            "patch": "#/components/schemas/WorkspaceBulkPatch",
            "update": "#/components/schemas/WorkspaceBulkUpdate"
          },
          "propertyName": "type"
        },
        "oneOf": [
          {
            "$ref": "#/components/schemas/WorkspaceBulkCreate"
          },
          {
            "$ref": "#/components/schemas/WorkspaceBulkDelete"
          },
          {
            "$ref": "#/components/schemas/WorkspaceBulkPatch"
          },
          {
            "$ref": "#/components/schemas/WorkspaceBulkUpdate"
          }
        ],
        "title": "WorkspaceBulkAction"
      },
      "WorkspaceBulkCreate": {
        "properties": {
          "resource": {
            "$ref": "#/components/schemas/CreateWorkspaceRequest"
          },
          "type": {
            "enum": [
              "create"
            ],
            "type": "string"
          }
        },
        "required": [
          "resource",
          "type"
        ],
        "title": "WorkspaceBulkCreate",
        "type": "object"
      },
      "WorkspaceBulkDelete": {
        "properties": {
          "id": {
            "format": "uuid",
            "type": "string"
          },
          "type": {
            "enum": [
              "delete"
            ],
            "type": "string"
          }
        },
        "required": [
          "id",
          "type"
        ],
        "title": "WorkspaceBulkDelete",
        "type": "object"
      },
      "WorkspaceBulkPatch": {
        "properties": {
          "id": {
            "format": "uuid",
            "type": "string"
          },
          "transform": {
            "$ref": "#/components/schemas/JsonPatch"
          },
          "type": {
            "enum": [
              "patch"
            ],
            "type": "string"
          }
        },
        "required": [
          "id",
          "transform",
          "type"
        ],
        "title": "WorkspaceBulkPatch",
        "type": "object"
      },
      "WorkspaceBulkUpdate": {
        "properties": {
          "id": {
            "format": "uuid",
            "type": "string"
          },
          "resource": {
            "$ref": "#/components/schemas/UpdateWorkspaceRequest"
          },
          "type": {
            "enum": [
              "update"
            ],
            "type": "string"
          }
        },
        "required": [
          "id",
          "resource",
          "type"
        ],
        "title": "WorkspaceBulkUpdate",
        "type": "object"
      },
      "WorkspaceDuplicateRequest": {
        "properties": {
          "duplicatePermissions": {
            "description": "Whether to also duplicate all user-permissions to the new workspace.",
            "type": "boolean"
          }
        },
        "required": [
          "duplicatePermissions"
        ],
        "title": "WorkspaceDuplicateRequest",
        "type": "object"
      },
      "WorkspaceEmbed": {
        "properties": {
          "apps": {
            "additionalProperties": {
              "$ref": "#/components/schemas/App"
            },
            "type": "object"
          },
          "children": {
            "items": {
              "$ref": "#/components/schemas/WorkspaceEmbedRelation"
            },
            "type": "array"
          },
          "currentPermission": {
            "$ref": "#/components/schemas/Permission"
          },
          "fields": {
            "additionalProperties": {
              "$ref": "#/components/schemas/FieldWithFieldEmbed"
            },
            "type": "object"
          },
          "integrations": {
            "additionalProperties": {
              "$ref": "#/components/schemas/IntegrationSummary"
            },
            "type": "object"
          },
          "itemCount": {
            "format": "int32",
            "type": "integer"
          },
          "itemStatusCount": {
            "additionalProperties": {
              "format": "int32",
              "type": "integer"
            },
            "type": "object"
          },
          "itemStatusCountArchived": {
            "additionalProperties": {
              "format": "int32",
              "type": "integer"
            },
            "type": "object"
          },
          "parents": {
            "items": {
              "$ref": "#/components/schemas/WorkspaceEmbedRelation"
            },
            "type": "array"
          },
          "permissions": {
            "additionalProperties": {
              "$ref": "#/components/schemas/Permission"
            },
            "type": "object"
          },
          "statuses": {
            "additionalProperties": {
              "$ref": "#/components/schemas/Status"
            },
            "type": "object"
          },
          "userGroupPermissions": {
            "additionalProperties": {
              "$ref": "#/components/schemas/Permission"
            },
            "type": "object"
          },
          "views": {
            "additionalProperties": {
              "$ref": "#/components/schemas/ViewWithViewEmbed"
            },
            "type": "object"
          },
          "workspaceGroup": {
            "$ref": "#/components/schemas/WorkspaceEmbedWorkspaceGroup"
          }
        },
        "required": [
          "parents",
          "children",
          "permissions",
          "userGroupPermissions",
          "itemCount",
          "statuses",
          "itemStatusCount",
          "itemStatusCountArchived",
          "fields",
          "views",
          "integrations",
          "apps"
        ],
        "title": "WorkspaceEmbed",
        "type": "object"
      },
      "WorkspaceEmbedRelation": {
        "properties": {
          "relationId": {
            "format": "uuid",
            "type": "string"
          },
          "workspace": {
            "$ref": "#/components/schemas/Workspace"
          },
          "workspaceId": {
            "format": "uuid",
            "type": "string"
          }
        },
        "required": [
          "relationId",
          "workspaceId"
        ],
        "title": "WorkspaceEmbedRelation",
        "type": "object"
      },
      "WorkspaceEmbedWorkspaceGroup": {
        "properties": {
          "id": {
            "format": "uuid",
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "order": {
            "format": "int32",
            "type": "integer"
          },
          "parentId": {
            "format": "uuid",
            "type": "string"
          }
        },
        "required": [
          "id",
          "name",
          "order"
        ],
        "title": "WorkspaceEmbedWorkspaceGroup",
        "type": "object"
      },
      "WorkspaceGroup": {
        "description": "An entity for grouping workspaces (like folders).",
        "properties": {
          "createdAt": {
            "description": "Date-time when this group was created.",
            "format": "date-time",
            "type": "string"
          },
          "defaultPermission": {
            "$ref": "#/components/schemas/Permission",
            "description": "Default permission for all team-members to all the inner contents of this group."
          },
          "id": {
            "description": "UUID of this group.",
            "format": "uuid",
            "type": "string"
          },
          "lastUpdatedAt": {
            "description": "Date-time when this group was last updated.",
            "format": "date-time",
            "type": "string"
          },
          "name": {
            "description": "Name of this group.",
            "type": "string"
          },
          "order": {
            "description": "Order number of this group for sorting.",
            "format": "int32",
            "type": "integer"
          },
          "parentId": {
            "description": "UUID of the parent group (if applicable).",
            "format": "uuid",
            "type": "string"
          },
          "teamId": {
            "description": "UUID of the team which owns this group.",
            "format": "uuid",
            "type": "string"
          }
        },
        "required": [
          "id",
          "teamId",
          "name",
          "order",
          "createdAt",
          "lastUpdatedAt"
        ],
        "title": "WorkspaceGroup",
        "type": "object"
      },
      "WorkspaceGroupAssignWorkspaceRequest": {
        "properties": {
          "workspaceGroupId": {
            "format": "uuid",
            "type": "string"
          },
          "workspaceId": {
            "format": "uuid",
            "type": "string"
          }
        },
        "required": [
          "workspaceId"
        ],
        "title": "WorkspaceGroupAssignWorkspaceRequest",
        "type": "object"
      },
      "WorkspaceGroupBulkAction": {
        "discriminator": {
          "mapping": {
            "create": "#/components/schemas/WorkspaceGroupBulkCreate",
            "delete": "#/components/schemas/WorkspaceGroupBulkDelete",
            "patch": "#/components/schemas/WorkspaceGroupBulkPatch",
            "update": "#/components/schemas/WorkspaceGroupBulkUpdate"
          },
          "propertyName": "type"
        },
        "oneOf": [
          {
            "$ref": "#/components/schemas/WorkspaceGroupBulkCreate"
          },
          {
            "$ref": "#/components/schemas/WorkspaceGroupBulkDelete"
          },
          {
            "$ref": "#/components/schemas/WorkspaceGroupBulkPatch"
          },
          {
            "$ref": "#/components/schemas/WorkspaceGroupBulkUpdate"
          }
        ],
        "title": "WorkspaceGroupBulkAction"
      },
      "WorkspaceGroupBulkCreate": {
        "properties": {
          "resource": {
            "$ref": "#/components/schemas/WorkspaceGroup"
          },
          "type": {
            "enum": [
              "create"
            ],
            "type": "string"
          }
        },
        "required": [
          "resource",
          "type"
        ],
        "title": "WorkspaceGroupBulkCreate",
        "type": "object"
      },
      "WorkspaceGroupBulkDelete": {
        "properties": {
          "id": {
            "format": "uuid",
            "type": "string"
          },
          "type": {
            "enum": [
              "delete"
            ],
            "type": "string"
          }
        },
        "required": [
          "id",
          "type"
        ],
        "title": "WorkspaceGroupBulkDelete",
        "type": "object"
      },
      "WorkspaceGroupBulkPatch": {
        "properties": {
          "id": {
            "format": "uuid",
            "type": "string"
          },
          "transform": {
            "$ref": "#/components/schemas/JsonPatch"
          },
          "type": {
            "enum": [
              "patch"
            ],
            "type": "string"
          }
        },
        "required": [
          "id",
          "transform",
          "type"
        ],
        "title": "WorkspaceGroupBulkPatch",
        "type": "object"
      },
      "WorkspaceGroupBulkUpdate": {
        "properties": {
          "id": {
            "format": "uuid",
            "type": "string"
          },
          "resource": {
            "$ref": "#/components/schemas/WorkspaceGroup"
          },
          "type": {
            "enum": [
              "update"
            ],
            "type": "string"
          }
        },
        "required": [
          "id",
          "resource",
          "type"
        ],
        "title": "WorkspaceGroupBulkUpdate",
        "type": "object"
      },
      "WorkspaceGroupEmbed": {
        "description": "An object embedded into each workspace-group when retrieving/listing specific workspaces.",
        "properties": {
          "currentPermission": {
            "$ref": "#/components/schemas/Permission",
            "description": "Actual permission of the current user for this workspace-group."
          },
          "permissions": {
            "additionalProperties": {
              "$ref": "#/components/schemas/Permission"
            },
            "description": "All explicitly defined permissions for all users for this workspace-group.",
            "type": "object"
          },
          "userGroupPermissions": {
            "additionalProperties": {
              "$ref": "#/components/schemas/Permission"
            },
            "description": "All explicitly defined permissions for all user groups for this workspace-group.",
            "type": "object"
          },
          "workspaces": {
            "description": "List of workspaces which belongs to this workspace-group.",
            "items": {
              "$ref": "#/components/schemas/Workspace"
            },
            "type": "array"
          }
        },
        "required": [
          "workspaces",
          "permissions",
          "userGroupPermissions"
        ],
        "title": "WorkspaceGroupEmbed",
        "type": "object"
      },
      "WorkspaceGroupPermissionsUpdateRequest": {
        "properties": {
          "permissions": {
            "additionalProperties": {
              "$ref": "#/components/schemas/Permission"
            },
            "type": "object"
          },
          "userGroupPermissions": {
            "additionalProperties": {
              "$ref": "#/components/schemas/Permission"
            },
            "type": "object"
          }
        },
        "required": [
          "permissions",
          "userGroupPermissions"
        ],
        "title": "WorkspaceGroupPermissionsUpdateRequest",
        "type": "object"
      },
      "WorkspaceGroupSearchEmbed": {
        "description": "An object embedded into each workspace-group when searching workspaces.",
        "properties": {
          "currentPermission": {
            "$ref": "#/components/schemas/Permission",
            "description": "Actual permission of the current user for this workspace-group."
          },
          "permissions": {
            "additionalProperties": {
              "$ref": "#/components/schemas/Permission"
            },
            "description": "All explicitly defined permissions for all users for this workspace-group.",
            "type": "object"
          },
          "userGroupPermissions": {
            "additionalProperties": {
              "$ref": "#/components/schemas/Permission"
            },
            "description": "All explicitly defined permissions for all user groups for this workspace-group.",
            "type": "object"
          },
          "workspaceIds": {
            "description": "List of workspace-ids which belongs to this workspace-group.",
            "items": {
              "format": "uuid",
              "type": "string"
            },
            "type": "array"
          },
          "workspaces": {
            "deprecated": true,
            "description": "Deprecated and will be removed. Use 'workspaceIds' instead, and a followup workspace-search request.",
            "items": {
              "$ref": "#/components/schemas/Workspace"
            },
            "type": "array"
          }
        },
        "required": [
          "workspaceIds",
          "workspaces",
          "permissions",
          "userGroupPermissions"
        ],
        "title": "WorkspaceGroupSearchEmbed",
        "type": "object"
      },
      "WorkspaceGroupSearchQuery": {
        "title": "WorkspaceGroupSearchQuery",
        "type": "object"
      },
      "WorkspaceGroupWithWorkspaceGroupEmbed": {
        "description": "An entity for grouping workspaces (like folders).",
        "properties": {
          "_embedded": {
            "$ref": "#/components/schemas/WorkspaceGroupEmbed"
          },
          "createdAt": {
            "description": "Date-time when this group was created.",
            "format": "date-time",
            "type": "string"
          },
          "defaultPermission": {
            "$ref": "#/components/schemas/Permission",
            "description": "Default permission for all team-members to all the inner contents of this group."
          },
          "id": {
            "description": "UUID of this group.",
            "format": "uuid",
            "type": "string"
          },
          "lastUpdatedAt": {
            "description": "Date-time when this group was last updated.",
            "format": "date-time",
            "type": "string"
          },
          "name": {
            "description": "Name of this group.",
            "type": "string"
          },
          "order": {
            "description": "Order number of this group for sorting.",
            "format": "int32",
            "type": "integer"
          },
          "parentId": {
            "description": "UUID of the parent group (if applicable).",
            "format": "uuid",
            "type": "string"
          },
          "teamId": {
            "description": "UUID of the team which owns this group.",
            "format": "uuid",
            "type": "string"
          }
        },
        "required": [
          "id",
          "teamId",
          "name",
          "order",
          "createdAt",
          "lastUpdatedAt",
          "_embedded"
        ],
        "title": "WorkspaceGroupWithWorkspaceGroupEmbed",
        "type": "object"
      },
      "WorkspaceGroupWithWorkspaceGroupEmbedOrNullList": {
        "items": {
          "$ref": "#/components/schemas/WorkspaceGroupWithWorkspaceGroupEmbed"
        },
        "title": "WorkspaceGroupWithWorkspaceGroupEmbedOrNullList",
        "type": "array"
      },
      "WorkspaceGroupWithWorkspaceGroupSearchEmbed": {
        "description": "An entity for grouping workspaces (like folders).",
        "properties": {
          "_embedded": {
            "$ref": "#/components/schemas/WorkspaceGroupSearchEmbed"
          },
          "createdAt": {
            "description": "Date-time when this group was created.",
            "format": "date-time",
            "type": "string"
          },
          "defaultPermission": {
            "$ref": "#/components/schemas/Permission",
            "description": "Default permission for all team-members to all the inner contents of this group."
          },
          "id": {
            "description": "UUID of this group.",
            "format": "uuid",
            "type": "string"
          },
          "lastUpdatedAt": {
            "description": "Date-time when this group was last updated.",
            "format": "date-time",
            "type": "string"
          },
          "name": {
            "description": "Name of this group.",
            "type": "string"
          },
          "order": {
            "description": "Order number of this group for sorting.",
            "format": "int32",
            "type": "integer"
          },
          "parentId": {
            "description": "UUID of the parent group (if applicable).",
            "format": "uuid",
            "type": "string"
          },
          "teamId": {
            "description": "UUID of the team which owns this group.",
            "format": "uuid",
            "type": "string"
          }
        },
        "required": [
          "id",
          "teamId",
          "name",
          "order",
          "createdAt",
          "lastUpdatedAt",
          "_embedded"
        ],
        "title": "WorkspaceGroupWithWorkspaceGroupSearchEmbed",
        "type": "object"
      },
      "WorkspaceGroupWithWorkspaceGroupSearchEmbedPage": {
        "properties": {
          "items": {
            "items": {
              "$ref": "#/components/schemas/WorkspaceGroupWithWorkspaceGroupSearchEmbed"
            },
            "type": "array"
          },
          "totalItems": {
            "format": "int32",
            "type": "integer"
          }
        },
        "required": [
          "items",
          "totalItems"
        ],
        "title": "WorkspaceGroupWithWorkspaceGroupSearchEmbedPage",
        "type": "object"
      },
      "WorkspaceNamespace": {
        "enum": [
          "main",
          "app:okr",
          "app:portfolio"
        ],
        "title": "WorkspaceNamespace",
        "type": "string"
      },
      "WorkspacePermissionsUpdateRequest": {
        "properties": {
          "defaultPermission": {
            "$ref": "#/components/schemas/Permission"
          },
          "permissions": {
            "additionalProperties": {
              "$ref": "#/components/schemas/Permission"
            },
            "description": "Explicit permissions for specific users in the team.",
            "type": "object"
          },
          "userGroupPermissions": {
            "additionalProperties": {
              "$ref": "#/components/schemas/Permission"
            },
            "description": "Explicit permissions for specific teams.",
            "type": "object"
          }
        },
        "required": [
          "permissions",
          "userGroupPermissions"
        ],
        "title": "WorkspacePermissionsUpdateRequest",
        "type": "object"
      },
      "WorkspaceProgressMode": {
        "enum": [
          "count",
          "none",
          "percentage"
        ],
        "title": "WorkspaceProgressMode",
        "type": "string"
      },
      "WorkspaceRelation": {
        "properties": {
          "childId": {
            "format": "uuid",
            "type": "string"
          },
          "id": {
            "format": "uuid",
            "type": "string"
          },
          "parentId": {
            "format": "uuid",
            "type": "string"
          }
        },
        "required": [
          "id",
          "parentId",
          "childId"
        ],
        "title": "WorkspaceRelation",
        "type": "object"
      },
      "WorkspaceRelationBulkAction": {
        "discriminator": {
          "mapping": {
            "create": "#/components/schemas/WorkspaceRelationBulkCreate",
            "delete": "#/components/schemas/WorkspaceRelationBulkDelete",
            "patch": "#/components/schemas/WorkspaceRelationBulkPatch",
            "update": "#/components/schemas/WorkspaceRelationBulkUpdate"
          },
          "propertyName": "type"
        },
        "oneOf": [
          {
            "$ref": "#/components/schemas/WorkspaceRelationBulkCreate"
          },
          {
            "$ref": "#/components/schemas/WorkspaceRelationBulkDelete"
          },
          {
            "$ref": "#/components/schemas/WorkspaceRelationBulkPatch"
          },
          {
            "$ref": "#/components/schemas/WorkspaceRelationBulkUpdate"
          }
        ],
        "title": "WorkspaceRelationBulkAction"
      },
      "WorkspaceRelationBulkCreate": {
        "properties": {
          "resource": {
            "$ref": "#/components/schemas/WorkspaceRelation"
          },
          "type": {
            "enum": [
              "create"
            ],
            "type": "string"
          }
        },
        "required": [
          "resource",
          "type"
        ],
        "title": "WorkspaceRelationBulkCreate",
        "type": "object"
      },
      "WorkspaceRelationBulkDelete": {
        "properties": {
          "id": {
            "format": "uuid",
            "type": "string"
          },
          "type": {
            "enum": [
              "delete"
            ],
            "type": "string"
          }
        },
        "required": [
          "id",
          "type"
        ],
        "title": "WorkspaceRelationBulkDelete",
        "type": "object"
      },
      "WorkspaceRelationBulkPatch": {
        "properties": {
          "id": {
            "format": "uuid",
            "type": "string"
          },
          "transform": {
            "$ref": "#/components/schemas/JsonPatch"
          },
          "type": {
            "enum": [
              "patch"
            ],
            "type": "string"
          }
        },
        "required": [
          "id",
          "transform",
          "type"
        ],
        "title": "WorkspaceRelationBulkPatch",
        "type": "object"
      },
      "WorkspaceRelationBulkUpdate": {
        "properties": {
          "id": {
            "format": "uuid",
            "type": "string"
          },
          "resource": {
            "$ref": "#/components/schemas/WorkspaceRelation"
          },
          "type": {
            "enum": [
              "update"
            ],
            "type": "string"
          }
        },
        "required": [
          "id",
          "resource",
          "type"
        ],
        "title": "WorkspaceRelationBulkUpdate",
        "type": "object"
      },
      "WorkspaceRelationSearchQuery": {
        "properties": {
          "filter": {
            "$ref": "#/components/schemas/WorkspaceRelationSearchQueryFilter"
          }
        },
        "title": "WorkspaceRelationSearchQuery",
        "type": "object"
      },
      "WorkspaceRelationSearchQueryFilter": {
        "discriminator": {
          "mapping": {
            "and": "#/components/schemas/WorkspaceRelationSearchQueryFilterAnd",
            "child": "#/components/schemas/WorkspaceRelationSearchQueryFilterChild",
            "not": "#/components/schemas/WorkspaceRelationSearchQueryFilterNot",
            "or": "#/components/schemas/WorkspaceRelationSearchQueryFilterOr",
            "parent": "#/components/schemas/WorkspaceRelationSearchQueryFilterParent"
          },
          "propertyName": "type"
        },
        "oneOf": [
          {
            "$ref": "#/components/schemas/WorkspaceRelationSearchQueryFilterAnd"
          },
          {
            "$ref": "#/components/schemas/WorkspaceRelationSearchQueryFilterChild"
          },
          {
            "$ref": "#/components/schemas/WorkspaceRelationSearchQueryFilterNot"
          },
          {
            "$ref": "#/components/schemas/WorkspaceRelationSearchQueryFilterOr"
          },
          {
            "$ref": "#/components/schemas/WorkspaceRelationSearchQueryFilterParent"
          }
        ],
        "title": "WorkspaceRelationSearchQueryFilter"
      },
      "WorkspaceRelationSearchQueryFilterAnd": {
        "properties": {
          "inner": {
            "items": {
              "$ref": "#/components/schemas/WorkspaceRelationSearchQueryFilter"
            },
            "type": "array"
          },
          "type": {
            "const": "and",
            "type": "string"
          }
        },
        "required": [
          "inner",
          "type"
        ],
        "title": "WorkspaceRelationSearchQueryFilterAnd",
        "type": "object"
      },
      "WorkspaceRelationSearchQueryFilterChild": {
        "discriminator": {
          "mapping": {
            "containAny": "#/components/schemas/WorkspaceRelationSearchQueryFilterChildContainAny",
            "equal": "#/components/schemas/WorkspaceRelationSearchQueryFilterChildEqual"
          },
          "propertyName": "mode"
        },
        "oneOf": [
          {
            "$ref": "#/components/schemas/WorkspaceRelationSearchQueryFilterChildContainAny"
          },
          {
            "$ref": "#/components/schemas/WorkspaceRelationSearchQueryFilterChildEqual"
          }
        ],
        "title": "WorkspaceRelationSearchQueryFilterChild"
      },
      "WorkspaceRelationSearchQueryFilterChildContainAny": {
        "properties": {
          "mode": {
            "const": "containAny",
            "type": "string"
          },
          "workspaceIds": {
            "items": {
              "format": "uuid",
              "type": "string"
            },
            "type": "array",
            "uniqueItems": true
          }
        },
        "required": [
          "workspaceIds",
          "mode"
        ],
        "title": "WorkspaceRelationSearchQueryFilterChildContainAny",
        "type": "object"
      },
      "WorkspaceRelationSearchQueryFilterChildEqual": {
        "properties": {
          "mode": {
            "const": "equal",
            "type": "string"
          },
          "workspaceId": {
            "format": "uuid",
            "type": "string"
          }
        },
        "required": [
          "workspaceId",
          "mode"
        ],
        "title": "WorkspaceRelationSearchQueryFilterChildEqual",
        "type": "object"
      },
      "WorkspaceRelationSearchQueryFilterNot": {
        "properties": {
          "inner": {
            "items": {
              "$ref": "#/components/schemas/WorkspaceRelationSearchQueryFilter"
            },
            "type": "array"
          },
          "type": {
            "const": "not",
            "type": "string"
          }
        },
        "required": [
          "inner",
          "type"
        ],
        "title": "WorkspaceRelationSearchQueryFilterNot",
        "type": "object"
      },
      "WorkspaceRelationSearchQueryFilterOr": {
        "properties": {
          "inner": {
            "items": {
              "$ref": "#/components/schemas/WorkspaceRelationSearchQueryFilter"
            },
            "type": "array"
          },
          "type": {
            "const": "or",
            "type": "string"
          }
        },
        "required": [
          "inner",
          "type"
        ],
        "title": "WorkspaceRelationSearchQueryFilterOr",
        "type": "object"
      },
      "WorkspaceRelationSearchQueryFilterParent": {
        "discriminator": {
          "mapping": {
            "containAny": "#/components/schemas/WorkspaceRelationSearchQueryFilterParentContainAny",
            "equal": "#/components/schemas/WorkspaceRelationSearchQueryFilterParentEqual"
          },
          "propertyName": "mode"
        },
        "oneOf": [
          {
            "$ref": "#/components/schemas/WorkspaceRelationSearchQueryFilterParentContainAny"
          },
          {
            "$ref": "#/components/schemas/WorkspaceRelationSearchQueryFilterParentEqual"
          }
        ],
        "title": "WorkspaceRelationSearchQueryFilterParent"
      },
      "WorkspaceRelationSearchQueryFilterParentContainAny": {
        "properties": {
          "mode": {
            "const": "containAny",
            "type": "string"
          },
          "workspaceIds": {
            "items": {
              "format": "uuid",
              "type": "string"
            },
            "type": "array",
            "uniqueItems": true
          }
        },
        "required": [
          "workspaceIds",
          "mode"
        ],
        "title": "WorkspaceRelationSearchQueryFilterParentContainAny",
        "type": "object"
      },
      "WorkspaceRelationSearchQueryFilterParentEqual": {
        "properties": {
          "mode": {
            "const": "equal",
            "type": "string"
          },
          "workspaceId": {
            "format": "uuid",
            "type": "string"
          }
        },
        "required": [
          "workspaceId",
          "mode"
        ],
        "title": "WorkspaceRelationSearchQueryFilterParentEqual",
        "type": "object"
      },
      "WorkspaceRelationWithEmbed": {
        "properties": {
          "_embedded": {
            "type": "object"
          },
          "childId": {
            "format": "uuid",
            "type": "string"
          },
          "id": {
            "format": "uuid",
            "type": "string"
          },
          "parentId": {
            "format": "uuid",
            "type": "string"
          }
        },
        "required": [
          "id",
          "parentId",
          "childId",
          "_embedded"
        ],
        "title": "WorkspaceRelationWithEmbed",
        "type": "object"
      },
      "WorkspaceRelationWithEmbedOrNullList": {
        "items": {
          "$ref": "#/components/schemas/WorkspaceRelationWithEmbed"
        },
        "title": "WorkspaceRelationWithEmbedOrNullList",
        "type": "array"
      },
      "WorkspaceRelationWithEmbedPage": {
        "properties": {
          "items": {
            "items": {
              "$ref": "#/components/schemas/WorkspaceRelationWithEmbed"
            },
            "type": "array"
          },
          "totalItems": {
            "format": "int32",
            "type": "integer"
          }
        },
        "required": [
          "items",
          "totalItems"
        ],
        "title": "WorkspaceRelationWithEmbedPage",
        "type": "object"
      },
      "WorkspaceRelationsSetRequest": {
        "properties": {
          "childIds": {
            "items": {
              "format": "uuid",
              "type": "string"
            },
            "type": "array",
            "uniqueItems": true
          },
          "parentIds": {
            "items": {
              "format": "uuid",
              "type": "string"
            },
            "type": "array",
            "uniqueItems": true
          },
          "workspaceId": {
            "format": "uuid",
            "type": "string"
          }
        },
        "required": [
          "workspaceId",
          "parentIds",
          "childIds"
        ],
        "title": "WorkspaceRelationsSetRequest",
        "type": "object"
      },
      "WorkspaceSearchEmbed": {
        "properties": {
          "currentPermission": {
            "$ref": "#/components/schemas/Permission"
          },
          "itemCount": {
            "format": "int32",
            "type": "integer"
          },
          "permissions": {
            "additionalProperties": {
              "$ref": "#/components/schemas/Permission"
            },
            "type": "object"
          },
          "statuses": {
            "additionalProperties": {
              "$ref": "#/components/schemas/Status"
            },
            "type": "object"
          },
          "userGroupPermissions": {
            "additionalProperties": {
              "$ref": "#/components/schemas/Permission"
            },
            "type": "object"
          }
        },
        "required": [
          "permissions",
          "userGroupPermissions",
          "statuses",
          "itemCount"
        ],
        "title": "WorkspaceSearchEmbed",
        "type": "object"
      },
      "WorkspaceSearchQuery": {
        "properties": {
          "archived": {
            "type": "boolean"
          },
          "filter": {
            "$ref": "#/components/schemas/WorkspaceSearchQueryFilter"
          },
          "sort": {
            "$ref": "#/components/schemas/WorkspaceSearchQuerySort"
          }
        },
        "required": [
          "sort",
          "archived"
        ],
        "title": "WorkspaceSearchQuery",
        "type": "object"
      },
      "WorkspaceSearchQueryFilter": {
        "discriminator": {
          "mapping": {
            "and": "#/components/schemas/WorkspaceSearchQueryFilterAnd",
            "members": "#/components/schemas/WorkspaceSearchQueryFilterMembers",
            "name": "#/components/schemas/WorkspaceSearchQueryFilterName",
            "namespace": "#/components/schemas/WorkspaceSearchQueryFilterNamespace",
            "not": "#/components/schemas/WorkspaceSearchQueryFilterNot",
            "or": "#/components/schemas/WorkspaceSearchQueryFilterOr"
          },
          "propertyName": "type"
        },
        "oneOf": [
          {
            "$ref": "#/components/schemas/WorkspaceSearchQueryFilterAnd"
          },
          {
            "$ref": "#/components/schemas/WorkspaceSearchQueryFilterMembers"
          },
          {
            "$ref": "#/components/schemas/WorkspaceSearchQueryFilterName"
          },
          {
            "$ref": "#/components/schemas/WorkspaceSearchQueryFilterNamespace"
          },
          {
            "$ref": "#/components/schemas/WorkspaceSearchQueryFilterNot"
          },
          {
            "$ref": "#/components/schemas/WorkspaceSearchQueryFilterOr"
          }
        ],
        "title": "WorkspaceSearchQueryFilter"
      },
      "WorkspaceSearchQueryFilterAnd": {
        "properties": {
          "inner": {
            "items": {
              "$ref": "#/components/schemas/WorkspaceSearchQueryFilter"
            },
            "type": "array"
          },
          "type": {
            "const": "and",
            "type": "string"
          }
        },
        "required": [
          "inner",
          "type"
        ],
        "title": "WorkspaceSearchQueryFilterAnd",
        "type": "object"
      },
      "WorkspaceSearchQueryFilterMembers": {
        "discriminator": {
          "mapping": {
            "containAny": "#/components/schemas/WorkspaceSearchQueryFilterMembersContainAny"
          },
          "propertyName": "mode"
        },
        "oneOf": [
          {
            "$ref": "#/components/schemas/WorkspaceSearchQueryFilterMembersContainAny"
          }
        ],
        "title": "WorkspaceSearchQueryFilterMembers"
      },
      "WorkspaceSearchQueryFilterMembersContainAny": {
        "properties": {
          "ids": {
            "items": {
              "format": "uuid",
              "type": "string"
            },
            "type": "array",
            "uniqueItems": true
          },
          "mode": {
            "const": "containAny",
            "type": "string"
          }
        },
        "required": [
          "ids",
          "mode"
        ],
        "title": "WorkspaceSearchQueryFilterMembersContainAny",
        "type": "object"
      },
      "WorkspaceSearchQueryFilterName": {
        "discriminator": {
          "mapping": {
            "contain": "#/components/schemas/WorkspaceSearchQueryFilterNameContain",
            "equal": "#/components/schemas/WorkspaceSearchQueryFilterNameEqual"
          },
          "propertyName": "mode"
        },
        "oneOf": [
          {
            "$ref": "#/components/schemas/WorkspaceSearchQueryFilterNameContain"
          },
          {
            "$ref": "#/components/schemas/WorkspaceSearchQueryFilterNameEqual"
          }
        ],
        "title": "WorkspaceSearchQueryFilterName"
      },
      "WorkspaceSearchQueryFilterNameContain": {
        "properties": {
          "caseSensitive": {
            "type": "boolean"
          },
          "mode": {
            "const": "contain",
            "type": "string"
          },
          "text": {
            "type": "string"
          }
        },
        "required": [
          "text",
          "caseSensitive",
          "mode"
        ],
        "title": "WorkspaceSearchQueryFilterNameContain",
        "type": "object"
      },
      "WorkspaceSearchQueryFilterNameEqual": {
        "properties": {
          "caseSensitive": {
            "type": "boolean"
          },
          "mode": {
            "const": "equal",
            "type": "string"
          },
          "text": {
            "type": "string"
          }
        },
        "required": [
          "text",
          "caseSensitive",
          "mode"
        ],
        "title": "WorkspaceSearchQueryFilterNameEqual",
        "type": "object"
      },
      "WorkspaceSearchQueryFilterNamespace": {
        "discriminator": {
          "mapping": {
            "containAny": "#/components/schemas/WorkspaceSearchQueryFilterNamespaceContainAny"
          },
          "propertyName": "mode"
        },
        "oneOf": [
          {
            "$ref": "#/components/schemas/WorkspaceSearchQueryFilterNamespaceContainAny"
          }
        ],
        "title": "WorkspaceSearchQueryFilterNamespace"
      },
      "WorkspaceSearchQueryFilterNamespaceContainAny": {
        "properties": {
          "mode": {
            "const": "containAny",
            "type": "string"
          },
          "values": {
            "items": {
              "$ref": "#/components/schemas/WorkspaceNamespace"
            },
            "type": "array"
          }
        },
        "required": [
          "values",
          "mode"
        ],
        "title": "WorkspaceSearchQueryFilterNamespaceContainAny",
        "type": "object"
      },
      "WorkspaceSearchQueryFilterNot": {
        "properties": {
          "inner": {
            "items": {
              "$ref": "#/components/schemas/WorkspaceSearchQueryFilter"
            },
            "type": "array"
          },
          "type": {
            "const": "not",
            "type": "string"
          }
        },
        "required": [
          "inner",
          "type"
        ],
        "title": "WorkspaceSearchQueryFilterNot",
        "type": "object"
      },
      "WorkspaceSearchQueryFilterOr": {
        "properties": {
          "inner": {
            "items": {
              "$ref": "#/components/schemas/WorkspaceSearchQueryFilter"
            },
            "type": "array"
          },
          "type": {
            "const": "or",
            "type": "string"
          }
        },
        "required": [
          "inner",
          "type"
        ],
        "title": "WorkspaceSearchQueryFilterOr",
        "type": "object"
      },
      "WorkspaceSearchQuerySort": {
        "discriminator": {
          "mapping": {
            "createdAt": "#/components/schemas/WorkspaceSearchQuerySortCreatedAt",
            "lastUpdatedAt": "#/components/schemas/WorkspaceSearchQuerySortLastUpdatedAt",
            "name": "#/components/schemas/WorkspaceSearchQuerySortName"
          },
          "propertyName": "type"
        },
        "oneOf": [
          {
            "$ref": "#/components/schemas/WorkspaceSearchQuerySortCreatedAt"
          },
          {
            "$ref": "#/components/schemas/WorkspaceSearchQuerySortLastUpdatedAt"
          },
          {
            "$ref": "#/components/schemas/WorkspaceSearchQuerySortName"
          }
        ],
        "title": "WorkspaceSearchQuerySort"
      },
      "WorkspaceSearchQuerySortCreatedAt": {
        "properties": {
          "direction": {
            "$ref": "#/components/schemas/WorkspaceSearchQuerySortDirection"
          },
          "type": {
            "const": "createdAt",
            "type": "string"
          }
        },
        "required": [
          "direction",
          "type"
        ],
        "title": "WorkspaceSearchQuerySortCreatedAt",
        "type": "object"
      },
      "WorkspaceSearchQuerySortDirection": {
        "enum": [
          "asc",
          "desc"
        ],
        "title": "WorkspaceSearchQuerySortDirection",
        "type": "string"
      },
      "WorkspaceSearchQuerySortLastUpdatedAt": {
        "properties": {
          "direction": {
            "$ref": "#/components/schemas/WorkspaceSearchQuerySortDirection"
          },
          "type": {
            "const": "lastUpdatedAt",
            "type": "string"
          }
        },
        "required": [
          "direction",
          "type"
        ],
        "title": "WorkspaceSearchQuerySortLastUpdatedAt",
        "type": "object"
      },
      "WorkspaceSearchQuerySortName": {
        "properties": {
          "direction": {
            "$ref": "#/components/schemas/WorkspaceSearchQuerySortDirection"
          },
          "type": {
            "const": "name",
            "type": "string"
          }
        },
        "required": [
          "direction",
          "type"
        ],
        "title": "WorkspaceSearchQuerySortName",
        "type": "object"
      },
      "WorkspaceWithMDWithWorkspaceEmbed": {
        "description": "Workspace with Markdown string description.",
        "properties": {
          "_embedded": {
            "$ref": "#/components/schemas/WorkspaceEmbed"
          },
          "alias": {
            "description": "A custom code of this workspace (e.g. PROD, DEV, etc), which is used to create aliases for items (e.g. DEV-123). Alias should consist of 1-10 uppercase letters, and should be unique within the team.",
            "type": "string"
          },
          "createdAt": {
            "description": "Timestamp of when this workspace was created.",
            "format": "date-time",
            "type": "string"
          },
          "defaultPermission": {
            "$ref": "#/components/schemas/Permission",
            "description": "Default permission for all the team members in this workspace. Note: the final permission can be adjusted corresponding to each user's role, e.g. contributors can't have more than Comment permission."
          },
          "description": {
            "description": "Rich text content as a markdown string (used with markdown media types)",
            "examples": [
              "hello **world**!"
            ],
            "type": "string"
          },
          "id": {
            "description": "Unique identifier of this workspace.",
            "format": "uuid",
            "type": "string"
          },
          "itemColor": {
            "$ref": "#/components/schemas/ItemColor",
            "description": "Default color applied to newly created items in this workspace. If not defined - a random color will be assigned to each new item."
          },
          "itemType": {
            "$ref": "#/components/schemas/ItemType",
            "description": "Type of items in this workspace."
          },
          "lastUpdatedAt": {
            "description": "Timestamp of when this workspace was last updated.",
            "format": "date-time",
            "type": "string"
          },
          "metadata": {
            "$ref": "#/components/schemas/WorkspaceWorkspaceMetadata"
          },
          "name": {
            "description": "Name of this workspace.",
            "type": "string"
          },
          "namespace": {
            "$ref": "#/components/schemas/WorkspaceNamespace",
            "description": "The system namespace of this workspace."
          },
          "order": {
            "description": "Order number of this workspace for sorting.",
            "format": "int32",
            "type": "integer"
          },
          "progressMode": {
            "$ref": "#/components/schemas/WorkspaceProgressMode"
          },
          "teamId": {
            "description": "Id of the team this workspace belongs to.",
            "format": "uuid",
            "type": "string"
          }
        },
        "required": [
          "id",
          "teamId",
          "name",
          "description",
          "progressMode",
          "createdAt",
          "lastUpdatedAt",
          "namespace",
          "order",
          "_embedded"
        ],
        "title": "WorkspaceWithMDWithWorkspaceEmbed",
        "type": "object"
      },
      "WorkspaceWithMDWithWorkspaceEmbedOrNullList": {
        "items": {
          "$ref": "#/components/schemas/WorkspaceWithMDWithWorkspaceEmbed"
        },
        "title": "WorkspaceWithMDWithWorkspaceEmbedOrNullList",
        "type": "array"
      },
      "WorkspaceWithMDWithWorkspaceSearchEmbed": {
        "description": "Workspace with Markdown string description.",
        "properties": {
          "_embedded": {
            "$ref": "#/components/schemas/WorkspaceSearchEmbed"
          },
          "alias": {
            "description": "A custom code of this workspace (e.g. PROD, DEV, etc), which is used to create aliases for items (e.g. DEV-123). Alias should consist of 1-10 uppercase letters, and should be unique within the team.",
            "type": "string"
          },
          "createdAt": {
            "description": "Timestamp of when this workspace was created.",
            "format": "date-time",
            "type": "string"
          },
          "defaultPermission": {
            "$ref": "#/components/schemas/Permission",
            "description": "Default permission for all the team members in this workspace. Note: the final permission can be adjusted corresponding to each user's role, e.g. contributors can't have more than Comment permission."
          },
          "description": {
            "description": "Rich text content as a markdown string (used with markdown media types)",
            "examples": [
              "hello **world**!"
            ],
            "type": "string"
          },
          "id": {
            "description": "Unique identifier of this workspace.",
            "format": "uuid",
            "type": "string"
          },
          "itemColor": {
            "$ref": "#/components/schemas/ItemColor",
            "description": "Default color applied to newly created items in this workspace. If not defined - a random color will be assigned to each new item."
          },
          "itemType": {
            "$ref": "#/components/schemas/ItemType",
            "description": "Type of items in this workspace."
          },
          "lastUpdatedAt": {
            "description": "Timestamp of when this workspace was last updated.",
            "format": "date-time",
            "type": "string"
          },
          "metadata": {
            "$ref": "#/components/schemas/WorkspaceWorkspaceMetadata"
          },
          "name": {
            "description": "Name of this workspace.",
            "type": "string"
          },
          "namespace": {
            "$ref": "#/components/schemas/WorkspaceNamespace",
            "description": "The system namespace of this workspace."
          },
          "order": {
            "description": "Order number of this workspace for sorting.",
            "format": "int32",
            "type": "integer"
          },
          "progressMode": {
            "$ref": "#/components/schemas/WorkspaceProgressMode"
          },
          "teamId": {
            "description": "Id of the team this workspace belongs to.",
            "format": "uuid",
            "type": "string"
          }
        },
        "required": [
          "id",
          "teamId",
          "name",
          "description",
          "progressMode",
          "createdAt",
          "lastUpdatedAt",
          "namespace",
          "order",
          "_embedded"
        ],
        "title": "WorkspaceWithMDWithWorkspaceSearchEmbed",
        "type": "object"
      },
      "WorkspaceWithMDWithWorkspaceSearchEmbedPage": {
        "properties": {
          "items": {
            "items": {
              "$ref": "#/components/schemas/WorkspaceWithMDWithWorkspaceSearchEmbed"
            },
            "type": "array"
          },
          "totalItems": {
            "format": "int32",
            "type": "integer"
          }
        },
        "required": [
          "items",
          "totalItems"
        ],
        "title": "WorkspaceWithMDWithWorkspaceSearchEmbedPage",
        "type": "object"
      },
      "WorkspaceWithWorkspaceEmbed": {
        "properties": {
          "_embedded": {
            "$ref": "#/components/schemas/WorkspaceEmbed"
          },
          "alias": {
            "description": "A custom code of this workspace (e.g. PROD, DEV, etc), which is used to create aliases for items (e.g. DEV-123). Alias should consist of 1-10 uppercase letters, and should be unique within the team.",
            "type": "string"
          },
          "createdAt": {
            "description": "Timestamp of when this workspace was created.",
            "format": "date-time",
            "type": "string"
          },
          "defaultPermission": {
            "$ref": "#/components/schemas/Permission",
            "description": "Default permission for all the team members in this workspace. Note: the final permission can be adjusted corresponding to each user's role, e.g. contributors can't have more than Comment permission."
          },
          "description": {
            "$ref": "#/components/schemas/RichText",
            "description": "Description of this workspace."
          },
          "id": {
            "description": "Unique identifier of this workspace.",
            "format": "uuid",
            "type": "string"
          },
          "itemColor": {
            "$ref": "#/components/schemas/ItemColor",
            "description": "Default color applied to newly created items in this workspace. If not defined - a random color will be assigned to each new item."
          },
          "itemType": {
            "$ref": "#/components/schemas/ItemType",
            "description": "Type of items in this workspace."
          },
          "lastUpdatedAt": {
            "description": "Timestamp of when this workspace was last updated.",
            "format": "date-time",
            "type": "string"
          },
          "metadata": {
            "$ref": "#/components/schemas/WorkspaceWorkspaceMetadata"
          },
          "name": {
            "description": "Name of this workspace.",
            "type": "string"
          },
          "namespace": {
            "$ref": "#/components/schemas/WorkspaceNamespace",
            "description": "The system namespace of this workspace."
          },
          "order": {
            "description": "Order number of this workspace for sorting.",
            "format": "int32",
            "type": "integer"
          },
          "progressMode": {
            "$ref": "#/components/schemas/WorkspaceProgressMode"
          },
          "teamId": {
            "description": "Id of the team this workspace belongs to.",
            "format": "uuid",
            "type": "string"
          }
        },
        "required": [
          "id",
          "teamId",
          "name",
          "description",
          "progressMode",
          "createdAt",
          "lastUpdatedAt",
          "namespace",
          "order",
          "_embedded"
        ],
        "title": "WorkspaceWithWorkspaceEmbed",
        "type": "object"
      },
      "WorkspaceWithWorkspaceEmbedOrNullList": {
        "items": {
          "$ref": "#/components/schemas/WorkspaceWithWorkspaceEmbed"
        },
        "title": "WorkspaceWithWorkspaceEmbedOrNullList",
        "type": "array"
      },
      "WorkspaceWithWorkspaceSearchEmbed": {
        "properties": {
          "_embedded": {
            "$ref": "#/components/schemas/WorkspaceSearchEmbed"
          },
          "alias": {
            "description": "A custom code of this workspace (e.g. PROD, DEV, etc), which is used to create aliases for items (e.g. DEV-123). Alias should consist of 1-10 uppercase letters, and should be unique within the team.",
            "type": "string"
          },
          "createdAt": {
            "description": "Timestamp of when this workspace was created.",
            "format": "date-time",
            "type": "string"
          },
          "defaultPermission": {
            "$ref": "#/components/schemas/Permission",
            "description": "Default permission for all the team members in this workspace. Note: the final permission can be adjusted corresponding to each user's role, e.g. contributors can't have more than Comment permission."
          },
          "description": {
            "$ref": "#/components/schemas/RichText",
            "description": "Description of this workspace."
          },
          "id": {
            "description": "Unique identifier of this workspace.",
            "format": "uuid",
            "type": "string"
          },
          "itemColor": {
            "$ref": "#/components/schemas/ItemColor",
            "description": "Default color applied to newly created items in this workspace. If not defined - a random color will be assigned to each new item."
          },
          "itemType": {
            "$ref": "#/components/schemas/ItemType",
            "description": "Type of items in this workspace."
          },
          "lastUpdatedAt": {
            "description": "Timestamp of when this workspace was last updated.",
            "format": "date-time",
            "type": "string"
          },
          "metadata": {
            "$ref": "#/components/schemas/WorkspaceWorkspaceMetadata"
          },
          "name": {
            "description": "Name of this workspace.",
            "type": "string"
          },
          "namespace": {
            "$ref": "#/components/schemas/WorkspaceNamespace",
            "description": "The system namespace of this workspace."
          },
          "order": {
            "description": "Order number of this workspace for sorting.",
            "format": "int32",
            "type": "integer"
          },
          "progressMode": {
            "$ref": "#/components/schemas/WorkspaceProgressMode"
          },
          "teamId": {
            "description": "Id of the team this workspace belongs to.",
            "format": "uuid",
            "type": "string"
          }
        },
        "required": [
          "id",
          "teamId",
          "name",
          "description",
          "progressMode",
          "createdAt",
          "lastUpdatedAt",
          "namespace",
          "order",
          "_embedded"
        ],
        "title": "WorkspaceWithWorkspaceSearchEmbed",
        "type": "object"
      },
      "WorkspaceWithWorkspaceSearchEmbedPage": {
        "properties": {
          "items": {
            "items": {
              "$ref": "#/components/schemas/WorkspaceWithWorkspaceSearchEmbed"
            },
            "type": "array"
          },
          "totalItems": {
            "format": "int32",
            "type": "integer"
          }
        },
        "required": [
          "items",
          "totalItems"
        ],
        "title": "WorkspaceWithWorkspaceSearchEmbedPage",
        "type": "object"
      },
      "WorkspaceWorkspaceMetadata": {
        "description": "Additional metadata about this workspace.",
        "properties": {
          "duplicated": {
            "description": "Whether this workspace was duplicated from another workspace.",
            "type": "boolean"
          },
          "templateId": {
            "description": "Id of the template used to create this workspace.",
            "type": "string"
          },
          "templateWorkspaceRef": {
            "description": "Which specific workspace-instruction in the template was used to create this workspace.",
            "type": "string"
          },
          "version": {
            "description": "Version of the server at the moment when this workspace was created.",
            "type": "string"
          }
        },
        "required": [
          "duplicated"
        ],
        "title": "WorkspaceWorkspaceMetadata",
        "type": "object"
      }
    },
    "securitySchemes": {
      "httpAuth": {
        "scheme": "bearer",
        "type": "http"
      }
    }
  },
  "info": {
    "title": "airfocus API",
    "version": "1.0.0-beta.40.33.1"
  },
  "openapi": "3.1.0",
  "paths": {
    "/api/fields": {
      "post": {
        "description": "Installs a new field.\nIf it's a team-field, then it's possible to install it with empty or any non-empty amount of linked workspaces.\nOtherwise, if it's not a team-field, then exactly one linked workspace should be specified.<br/>Requirements:<br/>  - auth-client scopes: \"workspace\"<br/>  - user permission: \"full\"<br/>  - team features: \"team-fields\" when operating with team-fields<br/>  - user role: \"admin\" when operating with team-fields<br/>Returns:<br/>403 if user does not have the required permission",
        "operationId": "installField",
        "parameters": [
          {
            "deprecated": true,
            "description": "Enable sudo-mode for admins for a single request, which gives full permission to all workspaces in the team.",
            "in": "query",
            "name": "actAsAdmin",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/FieldServerEndpointsInstallFieldRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FieldWithFieldEmbed"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "httpAuth": []
          }
        ],
        "summary": "Install a new field",
        "tags": [
          "Fields"
        ]
      }
    },
    "/api/fields/reorder": {
      "post": {
        "description": "Updates the order of fields in the specified workspace.<br/>Requirements:<br/>  - auth-client scopes: \"workspace\"<br/>  - user permission: \"full\"<br/>  - team features: \"team-fields\" when operating with team-fields<br/>  - user role: \"admin\" when operating with team-fields<br/>Returns:<br/>403 if user does not have the required permission",
        "operationId": "reorderFields",
        "parameters": [
          {
            "deprecated": true,
            "description": "Enable sudo-mode for admins for a single request, which gives full permission to all workspaces in the team.",
            "in": "query",
            "name": "actAsAdmin",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/FieldServerEndpointsReorderFieldsRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": ""
          }
        },
        "security": [
          {
            "httpAuth": []
          }
        ],
        "summary": "Reorder fields",
        "tags": [
          "Fields"
        ]
      }
    },
    "/api/fields/search": {
      "post": {
        "description": "Searches fields in the current team based on the specified filters.<br/>Requirements:<br/>  - auth-client scopes: \"workspace:read\"<br/>  - user permission: \"read\" or higher<br/>  - team features: \"team-fields\" when operating with team-fields<br/>Returns:<br/>403 if user does not have the required permission",
        "operationId": "searchFields",
        "parameters": [
          {
            "deprecated": true,
            "description": "Enable sudo-mode for admins for a single request, which gives full permission to all workspaces in the team.",
            "in": "query",
            "name": "actAsAdmin",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/FieldSearchQuery"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FieldWithFieldEmbedPage"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "httpAuth": []
          }
        ],
        "summary": "Search fields",
        "tags": [
          "Fields"
        ]
      }
    },
    "/api/fields/types": {
      "get": {
        "description": "Returns all field-types available in the system.<br/>Requirements:<br/>  - auth-client scopes: \"workspace:read\"<br/>  - user permission: \"read\" or higher<br/>  - team features: \"team-fields\" when operating with team-fields<br/>Returns:<br/>403 if user does not have the required permission",
        "operationId": "listFieldTypes",
        "parameters": [
          {
            "deprecated": true,
            "description": "Enable sudo-mode for admins for a single request, which gives full permission to all workspaces in the team.",
            "in": "query",
            "name": "actAsAdmin",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/FieldServerEndpointsFieldTypeInfo"
                  },
                  "type": "array"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "httpAuth": []
          }
        ],
        "summary": "List all available field types",
        "tags": [
          "Fields"
        ]
      }
    },
    "/api/fields/workspaces": {
      "post": {
        "description": "Links existing team-fields to existing workspaces.\nReturns updated fields with their linked workspaces embedded.\nReturns an error if either of the requested fields is not a team-field.\nIgnores existing links.\n<br/>Requirements:<br/>  - auth-client scopes: \"workspace\"<br/>  - user permission: \"full\"<br/>  - team features: \"team-fields\" when operating with team-fields<br/>  - user role: \"admin\" when operating with team-fields<br/>Returns:<br/>403 if user does not have the required permission",
        "operationId": "linkTeamFieldsToWorkspaces",
        "parameters": [
          {
            "deprecated": true,
            "description": "Enable sudo-mode for admins for a single request, which gives full permission to all workspaces in the team.",
            "in": "query",
            "name": "actAsAdmin",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "items": {
                  "$ref": "#/components/schemas/FieldServerEndpointsFieldToWorkspaceLink"
                },
                "type": "array"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/FieldWithFieldEmbed"
                  },
                  "type": "array"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "httpAuth": []
          }
        ],
        "summary": "Link team-fields to workspaces",
        "tags": [
          "Fields"
        ]
      }
    },
    "/api/fields/{fieldId}": {
      "delete": {
        "description": "Deletes the requested field together with all its connections to workspaces and its values in the corresponding workspaces<br/>Requirements:<br/>  - auth-client scopes: \"workspace\"<br/>  - user permission: \"full\"<br/>  - team features: \"team-fields\" when operating with team-fields<br/>  - user role: \"admin\" when operating with team-fields<br/>Returns:<br/>403 if user does not have the required permission",
        "operationId": "deleteField",
        "parameters": [
          {
            "deprecated": true,
            "description": "Enable sudo-mode for admins for a single request, which gives full permission to all workspaces in the team.",
            "in": "query",
            "name": "actAsAdmin",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "description": "ID of the target field.",
            "in": "path",
            "name": "fieldId",
            "required": true,
            "schema": {
              "format": "uuid",
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": ""
          }
        },
        "security": [
          {
            "httpAuth": []
          }
        ],
        "summary": "Delete field",
        "tags": [
          "Fields"
        ]
      },
      "get": {
        "description": "Returns a found field with its embedded data.\nThe field is accessible by the current user only if it's a team-field, or if it belongs to an accessible workspace.<br/>Requirements:<br/>  - auth-client scopes: \"workspace:read\"<br/>  - user permission: \"read\" or higher<br/>  - team features: \"team-fields\" when operating with team-fields<br/>Returns:<br/>403 if user does not have the required permission",
        "operationId": "retrieveField",
        "parameters": [
          {
            "deprecated": true,
            "description": "Enable sudo-mode for admins for a single request, which gives full permission to all workspaces in the team.",
            "in": "query",
            "name": "actAsAdmin",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "description": "ID of the target field.",
            "in": "path",
            "name": "fieldId",
            "required": true,
            "schema": {
              "format": "uuid",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FieldWithFieldEmbed"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "httpAuth": []
          }
        ],
        "summary": "Retrieve a single field",
        "tags": [
          "Fields"
        ]
      },
      "put": {
        "description": "Updates configuration properties of an existing field.<br/>Requirements:<br/>  - auth-client scopes: \"workspace\"<br/>  - user permission: \"full\"<br/>  - team features: \"team-fields\" when operating with team-fields<br/>  - user role: \"admin\" when operating with team-fields<br/>Returns:<br/>403 if user does not have the required permission",
        "operationId": "reconfigureField",
        "parameters": [
          {
            "deprecated": true,
            "description": "Enable sudo-mode for admins for a single request, which gives full permission to all workspaces in the team.",
            "in": "query",
            "name": "actAsAdmin",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "description": "ID of the target field.",
            "in": "path",
            "name": "fieldId",
            "required": true,
            "schema": {
              "format": "uuid",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/FieldServerEndpointsReconfigureFieldRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FieldWithFieldEmbed"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "httpAuth": []
          }
        ],
        "summary": "Reconfigure field",
        "tags": [
          "Fields"
        ]
      }
    },
    "/api/profile": {
      "get": {
        "description": "Requirements:<br/>- auth-client scopes: \"profile:read\"",
        "operationId": "retrieveProfile",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            },
            "description": ""
          },
          "401": {
            "content": {
              "application/json": {
                "example": {
                  "code": "missing_token",
                  "data": {},
                  "message": "Access token is missing"
                },
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "If missing authentication token."
          },
          "403": {
            "content": {
              "application/json": {
                "example": {
                  "code": "forbidden",
                  "data": {},
                  "message": "Missing required access scope"
                },
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "If authenticated client does not have the required access scopes."
          }
        },
        "security": [
          {
            "httpAuth": []
          }
        ],
        "tags": [
          "Profile"
        ]
      },
      "put": {
        "description": "Requirements:<br/>- auth-client scopes: \"profile\"",
        "operationId": "updateProfile",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateUserRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            },
            "description": ""
          },
          "401": {
            "content": {
              "application/json": {
                "example": {
                  "code": "missing_token",
                  "data": {},
                  "message": "Access token is missing"
                },
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "If missing authentication token."
          },
          "403": {
            "content": {
              "application/json": {
                "example": {
                  "code": "forbidden",
                  "data": {},
                  "message": "Missing required access scope"
                },
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "If authenticated client does not have the required access scopes."
          }
        },
        "security": [
          {
            "httpAuth": []
          }
        ],
        "tags": [
          "Profile"
        ]
      }
    },
    "/api/profile/api-keys": {
      "get": {
        "description": "Requirements:<br/>- auth-client scopes: \"profile\"<br/>- team features: \"api-keys\"",
        "operationId": "listApiKeys",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/ApiKey"
                  },
                  "type": "array"
                }
              }
            },
            "description": ""
          },
          "401": {
            "content": {
              "application/json": {
                "example": {
                  "code": "missing_token",
                  "data": {},
                  "message": "Access token is missing"
                },
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "If missing authentication token."
          },
          "403": {
            "content": {
              "application/json": {
                "example": {
                  "code": "forbidden",
                  "data": {},
                  "message": "Missing required feature"
                },
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "If user's team does not have access to the required features, or authenticated client does not have the required access scopes."
          }
        },
        "security": [
          {
            "httpAuth": []
          }
        ],
        "tags": [
          "Profile"
        ]
      },
      "post": {
        "description": "Requirements:<br/>- auth-client scopes: \"profile\"<br/>- team features: \"api-keys\"",
        "operationId": "createApiKey",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateApiKeyRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateApiKeyResponse"
                }
              }
            },
            "description": ""
          },
          "401": {
            "content": {
              "application/json": {
                "example": {
                  "code": "missing_token",
                  "data": {},
                  "message": "Access token is missing"
                },
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "If missing authentication token."
          },
          "403": {
            "content": {
              "application/json": {
                "example": {
                  "code": "forbidden",
                  "data": {},
                  "message": "Missing required feature"
                },
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "If user's team does not have access to the required features, or authenticated client does not have the required access scopes."
          }
        },
        "security": [
          {
            "httpAuth": []
          }
        ],
        "tags": [
          "Profile"
        ]
      }
    },
    "/api/profile/api-keys/{apiKeyId}": {
      "delete": {
        "description": "Requirements:<br/>- auth-client scopes: \"profile\"<br/>- team features: \"api-keys\"",
        "operationId": "deleteApiKey",
        "parameters": [
          {
            "in": "path",
            "name": "apiKeyId",
            "required": true,
            "schema": {
              "format": "uuid",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          },
          "401": {
            "content": {
              "application/json": {
                "example": {
                  "code": "missing_token",
                  "data": {},
                  "message": "Access token is missing"
                },
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "If missing authentication token."
          },
          "403": {
            "content": {
              "application/json": {
                "example": {
                  "code": "forbidden",
                  "data": {},
                  "message": "Missing required feature"
                },
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "If user's team does not have access to the required features, or authenticated client does not have the required access scopes."
          }
        },
        "security": [
          {
            "httpAuth": []
          }
        ],
        "tags": [
          "Profile"
        ]
      }
    },
    "/api/profile/change-password": {
      "post": {
        "description": "Requirements:<br/>- auth-client scopes: \"profile\"",
        "operationId": "changePassword",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ChangePasswordRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": ""
          },
          "401": {
            "content": {
              "application/json": {
                "example": {
                  "code": "missing_token",
                  "data": {},
                  "message": "Access token is missing"
                },
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "If missing authentication token."
          },
          "403": {
            "content": {
              "application/json": {
                "example": {
                  "code": "forbidden",
                  "data": {},
                  "message": "Missing required access scope"
                },
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "If authenticated client does not have the required access scopes."
          }
        },
        "security": [
          {
            "httpAuth": []
          }
        ],
        "tags": [
          "Profile"
        ]
      }
    },
    "/api/profile/client-settings": {
      "get": {
        "description": "Requirements:<br/>- auth-client scopes: \"profile:read\"",
        "operationId": "getClientSettings",
        "parameters": [
          {
            "in": "query",
            "name": "path",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {}
              }
            },
            "description": ""
          },
          "401": {
            "content": {
              "application/json": {
                "example": {
                  "code": "missing_token",
                  "data": {},
                  "message": "Access token is missing"
                },
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "If missing authentication token."
          },
          "403": {
            "content": {
              "application/json": {
                "example": {
                  "code": "forbidden",
                  "data": {},
                  "message": "Missing required access scope"
                },
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "If authenticated client does not have the required access scopes."
          }
        },
        "security": [
          {
            "httpAuth": []
          }
        ],
        "tags": [
          "Profile"
        ]
      },
      "put": {
        "description": "Requirements:<br/>- auth-client scopes: \"profile\"",
        "operationId": "setClientSettings",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SetClientSettingsRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": ""
          },
          "401": {
            "content": {
              "application/json": {
                "example": {
                  "code": "missing_token",
                  "data": {},
                  "message": "Access token is missing"
                },
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "If missing authentication token."
          },
          "403": {
            "content": {
              "application/json": {
                "example": {
                  "code": "forbidden",
                  "data": {},
                  "message": "Missing required access scope"
                },
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "If authenticated client does not have the required access scopes."
          }
        },
        "security": [
          {
            "httpAuth": []
          }
        ],
        "tags": [
          "Profile"
        ]
      }
    },
    "/api/team": {
      "get": {
        "description": "Requirements:<br/>- auth-client scopes: \"team:read\"",
        "operationId": "retrieveTeam",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Team"
                }
              }
            },
            "description": ""
          },
          "401": {
            "content": {
              "application/json": {
                "example": {
                  "code": "missing_token",
                  "data": {},
                  "message": "Access token is missing"
                },
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "If missing authentication token."
          },
          "403": {
            "content": {
              "application/json": {
                "example": {
                  "code": "forbidden",
                  "data": {},
                  "message": "Missing required access scope"
                },
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "If authenticated client does not have the required access scopes."
          }
        },
        "security": [
          {
            "httpAuth": []
          }
        ],
        "tags": [
          "Team"
        ]
      }
    },
    "/api/team/flags": {
      "patch": {
        "description": "Requirements:<br/>- auth-client scopes: \"team\"<br/>- user role: \"admin\"",
        "operationId": "updateTeamFlags",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateTeamFlagsRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TeamFlags"
                }
              }
            },
            "description": ""
          },
          "401": {
            "content": {
              "application/json": {
                "example": {
                  "code": "missing_token",
                  "data": {},
                  "message": "Access token is missing"
                },
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "If missing authentication token."
          },
          "403": {
            "content": {
              "application/json": {
                "example": {
                  "code": "forbidden",
                  "data": {},
                  "message": "Insufficient role"
                },
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "If user does not match the required role, or authenticated client does not have the required access scopes."
          }
        },
        "security": [
          {
            "httpAuth": []
          }
        ],
        "tags": [
          "Team"
        ]
      }
    },
    "/api/team/tos": {
      "post": {
        "description": "Requirements:<br/>- auth-client scopes: \"team\"<br/>- user role: \"admin\"",
        "operationId": "acceptTermsOfService",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/StoreAcceptedTosRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": ""
          },
          "401": {
            "content": {
              "application/json": {
                "example": {
                  "code": "missing_token",
                  "data": {},
                  "message": "Access token is missing"
                },
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "If missing authentication token."
          },
          "403": {
            "content": {
              "application/json": {
                "example": {
                  "code": "forbidden",
                  "data": {},
                  "message": "Insufficient role"
                },
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "If user does not match the required role, or authenticated client does not have the required access scopes."
          }
        },
        "security": [
          {
            "httpAuth": []
          }
        ],
        "tags": [
          "Team"
        ]
      }
    },
    "/api/team/users": {
      "get": {
        "description": "List team users.<br/>Requirements:<br/>- auth-client scopes: \"team:read\"",
        "operationId": "listUsers",
        "parameters": [
          {
            "in": "query",
            "name": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/User"
                  },
                  "type": "array"
                }
              }
            },
            "description": ""
          },
          "401": {
            "content": {
              "application/json": {
                "example": {
                  "code": "missing_token",
                  "data": {},
                  "message": "Access token is missing"
                },
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "If missing authentication token."
          },
          "403": {
            "content": {
              "application/json": {
                "example": {
                  "code": "forbidden",
                  "data": {},
                  "message": "Missing required access scope"
                },
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "If authenticated client does not have the required access scopes."
          }
        },
        "security": [
          {
            "httpAuth": []
          }
        ],
        "tags": [
          "Team"
        ]
      }
    },
    "/api/team/users/disabled": {
      "post": {
        "description": "Requirements:<br/>- auth-client scopes: \"team\"<br/>- user role: \"admin\"",
        "operationId": "changeUserDisabled",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ChangeUserDisabledRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": ""
          },
          "401": {
            "content": {
              "application/json": {
                "example": {
                  "code": "missing_token",
                  "data": {},
                  "message": "Access token is missing"
                },
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "If missing authentication token."
          },
          "403": {
            "content": {
              "application/json": {
                "example": {
                  "code": "forbidden",
                  "data": {},
                  "message": "Insufficient role"
                },
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "If user does not match the required role, or authenticated client does not have the required access scopes."
          }
        },
        "security": [
          {
            "httpAuth": []
          }
        ],
        "tags": [
          "Team"
        ]
      }
    },
    "/api/team/users/invite": {
      "post": {
        "description": "Requirements:<br/>- auth-client scopes: \"team\"<br/>- user role: \"admin\"",
        "operationId": "sendUserInvite",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/InviteUserRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            },
            "description": ""
          },
          "401": {
            "content": {
              "application/json": {
                "example": {
                  "code": "missing_token",
                  "data": {},
                  "message": "Access token is missing"
                },
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "If missing authentication token."
          },
          "403": {
            "content": {
              "application/json": {
                "example": {
                  "code": "forbidden",
                  "data": {},
                  "message": "Insufficient role"
                },
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "If user does not match the required role, or authenticated client does not have the required access scopes."
          }
        },
        "security": [
          {
            "httpAuth": []
          }
        ],
        "tags": [
          "Team"
        ]
      }
    },
    "/api/team/users/invite/bulk": {
      "post": {
        "description": "Requirements:<br/>- auth-client scopes: \"team\"<br/>- user role: \"admin\"",
        "operationId": "sendBulkUserInvites",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BulkInviteUsersRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/User"
                  },
                  "type": "array"
                }
              }
            },
            "description": ""
          },
          "401": {
            "content": {
              "application/json": {
                "example": {
                  "code": "missing_token",
                  "data": {},
                  "message": "Access token is missing"
                },
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "If missing authentication token."
          },
          "403": {
            "content": {
              "application/json": {
                "example": {
                  "code": "forbidden",
                  "data": {},
                  "message": "Insufficient role"
                },
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "If user does not match the required role, or authenticated client does not have the required access scopes."
          }
        },
        "security": [
          {
            "httpAuth": []
          }
        ],
        "tags": [
          "Team"
        ]
      }
    },
    "/api/team/users/invite/create": {
      "post": {
        "description": "Requirements:<br/>- auth-client scopes: \"team\"<br/>- user role: \"admin\"",
        "operationId": "createUserInvite",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateUserInviteRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": ""
          },
          "401": {
            "content": {
              "application/json": {
                "example": {
                  "code": "missing_token",
                  "data": {},
                  "message": "Access token is missing"
                },
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "If missing authentication token."
          },
          "403": {
            "content": {
              "application/json": {
                "example": {
                  "code": "forbidden",
                  "data": {},
                  "message": "Insufficient role"
                },
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "If user does not match the required role, or authenticated client does not have the required access scopes."
          }
        },
        "security": [
          {
            "httpAuth": []
          }
        ],
        "tags": [
          "Team"
        ]
      }
    },
    "/api/team/users/invite/resend": {
      "post": {
        "description": "Requirements:<br/>- auth-client scopes: \"team\"<br/>- user role: \"admin\"",
        "operationId": "resendUserInvite",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ResendUserInviteRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": ""
          },
          "401": {
            "content": {
              "application/json": {
                "example": {
                  "code": "missing_token",
                  "data": {},
                  "message": "Access token is missing"
                },
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "If missing authentication token."
          },
          "403": {
            "content": {
              "application/json": {
                "example": {
                  "code": "forbidden",
                  "data": {},
                  "message": "Insufficient role"
                },
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "If user does not match the required role, or authenticated client does not have the required access scopes."
          }
        },
        "security": [
          {
            "httpAuth": []
          }
        ],
        "tags": [
          "Team"
        ]
      }
    },
    "/api/team/users/kick": {
      "post": {
        "description": "Requirements:<br/>- auth-client scopes: \"team\"<br/>- user role: \"admin\"",
        "operationId": "kickUser",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/KickUserRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": ""
          },
          "401": {
            "content": {
              "application/json": {
                "example": {
                  "code": "missing_token",
                  "data": {},
                  "message": "Access token is missing"
                },
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "If missing authentication token."
          },
          "403": {
            "content": {
              "application/json": {
                "example": {
                  "code": "forbidden",
                  "data": {},
                  "message": "Insufficient role"
                },
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "If user does not match the required role, or authenticated client does not have the required access scopes."
          }
        },
        "security": [
          {
            "httpAuth": []
          }
        ],
        "tags": [
          "Team"
        ]
      }
    },
    "/api/team/users/role": {
      "post": {
        "description": "Requirements:<br/>- auth-client scopes: \"team\"<br/>- user role: \"admin\"",
        "operationId": "changeUserRole",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ChangeUserRoleRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": ""
          },
          "401": {
            "content": {
              "application/json": {
                "example": {
                  "code": "missing_token",
                  "data": {},
                  "message": "Access token is missing"
                },
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "If missing authentication token."
          },
          "403": {
            "content": {
              "application/json": {
                "example": {
                  "code": "forbidden",
                  "data": {},
                  "message": "Insufficient role"
                },
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "If user does not match the required role, or authenticated client does not have the required access scopes."
          }
        },
        "security": [
          {
            "httpAuth": []
          }
        ],
        "tags": [
          "Team"
        ]
      }
    },
    "/api/templates": {
      "get": {
        "description": "Returns all workspace-templates available to the current team.<br/>Requirements:<br/>- auth-client scopes: \"workspace:read\"",
        "operationId": "listTemplates",
        "parameters": [
          {
            "deprecated": true,
            "description": "Enable sudo-mode for admins for a single request, which gives full permission to all workspaces in the team.",
            "in": "query",
            "name": "actAsAdmin",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "description": "How many elements to skip.",
            "in": "query",
            "name": "offset",
            "required": false,
            "schema": {
              "default": 0,
              "format": "int32",
              "minimum": 0,
              "type": "integer"
            }
          },
          {
            "description": "How many elements to return.",
            "in": "query",
            "name": "limit",
            "required": false,
            "schema": {
              "default": 100,
              "format": "int32",
              "maximum": 100,
              "minimum": 0,
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TemplatePageWithEmbed"
                }
              }
            },
            "description": ""
          },
          "401": {
            "content": {
              "application/json": {
                "example": {
                  "code": "missing_token",
                  "data": {},
                  "message": "Access token is missing"
                },
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "If missing authentication token."
          },
          "403": {
            "content": {
              "application/json": {
                "example": {
                  "code": "forbidden",
                  "data": {},
                  "message": "Missing required access scope"
                },
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "If authenticated client does not have the required access scopes."
          }
        },
        "security": [
          {
            "httpAuth": []
          }
        ],
        "summary": "List templates",
        "tags": [
          "Templates"
        ]
      }
    },
    "/api/templates/{templateId}": {
      "post": {
        "description": "Installs the requested template with the given parameters.\nReturns a newly created workspace.\nIf the template creates multiple workspaces - then it still returns a single workspace which is considered by the template as \"main\".<br/>Requirements:<br/>- auth-client scopes: \"workspace\"",
        "operationId": "applyTemplate",
        "parameters": [
          {
            "deprecated": true,
            "description": "Enable sudo-mode for admins for a single request, which gives full permission to all workspaces in the team.",
            "in": "query",
            "name": "actAsAdmin",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "in": "path",
            "name": "templateId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ApplyTemplateRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WorkspaceWithWorkspaceEmbed"
                }
              }
            },
            "description": ""
          },
          "401": {
            "content": {
              "application/json": {
                "example": {
                  "code": "missing_token",
                  "data": {},
                  "message": "Access token is missing"
                },
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "If missing authentication token."
          },
          "403": {
            "content": {
              "application/json": {
                "example": {
                  "code": "forbidden",
                  "data": {},
                  "message": "Missing required access scope"
                },
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "If authenticated client does not have the required access scopes."
          }
        },
        "security": [
          {
            "httpAuth": []
          }
        ],
        "summary": "Install template",
        "tags": [
          "Templates"
        ]
      }
    },
    "/api/workspaces": {
      "post": {
        "description": "Returns newly created workspace with its sanitised data.<br/>Requirements:<br/>- auth-client scopes: \"workspace\"<br/>- user permission: \"write\" or higher",
        "operationId": "createWorkspace",
        "parameters": [
          {
            "deprecated": true,
            "description": "Enable sudo-mode for admins for a single request, which gives full permission to all workspaces in the team.",
            "in": "query",
            "name": "actAsAdmin",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateWorkspaceRequest"
              }
            },
            "application/json+markdown": {
              "schema": {
                "$ref": "#/components/schemas/CreateWorkspaceRequestWithMD"
              }
            },
            "application/vnd.airfocus.markdown+json": {
              "schema": {
                "$ref": "#/components/schemas/CreateWorkspaceRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WorkspaceWithWorkspaceEmbed"
                }
              },
              "application/json+markdown": {
                "schema": {
                  "$ref": "#/components/schemas/WorkspaceWithMDWithWorkspaceEmbed"
                }
              },
              "application/vnd.airfocus.markdown+json": {
                "schema": {
                  "$ref": "#/components/schemas/WorkspaceWithWorkspaceEmbed"
                }
              }
            },
            "description": ""
          },
          "400": {
            "content": {
              "application/json": {
                "example": {
                  "code": "bad_request",
                  "data": {},
                  "message": "Request body is invalid"
                },
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "If payload is invalid."
          },
          "401": {
            "content": {
              "application/json": {
                "example": {
                  "code": "missing_token",
                  "data": {},
                  "message": "Access token is missing"
                },
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "If missing authentication token."
          },
          "403": {
            "content": {
              "application/json": {
                "example": {
                  "code": "forbidden",
                  "data": {},
                  "message": "Insufficient permission"
                },
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "If user does not have the required permission, or authenticated client does not have the required access scopes."
          },
          "default": {
            "content": {
              "application/json": {
                "example": {
                  "code": "unknown_error",
                  "data": {},
                  "message": "Server error"
                },
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "If any other error happens."
          }
        },
        "security": [
          {
            "httpAuth": []
          }
        ],
        "summary": "Create a new workspace",
        "tags": [
          "CRUD",
          "Workspaces"
        ]
      }
    },
    "/api/workspaces/bulk": {
      "post": {
        "description": "Accepts a list of create/update/patch/delete operations (see the request model for more details).<br/>\nEach operation can target a single or multiple workspaces.<br/>\nReturns a list of results for each input operation including errors.<br/>\nGuarantees that the size and order of the returned results matches the input list of operations.<br/>Requirements:<br/>- auth-client scopes: \"workspace\"<br/>- user permission: \"write\" or higher",
        "operationId": "bulkWorkspaces",
        "parameters": [
          {
            "deprecated": true,
            "description": "Enable sudo-mode for admins for a single request, which gives full permission to all workspaces in the team.",
            "in": "query",
            "name": "actAsAdmin",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "items": {
                  "$ref": "#/components/schemas/WorkspaceBulkAction"
                },
                "type": "array"
              }
            },
            "application/json+markdown": {
              "schema": {
                "items": {
                  "$ref": "#/components/schemas/WorkspaceBulkAction"
                },
                "type": "array"
              }
            },
            "application/vnd.airfocus.markdown+json": {
              "schema": {
                "items": {
                  "$ref": "#/components/schemas/WorkspaceBulkAction"
                },
                "type": "array"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WorkspaceWithWorkspaceEmbedOrNullList"
                }
              },
              "application/json+markdown": {
                "schema": {
                  "$ref": "#/components/schemas/WorkspaceWithMDWithWorkspaceEmbedOrNullList"
                }
              },
              "application/vnd.airfocus.markdown+json": {
                "schema": {
                  "$ref": "#/components/schemas/WorkspaceWithWorkspaceEmbedOrNullList"
                }
              }
            },
            "description": ""
          },
          "400": {
            "content": {
              "application/json": {
                "example": {
                  "code": "bad_request",
                  "data": {},
                  "message": "Request body is invalid"
                },
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "If payload is invalid."
          },
          "401": {
            "content": {
              "application/json": {
                "example": {
                  "code": "missing_token",
                  "data": {},
                  "message": "Access token is missing"
                },
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "If missing authentication token."
          },
          "403": {
            "content": {
              "application/json": {
                "example": {
                  "code": "forbidden",
                  "data": {},
                  "message": "Insufficient permission"
                },
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "If user does not have the required permission, or authenticated client does not have the required access scopes."
          },
          "default": {
            "content": {
              "application/json": {
                "example": {
                  "code": "unknown_error",
                  "data": {},
                  "message": "Server error"
                },
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "If any other error happens."
          }
        },
        "security": [
          {
            "httpAuth": []
          }
        ],
        "summary": "Perform multiple operations with workspaces",
        "tags": [
          "CRUD",
          "Workspaces"
        ]
      }
    },
    "/api/workspaces/count": {
      "get": {
        "description": "Returns the total counter number.<br/>Requirements:<br/>- auth-client scopes: \"workspace:read\"<br/>- user permission: \"read\" or higher",
        "operationId": "countWorkspaces",
        "parameters": [
          {
            "deprecated": true,
            "description": "Enable sudo-mode for admins for a single request, which gives full permission to all workspaces in the team.",
            "in": "query",
            "name": "actAsAdmin",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "format": "int32",
                  "type": "integer"
                }
              }
            },
            "description": ""
          },
          "401": {
            "content": {
              "application/json": {
                "example": {
                  "code": "missing_token",
                  "data": {},
                  "message": "Access token is missing"
                },
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "If missing authentication token."
          },
          "403": {
            "content": {
              "application/json": {
                "example": {
                  "code": "forbidden",
                  "data": {},
                  "message": "Insufficient permission"
                },
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "If user does not have the required permission, or authenticated client does not have the required access scopes."
          }
        },
        "security": [
          {
            "httpAuth": []
          }
        ],
        "summary": "Count workspaces in the current team.",
        "tags": [
          "Workspaces"
        ]
      }
    },
    "/api/workspaces/extensions/fields": {
      "get": {
        "deprecated": true,
        "description": "Returns all field-types available in the system.<br/>Requirements:<br/>  - auth-client scopes: \"workspace:read\"<br/>  - user permission: \"read\" or higher<br/>  - team features: \"team-fields\" when operating with team-fields<br/>Returns:<br/>403 if user does not have the required permission",
        "operationId": "listFieldTypesLegacy",
        "parameters": [
          {
            "deprecated": true,
            "description": "Enable sudo-mode for admins for a single request, which gives full permission to all workspaces in the team.",
            "in": "query",
            "name": "actAsAdmin",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/FieldServerEndpointsFieldTypeInfo"
                  },
                  "type": "array"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "httpAuth": []
          }
        ],
        "summary": "List all available field types",
        "tags": [
          "Fields"
        ]
      }
    },
    "/api/workspaces/extensions/views/inbox/{viewId}/counters": {
      "post": {
        "description": "Requirements:<br/>- auth-client scopes: \"workspace:read\"<br/>- team features: \"view:inbox\"<br/>- user permission: \"read\" or higher",
        "operationId": "retrieveInboxViewCounters",
        "parameters": [
          {
            "deprecated": true,
            "description": "Enable sudo-mode for admins for a single request, which gives full permission to all workspaces in the team.",
            "in": "query",
            "name": "actAsAdmin",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "in": "path",
            "name": "viewId",
            "required": true,
            "schema": {
              "format": "uuid",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/InboxViewCountersRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/InboxViewCounter"
                  },
                  "type": "array"
                }
              }
            },
            "description": ""
          },
          "400": {
            "content": {
              "application/json": {
                "example": {
                  "code": "not_found",
                  "data": {},
                  "message": "Unknown entity 'fe4c0f30-aa35-3c41-99f9-a5f69c8c4192'"
                },
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "If path parameters are invalid or payload is invalid or resource does not exist."
          },
          "401": {
            "content": {
              "application/json": {
                "example": {
                  "code": "missing_token",
                  "data": {},
                  "message": "Access token is missing"
                },
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "If missing authentication token."
          },
          "403": {
            "content": {
              "application/json": {
                "example": {
                  "code": "forbidden",
                  "data": {},
                  "message": "Insufficient permission"
                },
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "If user does not have the required permission, or user's team does not have access to the required features, or authenticated client does not have the required access scopes."
          },
          "default": {
            "content": {
              "application/json": {
                "example": {
                  "code": "unknown_error",
                  "data": {},
                  "message": "Server error"
                },
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "If any other error happens."
          }
        },
        "security": [
          {
            "httpAuth": []
          }
        ],
        "summary": "Retrieve counters of items in each tab of the view."
      }
    },
    "/api/workspaces/fields/add-team-field": {
      "post": {
        "deprecated": true,
        "description": "Links existing team-fields to existing workspaces.\nReturns updated fields with their linked workspaces embedded.\nReturns an error if either of the requested fields is not a team-field.\nIgnores existing links.\n<br/>Requirements:<br/>  - auth-client scopes: \"workspace\"<br/>  - user permission: \"full\"<br/>  - team features: \"team-fields\" when operating with team-fields<br/>  - user role: \"admin\" when operating with team-fields<br/>Returns:<br/>403 if user does not have the required permission",
        "operationId": "linkTeamFieldsToWorkspacesLegacy",
        "parameters": [
          {
            "deprecated": true,
            "description": "Enable sudo-mode for admins for a single request, which gives full permission to all workspaces in the team.",
            "in": "query",
            "name": "actAsAdmin",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/FieldServerEndpointsFieldToWorkspaceLink"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FieldWithFieldEmbed"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "httpAuth": []
          }
        ],
        "summary": "Add team-field to workspace",
        "tags": [
          "Fields"
        ]
      }
    },
    "/api/workspaces/fields/install-field": {
      "post": {
        "deprecated": true,
        "description": "Installs a new field.\nIf it's a team-field, then it's possible to install it with empty or any non-empty amount of linked workspaces.\nOtherwise, if it's not a team-field, then exactly one linked workspace should be specified.<br/>Requirements:<br/>  - auth-client scopes: \"workspace\"<br/>  - user permission: \"full\"<br/>  - team features: \"team-fields\" when operating with team-fields<br/>  - user role: \"admin\" when operating with team-fields<br/>Returns:<br/>403 if user does not have the required permission",
        "operationId": "installFieldLegacy",
        "parameters": [
          {
            "deprecated": true,
            "description": "Enable sudo-mode for admins for a single request, which gives full permission to all workspaces in the team.",
            "in": "query",
            "name": "actAsAdmin",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/FieldServerEndpointsInstallFieldRequestLegacy"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FieldWithFieldEmbed"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "httpAuth": []
          }
        ],
        "summary": "Install a new field",
        "tags": [
          "Fields"
        ]
      }
    },
    "/api/workspaces/fields/reconfigure-field": {
      "post": {
        "deprecated": true,
        "description": "Updates configuration properties of an existing field.<br/>Requirements:<br/>  - auth-client scopes: \"workspace\"<br/>  - user permission: \"full\"<br/>  - team features: \"team-fields\" when operating with team-fields<br/>  - user role: \"admin\" when operating with team-fields<br/>Returns:<br/>403 if user does not have the required permission",
        "operationId": "reconfigureFieldLegacy",
        "parameters": [
          {
            "deprecated": true,
            "description": "Enable sudo-mode for admins for a single request, which gives full permission to all workspaces in the team.",
            "in": "query",
            "name": "actAsAdmin",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/FieldServerEndpointsReconfigureFieldRequestLegacy"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FieldWithFieldEmbed"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "httpAuth": []
          }
        ],
        "summary": "Reconfigure field",
        "tags": [
          "Fields"
        ]
      }
    },
    "/api/workspaces/fields/team-fields": {
      "get": {
        "deprecated": true,
        "description": "Returns all team-fields installed for the current team.<br/>Requirements:<br/>  - auth-client scopes: \"workspace:read\"<br/>  - user permission: \"read\" or higher<br/>  - team features: \"team-fields\" when operating with team-fields<br/>Returns:<br/>403 if user does not have the required permission",
        "operationId": "getAllTeamFieldsLegacy",
        "parameters": [
          {
            "deprecated": true,
            "description": "Enable sudo-mode for admins for a single request, which gives full permission to all workspaces in the team.",
            "in": "query",
            "name": "actAsAdmin",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FieldWithFieldEmbedPage"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "httpAuth": []
          }
        ],
        "summary": "List team-fields",
        "tags": [
          "Fields"
        ]
      }
    },
    "/api/workspaces/global-search": {
      "post": {
        "description": "Requirements:<br/>- auth-client scopes: \"workspace:read\"",
        "operationId": "searchGlobal",
        "parameters": [
          {
            "deprecated": true,
            "description": "Enable sudo-mode for admins for a single request, which gives full permission to all workspaces in the team.",
            "in": "query",
            "name": "actAsAdmin",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "description": "How many elements to skip.",
            "in": "query",
            "name": "offset",
            "required": false,
            "schema": {
              "default": 0,
              "format": "int32",
              "minimum": 0,
              "type": "integer"
            }
          },
          {
            "description": "How many elements to return.",
            "in": "query",
            "name": "limit",
            "required": false,
            "schema": {
              "default": 25,
              "format": "int32",
              "maximum": 1000,
              "minimum": 0,
              "type": "integer"
            }
          },
          {
            "deprecated": true,
            "description": "From which element the page should start.",
            "in": "query",
            "name": "from",
            "required": false,
            "schema": {
              "default": 0,
              "deprecated": true,
              "format": "int32",
              "minimum": 0,
              "type": "integer"
            }
          },
          {
            "deprecated": true,
            "description": "At which element the page should end (excluding it).",
            "in": "query",
            "name": "to",
            "required": false,
            "schema": {
              "deprecated": true,
              "format": "int32",
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GlobalSearchQuery"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GlobalSearchResultPage"
                }
              }
            },
            "description": ""
          },
          "401": {
            "content": {
              "application/json": {
                "example": {
                  "code": "missing_token",
                  "data": {},
                  "message": "Access token is missing"
                },
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "If missing authentication token."
          },
          "403": {
            "content": {
              "application/json": {
                "example": {
                  "code": "forbidden",
                  "data": {},
                  "message": "Missing required access scope"
                },
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "If authenticated client does not have the required access scopes."
          }
        },
        "security": [
          {
            "httpAuth": []
          }
        ],
        "tags": [
          "Global search"
        ]
      }
    },
    "/api/workspaces/groups": {
      "post": {
        "description": "Returns newly created workspace group with its sanitised data.<br/>Requirements:<br/>  - auth-client scopes: \"workspace\"<br/>  - user permission: \"write\" or higher<br/>Returns:<br/>403 if user does not have the required permission",
        "operationId": "createWorkspaceGroup",
        "parameters": [
          {
            "deprecated": true,
            "description": "Enable sudo-mode for admins for a single request, which gives full permission to all workspaces in the team.",
            "in": "query",
            "name": "actAsAdmin",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/WorkspaceGroup"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WorkspaceGroupWithWorkspaceGroupEmbed"
                }
              }
            },
            "description": ""
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "httpAuth": []
          }
        ],
        "summary": "Create a new workspace group",
        "tags": [
          "CRUD",
          "WorkspaceGroups"
        ]
      }
    },
    "/api/workspaces/groups/assign": {
      "post": {
        "description": "<br/>Requirements:<br/>  - auth-client scopes: \"workspace\"<br/>  - user permission: \"write\" or higher<br/>Returns:<br/>403 if user does not have the required permission",
        "operationId": "assignWorkspaceToGroup",
        "parameters": [
          {
            "deprecated": true,
            "description": "Enable sudo-mode for admins for a single request, which gives full permission to all workspaces in the team.",
            "in": "query",
            "name": "actAsAdmin",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/WorkspaceGroupAssignWorkspaceRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": ""
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "httpAuth": []
          }
        ],
        "summary": "Update workspace-group permissions.",
        "tags": [
          "WorkspaceGroups"
        ]
      }
    },
    "/api/workspaces/groups/bulk": {
      "post": {
        "description": "Accepts a list of create/update/patch/delete operations (see the request model for more details).<br/>\nEach operations can target a single or multiple workspace groups.<br/>\nReturns a list of results for each input operation including errors.<br/>\nGuarantees that the size and order of the returned results matches the input list of operations.<br/>Requirements:<br/>  - auth-client scopes: \"workspace\"<br/>  - user permission: \"write\" or higher<br/>Returns:<br/>403 if user does not have the required permission",
        "operationId": "bulkWorkspaceGroups",
        "parameters": [
          {
            "deprecated": true,
            "description": "Enable sudo-mode for admins for a single request, which gives full permission to all workspaces in the team.",
            "in": "query",
            "name": "actAsAdmin",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "items": {
                  "$ref": "#/components/schemas/WorkspaceGroupBulkAction"
                },
                "type": "array"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WorkspaceGroupWithWorkspaceGroupEmbedOrNullList"
                }
              }
            },
            "description": ""
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "httpAuth": []
          }
        ],
        "summary": "Perform multiple operations with workspace groups",
        "tags": [
          "CRUD",
          "WorkspaceGroups"
        ]
      }
    },
    "/api/workspaces/groups/list": {
      "post": {
        "description": "Returns a list of workspace groups.<br/>\nReturns null for those workspace groups which are not found or not accessible.<br/>\nGuarantees that the size and order of the returned list matches the requested IDs.<br/>Requirements:<br/>  - auth-client scopes: \"workspace:read\"<br/>  - user permission: \"read\" or higher<br/>Returns:<br/>403 if user does not have the required permission",
        "operationId": "listWorkspaceGroups",
        "parameters": [
          {
            "deprecated": true,
            "description": "Enable sudo-mode for admins for a single request, which gives full permission to all workspaces in the team.",
            "in": "query",
            "name": "actAsAdmin",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "items": {
                  "format": "uuid",
                  "type": "string"
                },
                "type": "array"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WorkspaceGroupWithWorkspaceGroupEmbedOrNullList"
                }
              }
            },
            "description": ""
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "httpAuth": []
          }
        ],
        "summary": "Retrieve multiple workspace groups by their IDs",
        "tags": [
          "CRUD",
          "WorkspaceGroups"
        ]
      }
    },
    "/api/workspaces/groups/search": {
      "post": {
        "description": "Returns all workspace groups or searches workspace groups by query. Always returns only workspace groups which are accessible by the current user.<br/>Requirements:<br/>  - auth-client scopes: \"workspace:read\"<br/>  - user permission: \"read\" or higher<br/>Returns:<br/>403 if user does not have the required permission",
        "operationId": "searchWorkspaceGroups",
        "parameters": [
          {
            "deprecated": true,
            "description": "Enable sudo-mode for admins for a single request, which gives full permission to all workspaces in the team.",
            "in": "query",
            "name": "actAsAdmin",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "description": "How many elements to skip.",
            "in": "query",
            "name": "offset",
            "required": false,
            "schema": {
              "default": 0,
              "format": "int32",
              "minimum": 0,
              "type": "integer"
            }
          },
          {
            "description": "How many elements to return.",
            "in": "query",
            "name": "limit",
            "required": false,
            "schema": {
              "default": 1000,
              "format": "int32",
              "maximum": 1000,
              "minimum": 0,
              "type": "integer"
            }
          },
          {
            "deprecated": true,
            "description": "From which element the page should start.",
            "in": "query",
            "name": "from",
            "required": false,
            "schema": {
              "default": 0,
              "deprecated": true,
              "format": "int32",
              "minimum": 0,
              "type": "integer"
            }
          },
          {
            "deprecated": true,
            "description": "At which element the page should end (excluding it).",
            "in": "query",
            "name": "to",
            "required": false,
            "schema": {
              "deprecated": true,
              "format": "int32",
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/WorkspaceGroupSearchQuery"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WorkspaceGroupWithWorkspaceGroupSearchEmbedPage"
                }
              }
            },
            "description": ""
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "httpAuth": []
          }
        ],
        "summary": "Retrieve or search workspace groups",
        "tags": [
          "CRUD",
          "WorkspaceGroups"
        ]
      }
    },
    "/api/workspaces/groups/{workspaceGroupId}": {
      "delete": {
        "description": "Returns empty result if the workspace group was successfully deleted.<br/>Requirements:<br/>  - auth-client scopes: \"workspace\"<br/>  - user permission: \"write\" or higher<br/>Returns:<br/>400 if the resource is not found<br/>403 if user does not have the required permission",
        "operationId": "deleteWorkspaceGroup",
        "parameters": [
          {
            "deprecated": true,
            "description": "Enable sudo-mode for admins for a single request, which gives full permission to all workspaces in the team.",
            "in": "query",
            "name": "actAsAdmin",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "in": "path",
            "name": "workspaceGroupId",
            "required": true,
            "schema": {
              "format": "uuid",
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": ""
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "httpAuth": []
          }
        ],
        "summary": "Delete an existing workspace group",
        "tags": [
          "CRUD",
          "WorkspaceGroups"
        ]
      },
      "get": {
        "description": "Returns found workspace group.<br/>Requirements:<br/>  - auth-client scopes: \"workspace:read\"<br/>  - user permission: \"read\" or higher<br/>Returns:<br/>400 if the resource is not found<br/>403 if user does not have the required permission",
        "operationId": "retrieveWorkspaceGroup",
        "parameters": [
          {
            "deprecated": true,
            "description": "Enable sudo-mode for admins for a single request, which gives full permission to all workspaces in the team.",
            "in": "query",
            "name": "actAsAdmin",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "in": "path",
            "name": "workspaceGroupId",
            "required": true,
            "schema": {
              "format": "uuid",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WorkspaceGroupWithWorkspaceGroupEmbed"
                }
              }
            },
            "description": ""
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "httpAuth": []
          }
        ],
        "summary": "Retrieve a single workspace group by its ID",
        "tags": [
          "CRUD",
          "WorkspaceGroups"
        ]
      },
      "patch": {
        "description": "Returns the whole updated workspace group with its sanitised data.<br/>Requirements:<br/>  - auth-client scopes: \"workspace\"<br/>  - user permission: \"write\" or higher<br/>Returns:<br/>400 if the resource is not found<br/>403 if user does not have the required permission",
        "operationId": "patchWorkspaceGroup",
        "parameters": [
          {
            "deprecated": true,
            "description": "Enable sudo-mode for admins for a single request, which gives full permission to all workspaces in the team.",
            "in": "query",
            "name": "actAsAdmin",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "in": "path",
            "name": "workspaceGroupId",
            "required": true,
            "schema": {
              "format": "uuid",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/JsonPatch"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WorkspaceGroupWithWorkspaceGroupEmbed"
                }
              }
            },
            "description": ""
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "httpAuth": []
          }
        ],
        "summary": "Patch an existing workspace group",
        "tags": [
          "CRUD",
          "WorkspaceGroups"
        ]
      },
      "put": {
        "description": "Returns updated workspace group with its sanitised data.<br/>Requirements:<br/>  - auth-client scopes: \"workspace\"<br/>  - user permission: \"write\" or higher<br/>Returns:<br/>400 if the resource is not found<br/>403 if user does not have the required permission",
        "operationId": "updateWorkspaceGroup",
        "parameters": [
          {
            "deprecated": true,
            "description": "Enable sudo-mode for admins for a single request, which gives full permission to all workspaces in the team.",
            "in": "query",
            "name": "actAsAdmin",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "in": "path",
            "name": "workspaceGroupId",
            "required": true,
            "schema": {
              "format": "uuid",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/WorkspaceGroup"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WorkspaceGroupWithWorkspaceGroupEmbed"
                }
              }
            },
            "description": ""
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "httpAuth": []
          }
        ],
        "summary": "Update an existing workspace group",
        "tags": [
          "CRUD",
          "WorkspaceGroups"
        ]
      }
    },
    "/api/workspaces/groups/{workspaceGroupId}/permissions": {
      "post": {
        "description": "<br/>Requirements:<br/>  - auth-client scopes: \"workspace\"<br/>  - user permission: \"write\" or higher<br/>Returns:<br/>403 if user does not have the required permission",
        "operationId": "updateWorkspaceGroupPermissions",
        "parameters": [
          {
            "deprecated": true,
            "description": "Enable sudo-mode for admins for a single request, which gives full permission to all workspaces in the team.",
            "in": "query",
            "name": "actAsAdmin",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "in": "path",
            "name": "workspaceGroupId",
            "required": true,
            "schema": {
              "format": "uuid",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/WorkspaceGroupPermissionsUpdateRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": ""
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "httpAuth": []
          }
        ],
        "summary": "Update workspace-group permissions.",
        "tags": [
          "WorkspaceGroups"
        ]
      }
    },
    "/api/workspaces/item-relations": {
      "post": {
        "description": "Returns newly created item-relation with its sanitised data.<br/>Requirements:<br/>- auth-client scopes: \"workspace\"<br/>- user permission: \"write\" or higher",
        "operationId": "createItemRelation",
        "parameters": [
          {
            "deprecated": true,
            "description": "Enable sudo-mode for admins for a single request, which gives full permission to all workspaces in the team.",
            "in": "query",
            "name": "actAsAdmin",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ItemRelationCreateRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ItemRelationWithItemRelationEmbed"
                }
              }
            },
            "description": ""
          },
          "400": {
            "content": {
              "application/json": {
                "example": {
                  "code": "bad_request",
                  "data": {},
                  "message": "Request body is invalid"
                },
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "If payload is invalid."
          },
          "401": {
            "content": {
              "application/json": {
                "example": {
                  "code": "missing_token",
                  "data": {},
                  "message": "Access token is missing"
                },
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "If missing authentication token."
          },
          "403": {
            "content": {
              "application/json": {
                "example": {
                  "code": "forbidden",
                  "data": {},
                  "message": "Insufficient permission"
                },
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "If user does not have the required permission, or authenticated client does not have the required access scopes."
          },
          "default": {
            "content": {
              "application/json": {
                "example": {
                  "code": "unknown_error",
                  "data": {},
                  "message": "Server error"
                },
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "If any other error happens."
          }
        },
        "security": [
          {
            "httpAuth": []
          }
        ],
        "summary": "Create a new item-relation",
        "tags": [
          "CRUD",
          "Items:Relations"
        ]
      }
    },
    "/api/workspaces/item-relations/bulk": {
      "post": {
        "description": "Accepts a list of create/update/patch/delete operations (see the request model for more details).<br/>\nEach operation can target a single or multiple item-relations.<br/>\nReturns a list of results for each input operation including errors.<br/>\nGuarantees that the size and order of the returned results matches the input list of operations.<br/>Requirements:<br/>- auth-client scopes: \"workspace\"<br/>- user permission: \"write\" or higher",
        "operationId": "bulkItemRelations",
        "parameters": [
          {
            "deprecated": true,
            "description": "Enable sudo-mode for admins for a single request, which gives full permission to all workspaces in the team.",
            "in": "query",
            "name": "actAsAdmin",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "items": {
                  "$ref": "#/components/schemas/ItemRelationBulkAction"
                },
                "type": "array"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ItemRelationWithItemRelationEmbedOrNullList"
                }
              }
            },
            "description": ""
          },
          "400": {
            "content": {
              "application/json": {
                "example": {
                  "code": "bad_request",
                  "data": {},
                  "message": "Request body is invalid"
                },
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "If payload is invalid."
          },
          "401": {
            "content": {
              "application/json": {
                "example": {
                  "code": "missing_token",
                  "data": {},
                  "message": "Access token is missing"
                },
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "If missing authentication token."
          },
          "403": {
            "content": {
              "application/json": {
                "example": {
                  "code": "forbidden",
                  "data": {},
                  "message": "Insufficient permission"
                },
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "If user does not have the required permission, or authenticated client does not have the required access scopes."
          },
          "default": {
            "content": {
              "application/json": {
                "example": {
                  "code": "unknown_error",
                  "data": {},
                  "message": "Server error"
                },
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "If any other error happens."
          }
        },
        "security": [
          {
            "httpAuth": []
          }
        ],
        "summary": "Perform multiple operations with item-relations",
        "tags": [
          "CRUD",
          "Items:Relations"
        ]
      }
    },
    "/api/workspaces/item-relations/list": {
      "post": {
        "description": "Returns a list of item-relations resolved for the provided IDs.<br/>\nDoes not fail if any of the requested item-relations is not found or not accessible - instead it returns corresponding error-object instead of an entity-object.<br/>\nGuarantees that the size and order of the returned list matches the requested IDs.<br/>Requirements:<br/>- auth-client scopes: \"workspace:read\"<br/>- user permission: \"read\" or higher",
        "operationId": "listItemRelations",
        "parameters": [
          {
            "deprecated": true,
            "description": "Enable sudo-mode for admins for a single request, which gives full permission to all workspaces in the team.",
            "in": "query",
            "name": "actAsAdmin",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "items": {
                  "format": "uuid",
                  "type": "string"
                },
                "type": "array"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ItemRelationWithItemRelationEmbedOrNullList"
                }
              }
            },
            "description": ""
          },
          "400": {
            "content": {
              "application/json": {
                "example": {
                  "code": "bad_request",
                  "data": {},
                  "message": "Request body is invalid"
                },
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "If payload is invalid."
          },
          "401": {
            "content": {
              "application/json": {
                "example": {
                  "code": "missing_token",
                  "data": {},
                  "message": "Access token is missing"
                },
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "If missing authentication token."
          },
          "403": {
            "content": {
              "application/json": {
                "example": {
                  "code": "forbidden",
                  "data": {},
                  "message": "Insufficient permission"
                },
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "If user does not have the required permission, or authenticated client does not have the required access scopes."
          },
          "default": {
            "content": {
              "application/json": {
                "example": {
                  "code": "unknown_error",
                  "data": {},
                  "message": "Server error"
                },
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "If any other error happens."
          }
        },
        "security": [
          {
            "httpAuth": []
          }
        ],
        "summary": "Retrieve multiple item-relations by their IDs",
        "tags": [
          "CRUD",
          "Items:Relations"
        ]
      }
    },
    "/api/workspaces/item-relations/search": {
      "post": {
        "description": "Returns all item-relations or searches item-relations by query. Always returns only item-relations which are accessible by the current user.<br/>Requirements:<br/>- auth-client scopes: \"workspace:read\"<br/>- user permission: \"read\" or higher",
        "operationId": "searchItemRelations",
        "parameters": [
          {
            "deprecated": true,
            "description": "Enable sudo-mode for admins for a single request, which gives full permission to all workspaces in the team.",
            "in": "query",
            "name": "actAsAdmin",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "description": "How many elements to skip.",
            "in": "query",
            "name": "offset",
            "required": false,
            "schema": {
              "default": 0,
              "format": "int32",
              "minimum": 0,
              "type": "integer"
            }
          },
          {
            "description": "How many elements to return.",
            "in": "query",
            "name": "limit",
            "required": false,
            "schema": {
              "default": 1000,
              "format": "int32",
              "maximum": 1000,
              "minimum": 0,
              "type": "integer"
            }
          },
          {
            "deprecated": true,
            "description": "From which element the page should start.",
            "in": "query",
            "name": "from",
            "required": false,
            "schema": {
              "default": 0,
              "deprecated": true,
              "format": "int32",
              "minimum": 0,
              "type": "integer"
            }
          },
          {
            "deprecated": true,
            "description": "At which element the page should end (excluding it).",
            "in": "query",
            "name": "to",
            "required": false,
            "schema": {
              "deprecated": true,
              "format": "int32",
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ItemRelationSearchQuery"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ItemRelationWithItemRelationEmbedPage"
                }
              }
            },
            "description": ""
          },
          "400": {
            "content": {
              "application/json": {
                "example": {
                  "code": "bad_request",
                  "data": {},
                  "message": "Request body is invalid"
                },
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "If payload is invalid."
          },
          "401": {
            "content": {
              "application/json": {
                "example": {
                  "code": "missing_token",
                  "data": {},
                  "message": "Access token is missing"
                },
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "If missing authentication token."
          },
          "403": {
            "content": {
              "application/json": {
                "example": {
                  "code": "forbidden",
                  "data": {},
                  "message": "Insufficient permission"
                },
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "If user does not have the required permission, or authenticated client does not have the required access scopes."
          },
          "default": {
            "content": {
              "application/json": {
                "example": {
                  "code": "unknown_error",
                  "data": {},
                  "message": "Server error"
                },
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "If any other error happens."
          }
        },
        "security": [
          {
            "httpAuth": []
          }
        ],
        "summary": "Retrieve or search item-relations",
        "tags": [
          "CRUD",
          "Items:Relations"
        ]
      }
    },
    "/api/workspaces/item-relations/{itemRelationId}": {
      "delete": {
        "description": "Returns empty result if the item-relation was successfully deleted.<br/>Requirements:<br/>- auth-client scopes: \"workspace\"<br/>- user permission: \"write\" or higher",
        "operationId": "deleteItemRelation",
        "parameters": [
          {
            "deprecated": true,
            "description": "Enable sudo-mode for admins for a single request, which gives full permission to all workspaces in the team.",
            "in": "query",
            "name": "actAsAdmin",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "in": "path",
            "name": "itemRelationId",
            "required": true,
            "schema": {
              "format": "uuid",
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": ""
          },
          "400": {
            "content": {
              "application/json": {
                "example": {
                  "code": "not_found",
                  "data": {},
                  "message": "Unknown entity 'fe4c0f30-aa35-3c41-99f9-a5f69c8c4192'"
                },
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "If path parameters are invalid or resource does not exist."
          },
          "401": {
            "content": {
              "application/json": {
                "example": {
                  "code": "missing_token",
                  "data": {},
                  "message": "Access token is missing"
                },
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "If missing authentication token."
          },
          "403": {
            "content": {
              "application/json": {
                "example": {
                  "code": "forbidden",
                  "data": {},
                  "message": "Insufficient permission"
                },
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "If user does not have the required permission, or authenticated client does not have the required access scopes."
          },
          "default": {
            "content": {
              "application/json": {
                "example": {
                  "code": "unknown_error",
                  "data": {},
                  "message": "Server error"
                },
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "If any other error happens."
          }
        },
        "security": [
          {
            "httpAuth": []
          }
        ],
        "summary": "Delete an existing item-relation",
        "tags": [
          "CRUD",
          "Items:Relations"
        ]
      },
      "get": {
        "description": "Returns found item-relation.<br/>Requirements:<br/>- auth-client scopes: \"workspace:read\"<br/>- user permission: \"read\" or higher",
        "operationId": "retrieveItemRelation",
        "parameters": [
          {
            "deprecated": true,
            "description": "Enable sudo-mode for admins for a single request, which gives full permission to all workspaces in the team.",
            "in": "query",
            "name": "actAsAdmin",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "in": "path",
            "name": "itemRelationId",
            "required": true,
            "schema": {
              "format": "uuid",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ItemRelationWithItemRelationEmbed"
                }
              }
            },
            "description": ""
          },
          "400": {
            "content": {
              "application/json": {
                "example": {
                  "code": "not_found",
                  "data": {},
                  "message": "Unknown entity 'fe4c0f30-aa35-3c41-99f9-a5f69c8c4192'"
                },
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "If path parameters are invalid or payload is invalid or resource does not exist."
          },
          "401": {
            "content": {
              "application/json": {
                "example": {
                  "code": "missing_token",
                  "data": {},
                  "message": "Access token is missing"
                },
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "If missing authentication token."
          },
          "403": {
            "content": {
              "application/json": {
                "example": {
                  "code": "forbidden",
                  "data": {},
                  "message": "Insufficient permission"
                },
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "If user does not have the required permission, or authenticated client does not have the required access scopes."
          },
          "default": {
            "content": {
              "application/json": {
                "example": {
                  "code": "unknown_error",
                  "data": {},
                  "message": "Server error"
                },
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "If any other error happens."
          }
        },
        "security": [
          {
            "httpAuth": []
          }
        ],
        "summary": "Retrieve a single item-relation by its ID",
        "tags": [
          "CRUD",
          "Items:Relations"
        ]
      },
      "patch": {
        "description": "Returns the whole updated item-relation with its sanitised data.<br/>Requirements:<br/>- auth-client scopes: \"workspace\"<br/>- user permission: \"write\" or higher",
        "operationId": "patchItemRelation",
        "parameters": [
          {
            "deprecated": true,
            "description": "Enable sudo-mode for admins for a single request, which gives full permission to all workspaces in the team.",
            "in": "query",
            "name": "actAsAdmin",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "in": "path",
            "name": "itemRelationId",
            "required": true,
            "schema": {
              "format": "uuid",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/JsonPatch"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ItemRelationWithItemRelationEmbed"
                }
              }
            },
            "description": ""
          },
          "400": {
            "content": {
              "application/json": {
                "example": {
                  "code": "not_found",
                  "data": {},
                  "message": "Unknown entity 'fe4c0f30-aa35-3c41-99f9-a5f69c8c4192'"
                },
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "If path parameters are invalid or payload is invalid or resource does not exist."
          },
          "401": {
            "content": {
              "application/json": {
                "example": {
                  "code": "missing_token",
                  "data": {},
                  "message": "Access token is missing"
                },
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "If missing authentication token."
          },
          "403": {
            "content": {
              "application/json": {
                "example": {
                  "code": "forbidden",
                  "data": {},
                  "message": "Insufficient permission"
                },
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "If user does not have the required permission, or authenticated client does not have the required access scopes."
          },
          "default": {
            "content": {
              "application/json": {
                "example": {
                  "code": "unknown_error",
                  "data": {},
                  "message": "Server error"
                },
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "If any other error happens."
          }
        },
        "security": [
          {
            "httpAuth": []
          }
        ],
        "summary": "Patch an existing item-relation",
        "tags": [
          "CRUD",
          "Items:Relations"
        ]
      },
      "put": {
        "description": "Returns updated item-relation with its sanitised data.<br/>Requirements:<br/>- auth-client scopes: \"workspace\"<br/>- user permission: \"write\" or higher",
        "operationId": "updateItemRelation",
        "parameters": [
          {
            "deprecated": true,
            "description": "Enable sudo-mode for admins for a single request, which gives full permission to all workspaces in the team.",
            "in": "query",
            "name": "actAsAdmin",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "in": "path",
            "name": "itemRelationId",
            "required": true,
            "schema": {
              "format": "uuid",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ItemRelationUpdateRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ItemRelationWithItemRelationEmbed"
                }
              }
            },
            "description": ""
          },
          "400": {
            "content": {
              "application/json": {
                "example": {
                  "code": "not_found",
                  "data": {},
                  "message": "Unknown entity 'fe4c0f30-aa35-3c41-99f9-a5f69c8c4192'"
                },
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "If path parameters are invalid or payload is invalid or resource does not exist."
          },
          "401": {
            "content": {
              "application/json": {
                "example": {
                  "code": "missing_token",
                  "data": {},
                  "message": "Access token is missing"
                },
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "If missing authentication token."
          },
          "403": {
            "content": {
              "application/json": {
                "example": {
                  "code": "forbidden",
                  "data": {},
                  "message": "Insufficient permission"
                },
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "If user does not have the required permission, or authenticated client does not have the required access scopes."
          },
          "default": {
            "content": {
              "application/json": {
                "example": {
                  "code": "unknown_error",
                  "data": {},
                  "message": "Server error"
                },
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "If any other error happens."
          }
        },
        "security": [
          {
            "httpAuth": []
          }
        ],
        "summary": "Update an existing item-relation",
        "tags": [
          "CRUD",
          "Items:Relations"
        ]
      }
    },
    "/api/workspaces/items/alias/{aliasValue}": {
      "get": {
        "description": "Returns found item.<br/>Requirements:<br/>- auth-client scopes: \"workspace:read\"<br/>- user permission: \"read\" or higher",
        "operationId": "retrieveItemByAlias",
        "parameters": [
          {
            "deprecated": true,
            "description": "Enable sudo-mode for admins for a single request, which gives full permission to all workspaces in the team.",
            "in": "query",
            "name": "actAsAdmin",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "example": "DEV-123",
            "in": "path",
            "name": "aliasValue",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ItemWithItemEmbed"
                }
              },
              "application/json+markdown": {
                "schema": {
                  "$ref": "#/components/schemas/ItemWithMDWithItemEmbed"
                }
              },
              "application/vnd.airfocus.markdown+json": {
                "schema": {
                  "$ref": "#/components/schemas/ItemWithItemEmbed"
                }
              }
            },
            "description": ""
          },
          "400": {
            "content": {
              "application/json": {
                "example": {
                  "code": "not_found",
                  "data": {},
                  "message": "Unknown entity 'fe4c0f30-aa35-3c41-99f9-a5f69c8c4192'"
                },
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "If path parameters are invalid or resource does not exist."
          },
          "401": {
            "content": {
              "application/json": {
                "example": {
                  "code": "missing_token",
                  "data": {},
                  "message": "Access token is missing"
                },
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "If missing authentication token."
          },
          "403": {
            "content": {
              "application/json": {
                "example": {
                  "code": "forbidden",
                  "data": {},
                  "message": "Insufficient permission"
                },
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "If user does not have the required permission, or authenticated client does not have the required access scopes."
          },
          "default": {
            "content": {
              "application/json": {
                "example": {
                  "code": "unknown_error",
                  "data": {},
                  "message": "Server error"
                },
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "If any other error happens."
          }
        },
        "security": [
          {
            "httpAuth": []
          }
        ],
        "summary": "Retrieve a single item by its alias (e.g. 'DEV-123').",
        "tags": [
          "Items"
        ]
      }
    },
    "/api/workspaces/items/copy": {
      "post": {
        "description": "Returns ids of newly copied items, with order of the returned ids matching the order of requested source items. Returns Not Found if either of the specified source items does not exist.<br/>Requirements:<br/>- auth-client scopes: \"workspace\"<br/>- user permission: \"write\" or higher",
        "operationId": "copyItems",
        "parameters": [
          {
            "deprecated": true,
            "description": "Enable sudo-mode for admins for a single request, which gives full permission to all workspaces in the team.",
            "in": "query",
            "name": "actAsAdmin",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "description": "Workspace of the source items to be copied.",
            "in": "query",
            "name": "sourceWorkspaceId",
            "required": true,
            "schema": {
              "format": "uuid",
              "type": "string"
            }
          },
          {
            "description": "Target workspace for the newly copied items.",
            "in": "query",
            "name": "targetWorkspaceId",
            "required": true,
            "schema": {
              "format": "uuid",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "items": {
                  "format": "uuid",
                  "type": "string"
                },
                "type": "array"
              }
            }
          },
          "description": "List of item IDs to be copied.",
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "format": "uuid",
                    "type": "string"
                  },
                  "type": "array"
                }
              }
            },
            "description": "List of newly created item IDs."
          },
          "400": {
            "content": {
              "application/json": {
                "example": {
                  "code": "not_found",
                  "data": {},
                  "message": "Unknown entity 'fe4c0f30-aa35-3c41-99f9-a5f69c8c4192'"
                },
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "If payload is invalid or one of the specified source items or the target workspace does not exist."
          },
          "401": {
            "content": {
              "application/json": {
                "example": {
                  "code": "missing_token",
                  "data": {},
                  "message": "Access token is missing"
                },
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "If missing authentication token."
          },
          "403": {
            "content": {
              "application/json": {
                "example": {
                  "code": "forbidden",
                  "data": {},
                  "message": "Insufficient permission"
                },
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "If user does not have the required permission, or authenticated client does not have the required access scopes."
          },
          "default": {
            "content": {
              "application/json": {
                "example": {
                  "code": "unknown_error",
                  "data": {},
                  "message": "Server error"
                },
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "If any other error happens."
          }
        },
        "security": [
          {
            "httpAuth": []
          }
        ],
        "summary": "Copy specified items.",
        "tags": [
          "Items"
        ]
      }
    },
    "/api/workspaces/items/list": {
      "post": {
        "description": "Returns an array of results, where each element is either a found item with its embeddings, or null if there no item with such ID.<br/>Requirements:<br/>- auth-client scopes: \"workspace:read\"<br/>- user permission: \"read\" or higher",
        "operationId": "listItemsGlobal",
        "parameters": [
          {
            "deprecated": true,
            "description": "Enable sudo-mode for admins for a single request, which gives full permission to all workspaces in the team.",
            "in": "query",
            "name": "actAsAdmin",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "items": {
                  "format": "uuid",
                  "type": "string"
                },
                "type": "array"
              }
            }
          },
          "description": "List of item IDs to be retrieve from any workspace in the team.",
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ItemWithItemEmbedOrNullList"
                }
              },
              "application/json+markdown": {
                "schema": {
                  "$ref": "#/components/schemas/ItemWithMDWithItemEmbedOrNullList"
                }
              },
              "application/vnd.airfocus.markdown+json": {
                "schema": {
                  "$ref": "#/components/schemas/ItemWithItemEmbedOrNullList"
                }
              }
            },
            "description": ""
          },
          "400": {
            "content": {
              "application/json": {
                "example": {
                  "code": "not_found",
                  "data": {},
                  "message": "Unknown entity 'fe4c0f30-aa35-3c41-99f9-a5f69c8c4192'"
                },
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "If payload is invalid or resource does not exist."
          },
          "401": {
            "content": {
              "application/json": {
                "example": {
                  "code": "missing_token",
                  "data": {},
                  "message": "Access token is missing"
                },
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "If missing authentication token."
          },
          "403": {
            "content": {
              "application/json": {
                "example": {
                  "code": "forbidden",
                  "data": {},
                  "message": "Insufficient permission"
                },
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "If user does not have the required permission, or authenticated client does not have the required access scopes."
          },
          "default": {
            "content": {
              "application/json": {
                "example": {
                  "code": "unknown_error",
                  "data": {},
                  "message": "Server error"
                },
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "If any other error happens."
          }
        },
        "security": [
          {
            "httpAuth": []
          }
        ],
        "summary": "Retrieve items from any workspace by specified IDs.",
        "tags": [
          "Items"
        ]
      }
    },
    "/api/workspaces/items/move": {
      "post": {
        "description": "Returns ids of newly created items in the target workspace, with order of the returned ids matching the order of requested source items. Returns Not Found if either of the specified source items does not exist.<br/>Requirements:<br/>- auth-client scopes: \"workspace\"<br/>- user permission: \"write\" or higher",
        "operationId": "moveItems",
        "parameters": [
          {
            "deprecated": true,
            "description": "Enable sudo-mode for admins for a single request, which gives full permission to all workspaces in the team.",
            "in": "query",
            "name": "actAsAdmin",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "description": "Workspace of the source items to be moved.",
            "in": "query",
            "name": "sourceWorkspaceId",
            "required": true,
            "schema": {
              "format": "uuid",
              "type": "string"
            }
          },
          {
            "description": "New target workspace for the moved items.",
            "in": "query",
            "name": "targetWorkspaceId",
            "required": true,
            "schema": {
              "format": "uuid",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "items": {
                  "format": "uuid",
                  "type": "string"
                },
                "type": "array"
              }
            }
          },
          "description": "List of item IDs to be moved.",
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "format": "uuid",
                    "type": "string"
                  },
                  "type": "array"
                }
              }
            },
            "description": "List of newly created item IDs."
          },
          "400": {
            "content": {
              "application/json": {
                "example": {
                  "code": "not_found",
                  "data": {},
                  "message": "Unknown entity 'fe4c0f30-aa35-3c41-99f9-a5f69c8c4192'"
                },
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "If payload is invalid or one of the specified source items or the target workspace does not exist."
          },
          "401": {
            "content": {
              "application/json": {
                "example": {
                  "code": "missing_token",
                  "data": {},
                  "message": "Access token is missing"
                },
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "If missing authentication token."
          },
          "403": {
            "content": {
              "application/json": {
                "example": {
                  "code": "forbidden",
                  "data": {},
                  "message": "Insufficient permission"
                },
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "If user does not have the required permission, or authenticated client does not have the required access scopes."
          },
          "default": {
            "content": {
              "application/json": {
                "example": {
                  "code": "unknown_error",
                  "data": {},
                  "message": "Server error"
                },
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "If any other error happens."
          }
        },
        "security": [
          {
            "httpAuth": []
          }
        ],
        "summary": "Move specified items from one workspace to another.",
        "tags": [
          "Items"
        ]
      }
    },
    "/api/workspaces/list": {
      "post": {
        "description": "Returns a list of workspaces resolved for the provided IDs.<br/>\nDoes not fail if any of the requested workspaces is not found or not accessible - instead it returns corresponding error-object instead of an entity-object.<br/>\nGuarantees that the size and order of the returned list matches the requested IDs.<br/>Requirements:<br/>- auth-client scopes: \"workspace:read\"<br/>- user permission: \"read\" or higher",
        "operationId": "listWorkspaces",
        "parameters": [
          {
            "deprecated": true,
            "description": "Enable sudo-mode for admins for a single request, which gives full permission to all workspaces in the team.",
            "in": "query",
            "name": "actAsAdmin",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "items": {
                  "format": "uuid",
                  "type": "string"
                },
                "type": "array"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WorkspaceWithWorkspaceEmbedOrNullList"
                }
              },
              "application/json+markdown": {
                "schema": {
                  "$ref": "#/components/schemas/WorkspaceWithMDWithWorkspaceEmbedOrNullList"
                }
              },
              "application/vnd.airfocus.markdown+json": {
                "schema": {
                  "$ref": "#/components/schemas/WorkspaceWithWorkspaceEmbedOrNullList"
                }
              }
            },
            "description": ""
          },
          "400": {
            "content": {
              "application/json": {
                "example": {
                  "code": "bad_request",
                  "data": {},
                  "message": "Request body is invalid"
                },
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "If payload is invalid."
          },
          "401": {
            "content": {
              "application/json": {
                "example": {
                  "code": "missing_token",
                  "data": {},
                  "message": "Access token is missing"
                },
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "If missing authentication token."
          },
          "403": {
            "content": {
              "application/json": {
                "example": {
                  "code": "forbidden",
                  "data": {},
                  "message": "Insufficient permission"
                },
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "If user does not have the required permission, or authenticated client does not have the required access scopes."
          },
          "default": {
            "content": {
              "application/json": {
                "example": {
                  "code": "unknown_error",
                  "data": {},
                  "message": "Server error"
                },
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "If any other error happens."
          }
        },
        "security": [
          {
            "httpAuth": []
          }
        ],
        "summary": "Retrieve multiple workspaces by their IDs",
        "tags": [
          "CRUD",
          "Workspaces"
        ]
      }
    },
    "/api/workspaces/search": {
      "post": {
        "description": "Returns all workspaces or searches workspaces by query. Always returns only workspaces which are accessible by the current user.<br/>Requirements:<br/>- auth-client scopes: \"workspace:read\"<br/>- user permission: \"read\" or higher",
        "operationId": "searchWorkspaces",
        "parameters": [
          {
            "deprecated": true,
            "description": "Enable sudo-mode for admins for a single request, which gives full permission to all workspaces in the team.",
            "in": "query",
            "name": "actAsAdmin",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "description": "How many elements to skip.",
            "in": "query",
            "name": "offset",
            "required": false,
            "schema": {
              "default": 0,
              "format": "int32",
              "minimum": 0,
              "type": "integer"
            }
          },
          {
            "description": "How many elements to return.",
            "in": "query",
            "name": "limit",
            "required": false,
            "schema": {
              "default": 1000,
              "format": "int32",
              "maximum": 1000,
              "minimum": 0,
              "type": "integer"
            }
          },
          {
            "deprecated": true,
            "description": "From which element the page should start.",
            "in": "query",
            "name": "from",
            "required": false,
            "schema": {
              "default": 0,
              "deprecated": true,
              "format": "int32",
              "minimum": 0,
              "type": "integer"
            }
          },
          {
            "deprecated": true,
            "description": "At which element the page should end (excluding it).",
            "in": "query",
            "name": "to",
            "required": false,
            "schema": {
              "deprecated": true,
              "format": "int32",
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/WorkspaceSearchQuery"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WorkspaceWithWorkspaceSearchEmbedPage"
                }
              },
              "application/json+markdown": {
                "schema": {
                  "$ref": "#/components/schemas/WorkspaceWithMDWithWorkspaceSearchEmbedPage"
                }
              },
              "application/vnd.airfocus.markdown+json": {
                "schema": {
                  "$ref": "#/components/schemas/WorkspaceWithWorkspaceSearchEmbedPage"
                }
              }
            },
            "description": ""
          },
          "400": {
            "content": {
              "application/json": {
                "example": {
                  "code": "bad_request",
                  "data": {},
                  "message": "Request body is invalid"
                },
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "If payload is invalid."
          },
          "401": {
            "content": {
              "application/json": {
                "example": {
                  "code": "missing_token",
                  "data": {},
                  "message": "Access token is missing"
                },
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "If missing authentication token."
          },
          "403": {
            "content": {
              "application/json": {
                "example": {
                  "code": "forbidden",
                  "data": {},
                  "message": "Insufficient permission"
                },
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "If user does not have the required permission, or authenticated client does not have the required access scopes."
          },
          "default": {
            "content": {
              "application/json": {
                "example": {
                  "code": "unknown_error",
                  "data": {},
                  "message": "Server error"
                },
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "If any other error happens."
          }
        },
        "security": [
          {
            "httpAuth": []
          }
        ],
        "summary": "Retrieve or search workspaces",
        "tags": [
          "CRUD",
          "Workspaces"
        ]
      }
    },
    "/api/workspaces/templates": {
      "get": {
        "deprecated": true,
        "description": "Returns all workspace-templates available to the current team.<br/>Requirements:<br/>- auth-client scopes: \"workspace:read\"",
        "operationId": "listTemplatesLegacy",
        "parameters": [
          {
            "deprecated": true,
            "description": "Enable sudo-mode for admins for a single request, which gives full permission to all workspaces in the team.",
            "in": "query",
            "name": "actAsAdmin",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "description": "How many elements to skip.",
            "in": "query",
            "name": "offset",
            "required": false,
            "schema": {
              "default": 0,
              "format": "int32",
              "minimum": 0,
              "type": "integer"
            }
          },
          {
            "description": "How many elements to return.",
            "in": "query",
            "name": "limit",
            "required": false,
            "schema": {
              "default": 100,
              "format": "int32",
              "maximum": 100,
              "minimum": 0,
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TemplatePageWithEmbed"
                }
              }
            },
            "description": ""
          },
          "401": {
            "content": {
              "application/json": {
                "example": {
                  "code": "missing_token",
                  "data": {},
                  "message": "Access token is missing"
                },
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "If missing authentication token."
          },
          "403": {
            "content": {
              "application/json": {
                "example": {
                  "code": "forbidden",
                  "data": {},
                  "message": "Missing required access scope"
                },
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "If authenticated client does not have the required access scopes."
          }
        },
        "security": [
          {
            "httpAuth": []
          }
        ],
        "summary": "List templates",
        "tags": [
          "Templates"
        ]
      }
    },
    "/api/workspaces/templates/{templateId}": {
      "post": {
        "deprecated": true,
        "description": "Installs the requested template with the given parameters.\nReturns a newly created workspace.\nIf the template creates multiple workspaces - then it still returns a single workspace which is considered by the template as \"main\".<br/>Requirements:<br/>- auth-client scopes: \"workspace\"",
        "operationId": "applyTemplateLegacy",
        "parameters": [
          {
            "deprecated": true,
            "description": "Enable sudo-mode for admins for a single request, which gives full permission to all workspaces in the team.",
            "in": "query",
            "name": "actAsAdmin",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "in": "path",
            "name": "templateId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ApplyTemplateRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WorkspaceWithWorkspaceEmbed"
                }
              }
            },
            "description": ""
          },
          "401": {
            "content": {
              "application/json": {
                "example": {
                  "code": "missing_token",
                  "data": {},
                  "message": "Access token is missing"
                },
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "If missing authentication token."
          },
          "403": {
            "content": {
              "application/json": {
                "example": {
                  "code": "forbidden",
                  "data": {},
                  "message": "Missing required access scope"
                },
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "If authenticated client does not have the required access scopes."
          }
        },
        "security": [
          {
            "httpAuth": []
          }
        ],
        "summary": "Install template",
        "tags": [
          "Templates"
        ]
      }
    },
    "/api/workspaces/uninstall-field": {
      "post": {
        "deprecated": true,
        "description": "Removes the field and all its connections to workspaces, regardless whether it's a team-field or not.<br/>Requirements:<br/>  - auth-client scopes: \"workspace\"<br/>  - user permission: \"full\"<br/>  - team features: \"team-fields\" when operating with team-fields<br/>  - user role: \"admin\" when operating with team-fields<br/>Returns:<br/>403 if user does not have the required permission",
        "operationId": "uninstallFieldCompletelyLegacy",
        "parameters": [
          {
            "deprecated": true,
            "description": "Enable sudo-mode for admins for a single request, which gives full permission to all workspaces in the team.",
            "in": "query",
            "name": "actAsAdmin",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/FieldServerEndpointsUninstallFieldRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": ""
          }
        },
        "security": [
          {
            "httpAuth": []
          }
        ],
        "summary": "Completely delete field",
        "tags": [
          "Fields"
        ]
      }
    },
    "/api/workspaces/workspace-relations": {
      "post": {
        "description": "Returns newly created workspace relation with its sanitised data.<br/>Requirements:<br/>  - auth-client scopes: \"workspace\"<br/>  - user permission: \"write\" or higher<br/>Returns:<br/>403 if user does not have the required permission",
        "operationId": "createWorkspaceRelation",
        "parameters": [
          {
            "deprecated": true,
            "description": "Enable sudo-mode for admins for a single request, which gives full permission to all workspaces in the team.",
            "in": "query",
            "name": "actAsAdmin",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/WorkspaceRelation"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WorkspaceRelationWithEmbed"
                }
              }
            },
            "description": ""
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "httpAuth": []
          }
        ],
        "summary": "Create a new workspace relation",
        "tags": [
          "CRUD",
          "WorkspaceRelations"
        ]
      }
    },
    "/api/workspaces/workspace-relations/bulk": {
      "post": {
        "description": "Accepts a list of create/update/patch/delete operations (see the request model for more details).<br/>\nEach operations can target a single or multiple workspace relations.<br/>\nReturns a list of results for each input operation including errors.<br/>\nGuarantees that the size and order of the returned results matches the input list of operations.<br/>Requirements:<br/>  - auth-client scopes: \"workspace\"<br/>  - user permission: \"write\" or higher<br/>Returns:<br/>403 if user does not have the required permission",
        "operationId": "bulkWorkspaceRelations",
        "parameters": [
          {
            "deprecated": true,
            "description": "Enable sudo-mode for admins for a single request, which gives full permission to all workspaces in the team.",
            "in": "query",
            "name": "actAsAdmin",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "items": {
                  "$ref": "#/components/schemas/WorkspaceRelationBulkAction"
                },
                "type": "array"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WorkspaceRelationWithEmbedOrNullList"
                }
              }
            },
            "description": ""
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "httpAuth": []
          }
        ],
        "summary": "Perform multiple operations with workspace relations",
        "tags": [
          "CRUD",
          "WorkspaceRelations"
        ]
      }
    },
    "/api/workspaces/workspace-relations/list": {
      "post": {
        "description": "Returns a list of workspace relations.<br/>\nReturns null for those workspace relations which are not found or not accessible.<br/>\nGuarantees that the size and order of the returned list matches the requested IDs.<br/>Requirements:<br/>  - auth-client scopes: \"workspace:read\"<br/>  - user permission: \"read\" or higher<br/>Returns:<br/>403 if user does not have the required permission",
        "operationId": "listWorkspaceRelations",
        "parameters": [
          {
            "deprecated": true,
            "description": "Enable sudo-mode for admins for a single request, which gives full permission to all workspaces in the team.",
            "in": "query",
            "name": "actAsAdmin",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "items": {
                  "format": "uuid",
                  "type": "string"
                },
                "type": "array"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WorkspaceRelationWithEmbedOrNullList"
                }
              }
            },
            "description": ""
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "httpAuth": []
          }
        ],
        "summary": "Retrieve multiple workspace relations by their IDs",
        "tags": [
          "CRUD",
          "WorkspaceRelations"
        ]
      }
    },
    "/api/workspaces/workspace-relations/search": {
      "post": {
        "description": "Returns all workspace relations or searches workspace relations by query. Always returns only workspace relations which are accessible by the current user.<br/>Requirements:<br/>  - auth-client scopes: \"workspace:read\"<br/>  - user permission: \"read\" or higher<br/>Returns:<br/>403 if user does not have the required permission",
        "operationId": "searchWorkspaceRelations",
        "parameters": [
          {
            "deprecated": true,
            "description": "Enable sudo-mode for admins for a single request, which gives full permission to all workspaces in the team.",
            "in": "query",
            "name": "actAsAdmin",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "description": "How many elements to skip.",
            "in": "query",
            "name": "offset",
            "required": false,
            "schema": {
              "default": 0,
              "format": "int32",
              "minimum": 0,
              "type": "integer"
            }
          },
          {
            "description": "How many elements to return.",
            "in": "query",
            "name": "limit",
            "required": false,
            "schema": {
              "default": 1000,
              "format": "int32",
              "maximum": 1000,
              "minimum": 0,
              "type": "integer"
            }
          },
          {
            "deprecated": true,
            "description": "From which element the page should start.",
            "in": "query",
            "name": "from",
            "required": false,
            "schema": {
              "default": 0,
              "deprecated": true,
              "format": "int32",
              "minimum": 0,
              "type": "integer"
            }
          },
          {
            "deprecated": true,
            "description": "At which element the page should end (excluding it).",
            "in": "query",
            "name": "to",
            "required": false,
            "schema": {
              "deprecated": true,
              "format": "int32",
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/WorkspaceRelationSearchQuery"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WorkspaceRelationWithEmbedPage"
                }
              }
            },
            "description": ""
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "httpAuth": []
          }
        ],
        "summary": "Retrieve or search workspace relations",
        "tags": [
          "CRUD",
          "WorkspaceRelations"
        ]
      }
    },
    "/api/workspaces/workspace-relations/set": {
      "put": {
        "description": "",
        "operationId": "putApiWorkspacesWorkspace-relationsSet",
        "parameters": [
          {
            "deprecated": true,
            "description": "Enable sudo-mode for admins for a single request, which gives full permission to all workspaces in the team.",
            "in": "query",
            "name": "actAsAdmin",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/WorkspaceRelationsSetRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WorkspaceWithWorkspaceEmbed"
                }
              }
            },
            "description": ""
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "httpAuth": []
          }
        ],
        "tags": [
          "WorkspaceRelations"
        ]
      }
    },
    "/api/workspaces/workspace-relations/{workspaceRelationId}": {
      "delete": {
        "description": "Returns empty result if the workspace relation was successfully deleted.<br/>Requirements:<br/>  - auth-client scopes: \"workspace\"<br/>  - user permission: \"write\" or higher<br/>Returns:<br/>400 if the resource is not found<br/>403 if user does not have the required permission",
        "operationId": "deleteWorkspaceRelation",
        "parameters": [
          {
            "deprecated": true,
            "description": "Enable sudo-mode for admins for a single request, which gives full permission to all workspaces in the team.",
            "in": "query",
            "name": "actAsAdmin",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "in": "path",
            "name": "workspaceRelationId",
            "required": true,
            "schema": {
              "format": "uuid",
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": ""
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "httpAuth": []
          }
        ],
        "summary": "Delete an existing workspace relation",
        "tags": [
          "CRUD",
          "WorkspaceRelations"
        ]
      },
      "get": {
        "description": "Returns found workspace relation.<br/>Requirements:<br/>  - auth-client scopes: \"workspace:read\"<br/>  - user permission: \"read\" or higher<br/>Returns:<br/>400 if the resource is not found<br/>403 if user does not have the required permission",
        "operationId": "retrieveWorkspaceRelation",
        "parameters": [
          {
            "deprecated": true,
            "description": "Enable sudo-mode for admins for a single request, which gives full permission to all workspaces in the team.",
            "in": "query",
            "name": "actAsAdmin",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "in": "path",
            "name": "workspaceRelationId",
            "required": true,
            "schema": {
              "format": "uuid",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WorkspaceRelationWithEmbed"
                }
              }
            },
            "description": ""
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "httpAuth": []
          }
        ],
        "summary": "Retrieve a single workspace relation by its ID",
        "tags": [
          "CRUD",
          "WorkspaceRelations"
        ]
      },
      "patch": {
        "description": "Returns the whole updated workspace relation with its sanitised data.<br/>Requirements:<br/>  - auth-client scopes: \"workspace\"<br/>  - user permission: \"write\" or higher<br/>Returns:<br/>400 if the resource is not found<br/>403 if user does not have the required permission",
        "operationId": "patchWorkspaceRelation",
        "parameters": [
          {
            "deprecated": true,
            "description": "Enable sudo-mode for admins for a single request, which gives full permission to all workspaces in the team.",
            "in": "query",
            "name": "actAsAdmin",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "in": "path",
            "name": "workspaceRelationId",
            "required": true,
            "schema": {
              "format": "uuid",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/JsonPatch"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WorkspaceRelationWithEmbed"
                }
              }
            },
            "description": ""
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "httpAuth": []
          }
        ],
        "summary": "Patch an existing workspace relation",
        "tags": [
          "CRUD",
          "WorkspaceRelations"
        ]
      },
      "put": {
        "description": "Returns updated workspace relation with its sanitised data.<br/>Requirements:<br/>  - auth-client scopes: \"workspace\"<br/>  - user permission: \"write\" or higher<br/>Returns:<br/>400 if the resource is not found<br/>403 if user does not have the required permission",
        "operationId": "updateWorkspaceRelation",
        "parameters": [
          {
            "deprecated": true,
            "description": "Enable sudo-mode for admins for a single request, which gives full permission to all workspaces in the team.",
            "in": "query",
            "name": "actAsAdmin",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "in": "path",
            "name": "workspaceRelationId",
            "required": true,
            "schema": {
              "format": "uuid",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/WorkspaceRelation"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WorkspaceRelationWithEmbed"
                }
              }
            },
            "description": ""
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "httpAuth": []
          }
        ],
        "summary": "Update an existing workspace relation",
        "tags": [
          "CRUD",
          "WorkspaceRelations"
        ]
      }
    },
    "/api/workspaces/{workspaceId}": {
      "delete": {
        "description": "Returns empty result if the workspace was successfully deleted.<br/>Requirements:<br/>- auth-client scopes: \"workspace\"<br/>- user permission: \"write\" or higher",
        "operationId": "deleteWorkspace",
        "parameters": [
          {
            "deprecated": true,
            "description": "Enable sudo-mode for admins for a single request, which gives full permission to all workspaces in the team.",
            "in": "query",
            "name": "actAsAdmin",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "in": "path",
            "name": "workspaceId",
            "required": true,
            "schema": {
              "format": "uuid",
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": ""
          },
          "400": {
            "content": {
              "application/json": {
                "example": {
                  "code": "not_found",
                  "data": {},
                  "message": "Unknown entity 'fe4c0f30-aa35-3c41-99f9-a5f69c8c4192'"
                },
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "If path parameters are invalid or resource does not exist."
          },
          "401": {
            "content": {
              "application/json": {
                "example": {
                  "code": "missing_token",
                  "data": {},
                  "message": "Access token is missing"
                },
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "If missing authentication token."
          },
          "403": {
            "content": {
              "application/json": {
                "example": {
                  "code": "forbidden",
                  "data": {},
                  "message": "Insufficient permission"
                },
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "If user does not have the required permission, or authenticated client does not have the required access scopes."
          },
          "default": {
            "content": {
              "application/json": {
                "example": {
                  "code": "unknown_error",
                  "data": {},
                  "message": "Server error"
                },
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "If any other error happens."
          }
        },
        "security": [
          {
            "httpAuth": []
          }
        ],
        "summary": "Delete an existing workspace",
        "tags": [
          "CRUD",
          "Workspaces"
        ]
      },
      "get": {
        "description": "Returns found workspace.<br/>Requirements:<br/>- auth-client scopes: \"workspace:read\"<br/>- user permission: \"read\" or higher",
        "operationId": "retrieveWorkspace",
        "parameters": [
          {
            "deprecated": true,
            "description": "Enable sudo-mode for admins for a single request, which gives full permission to all workspaces in the team.",
            "in": "query",
            "name": "actAsAdmin",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "in": "path",
            "name": "workspaceId",
            "required": true,
            "schema": {
              "format": "uuid",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WorkspaceWithWorkspaceEmbed"
                }
              },
              "application/json+markdown": {
                "schema": {
                  "$ref": "#/components/schemas/WorkspaceWithMDWithWorkspaceEmbed"
                }
              },
              "application/vnd.airfocus.markdown+json": {
                "schema": {
                  "$ref": "#/components/schemas/WorkspaceWithWorkspaceEmbed"
                }
              }
            },
            "description": ""
          },
          "400": {
            "content": {
              "application/json": {
                "example": {
                  "code": "not_found",
                  "data": {},
                  "message": "Unknown entity 'fe4c0f30-aa35-3c41-99f9-a5f69c8c4192'"
                },
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "If path parameters are invalid or payload is invalid or resource does not exist."
          },
          "401": {
            "content": {
              "application/json": {
                "example": {
                  "code": "missing_token",
                  "data": {},
                  "message": "Access token is missing"
                },
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "If missing authentication token."
          },
          "403": {
            "content": {
              "application/json": {
                "example": {
                  "code": "forbidden",
                  "data": {},
                  "message": "Insufficient permission"
                },
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "If user does not have the required permission, or authenticated client does not have the required access scopes."
          },
          "default": {
            "content": {
              "application/json": {
                "example": {
                  "code": "unknown_error",
                  "data": {},
                  "message": "Server error"
                },
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "If any other error happens."
          }
        },
        "security": [
          {
            "httpAuth": []
          }
        ],
        "summary": "Retrieve a single workspace by its ID",
        "tags": [
          "CRUD",
          "Workspaces"
        ]
      },
      "patch": {
        "description": "Returns the whole updated workspace with its sanitised data.<br>Note: also supports patching description as a Markdown string.<br/>Requirements:<br/>- auth-client scopes: \"workspace\"<br/>- user permission: \"write\" or higher",
        "operationId": "patchWorkspace",
        "parameters": [
          {
            "deprecated": true,
            "description": "Enable sudo-mode for admins for a single request, which gives full permission to all workspaces in the team.",
            "in": "query",
            "name": "actAsAdmin",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "in": "path",
            "name": "workspaceId",
            "required": true,
            "schema": {
              "format": "uuid",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/JsonPatch"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WorkspaceWithWorkspaceEmbed"
                }
              },
              "application/json+markdown": {
                "schema": {
                  "$ref": "#/components/schemas/WorkspaceWithMDWithWorkspaceEmbed"
                }
              },
              "application/vnd.airfocus.markdown+json": {
                "schema": {
                  "$ref": "#/components/schemas/WorkspaceWithWorkspaceEmbed"
                }
              }
            },
            "description": ""
          },
          "400": {
            "content": {
              "application/json": {
                "example": {
                  "code": "not_found",
                  "data": {},
                  "message": "Unknown entity 'fe4c0f30-aa35-3c41-99f9-a5f69c8c4192'"
                },
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "If path parameters are invalid or payload is invalid or resource does not exist."
          },
          "401": {
            "content": {
              "application/json": {
                "example": {
                  "code": "missing_token",
                  "data": {},
                  "message": "Access token is missing"
                },
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "If missing authentication token."
          },
          "403": {
            "content": {
              "application/json": {
                "example": {
                  "code": "forbidden",
                  "data": {},
                  "message": "Insufficient permission"
                },
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "If user does not have the required permission, or authenticated client does not have the required access scopes."
          },
          "default": {
            "content": {
              "application/json": {
                "example": {
                  "code": "unknown_error",
                  "data": {},
                  "message": "Server error"
                },
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "If any other error happens."
          }
        },
        "security": [
          {
            "httpAuth": []
          }
        ],
        "summary": "Patch an existing workspace",
        "tags": [
          "CRUD",
          "Workspaces"
        ]
      },
      "put": {
        "description": "Returns updated workspace with its sanitised data.<br/>Requirements:<br/>- auth-client scopes: \"workspace\"<br/>- user permission: \"write\" or higher",
        "operationId": "updateWorkspace",
        "parameters": [
          {
            "deprecated": true,
            "description": "Enable sudo-mode for admins for a single request, which gives full permission to all workspaces in the team.",
            "in": "query",
            "name": "actAsAdmin",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "in": "path",
            "name": "workspaceId",
            "required": true,
            "schema": {
              "format": "uuid",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateWorkspaceRequest"
              }
            },
            "application/json+markdown": {
              "schema": {
                "$ref": "#/components/schemas/UpdateWorkspaceRequestWithMD"
              }
            },
            "application/vnd.airfocus.markdown+json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateWorkspaceRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WorkspaceWithWorkspaceEmbed"
                }
              },
              "application/json+markdown": {
                "schema": {
                  "$ref": "#/components/schemas/WorkspaceWithMDWithWorkspaceEmbed"
                }
              },
              "application/vnd.airfocus.markdown+json": {
                "schema": {
                  "$ref": "#/components/schemas/WorkspaceWithWorkspaceEmbed"
                }
              }
            },
            "description": ""
          },
          "400": {
            "content": {
              "application/json": {
                "example": {
                  "code": "not_found",
                  "data": {},
                  "message": "Unknown entity 'fe4c0f30-aa35-3c41-99f9-a5f69c8c4192'"
                },
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "If path parameters are invalid or payload is invalid or resource does not exist."
          },
          "401": {
            "content": {
              "application/json": {
                "example": {
                  "code": "missing_token",
                  "data": {},
                  "message": "Access token is missing"
                },
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "If missing authentication token."
          },
          "403": {
            "content": {
              "application/json": {
                "example": {
                  "code": "forbidden",
                  "data": {},
                  "message": "Insufficient permission"
                },
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "If user does not have the required permission, or authenticated client does not have the required access scopes."
          },
          "default": {
            "content": {
              "application/json": {
                "example": {
                  "code": "unknown_error",
                  "data": {},
                  "message": "Server error"
                },
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "If any other error happens."
          }
        },
        "security": [
          {
            "httpAuth": []
          }
        ],
        "summary": "Update an existing workspace",
        "tags": [
          "CRUD",
          "Workspaces"
        ]
      }
    },
    "/api/workspaces/{workspaceId}/attachments": {
      "post": {
        "description": "Returns newly created attachment with its sanitised data.<br/>Requirements:<br/>  - auth-client scopes: \"workspace\"<br/>  - user permission: \"write\" or higher<br/>Returns:<br/>403 if user does not have the required permission",
        "operationId": "createItemAttachment",
        "parameters": [
          {
            "deprecated": true,
            "description": "Enable sudo-mode for admins for a single request, which gives full permission to all workspaces in the team.",
            "in": "query",
            "name": "actAsAdmin",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "description": "ID of the workspace which contains the managed attachments.",
            "in": "path",
            "name": "workspaceId",
            "required": true,
            "schema": {
              "format": "uuid",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ItemAttachment"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ItemAttachmentWithEmbed"
                }
              }
            },
            "description": ""
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "httpAuth": []
          }
        ],
        "summary": "Create a new attachment",
        "tags": [
          "CRUD",
          "ItemAttachments"
        ]
      }
    },
    "/api/workspaces/{workspaceId}/attachments/bulk": {
      "post": {
        "description": "Accepts a list of create/update/patch/delete operations (see the request model for more details).<br/>\nEach operations can target a single or multiple attachments.<br/>\nReturns a list of results for each input operation including errors.<br/>\nGuarantees that the size and order of the returned results matches the input list of operations.<br/>Requirements:<br/>  - auth-client scopes: \"workspace\"<br/>  - user permission: \"write\" or higher<br/>Returns:<br/>403 if user does not have the required permission",
        "operationId": "bulkItemAttachments",
        "parameters": [
          {
            "deprecated": true,
            "description": "Enable sudo-mode for admins for a single request, which gives full permission to all workspaces in the team.",
            "in": "query",
            "name": "actAsAdmin",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "description": "ID of the workspace which contains the managed attachments.",
            "in": "path",
            "name": "workspaceId",
            "required": true,
            "schema": {
              "format": "uuid",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "items": {
                  "$ref": "#/components/schemas/ItemAttachmentBulkAction"
                },
                "type": "array"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ItemAttachmentWithEmbedOrNullList"
                }
              }
            },
            "description": ""
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "httpAuth": []
          }
        ],
        "summary": "Perform multiple operations with attachments",
        "tags": [
          "CRUD",
          "ItemAttachments"
        ]
      }
    },
    "/api/workspaces/{workspaceId}/attachments/list": {
      "post": {
        "description": "Returns a list of attachments.<br/>\nReturns null for those attachments which are not found or not accessible.<br/>\nGuarantees that the size and order of the returned list matches the requested IDs.<br/>Requirements:<br/>  - auth-client scopes: \"workspace:read\"<br/>  - user permission: \"read\" or higher<br/>Returns:<br/>403 if user does not have the required permission",
        "operationId": "listItemAttachments",
        "parameters": [
          {
            "deprecated": true,
            "description": "Enable sudo-mode for admins for a single request, which gives full permission to all workspaces in the team.",
            "in": "query",
            "name": "actAsAdmin",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "description": "ID of the workspace which contains the managed attachments.",
            "in": "path",
            "name": "workspaceId",
            "required": true,
            "schema": {
              "format": "uuid",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "items": {
                  "format": "uuid",
                  "type": "string"
                },
                "type": "array"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ItemAttachmentWithEmbedOrNullList"
                }
              }
            },
            "description": ""
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "httpAuth": []
          }
        ],
        "summary": "Retrieve multiple attachments by their IDs",
        "tags": [
          "CRUD",
          "ItemAttachments"
        ]
      }
    },
    "/api/workspaces/{workspaceId}/attachments/search": {
      "post": {
        "description": "Returns all attachments or searches attachments by query. Always returns only attachments which are accessible by the current user.<br/>Requirements:<br/>  - auth-client scopes: \"workspace:read\"<br/>  - user permission: \"read\" or higher<br/>Returns:<br/>403 if user does not have the required permission",
        "operationId": "searchItemAttachments",
        "parameters": [
          {
            "deprecated": true,
            "description": "Enable sudo-mode for admins for a single request, which gives full permission to all workspaces in the team.",
            "in": "query",
            "name": "actAsAdmin",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "description": "ID of the workspace which contains the managed attachments.",
            "in": "path",
            "name": "workspaceId",
            "required": true,
            "schema": {
              "format": "uuid",
              "type": "string"
            }
          },
          {
            "description": "How many elements to skip.",
            "in": "query",
            "name": "offset",
            "required": false,
            "schema": {
              "default": 0,
              "format": "int32",
              "minimum": 0,
              "type": "integer"
            }
          },
          {
            "description": "How many elements to return.",
            "in": "query",
            "name": "limit",
            "required": false,
            "schema": {
              "default": 1000,
              "format": "int32",
              "maximum": 1000,
              "minimum": 0,
              "type": "integer"
            }
          },
          {
            "deprecated": true,
            "description": "From which element the page should start.",
            "in": "query",
            "name": "from",
            "required": false,
            "schema": {
              "default": 0,
              "deprecated": true,
              "format": "int32",
              "minimum": 0,
              "type": "integer"
            }
          },
          {
            "deprecated": true,
            "description": "At which element the page should end (excluding it).",
            "in": "query",
            "name": "to",
            "required": false,
            "schema": {
              "deprecated": true,
              "format": "int32",
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AttachmentSearchQuery"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ItemAttachmentWithEmbedPage"
                }
              }
            },
            "description": ""
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "httpAuth": []
          }
        ],
        "summary": "Retrieve or search attachments",
        "tags": [
          "CRUD",
          "ItemAttachments"
        ]
      }
    },
    "/api/workspaces/{workspaceId}/attachments/{itemAttachmentId}": {
      "delete": {
        "description": "Returns empty result if the attachment was successfully deleted.<br/>Requirements:<br/>  - auth-client scopes: \"workspace\"<br/>  - user permission: \"write\" or higher<br/>Returns:<br/>400 if the resource is not found<br/>403 if user does not have the required permission",
        "operationId": "deleteItemAttachment",
        "parameters": [
          {
            "deprecated": true,
            "description": "Enable sudo-mode for admins for a single request, which gives full permission to all workspaces in the team.",
            "in": "query",
            "name": "actAsAdmin",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "description": "ID of the workspace which contains the managed attachments.",
            "in": "path",
            "name": "workspaceId",
            "required": true,
            "schema": {
              "format": "uuid",
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "itemAttachmentId",
            "required": true,
            "schema": {
              "format": "uuid",
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": ""
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "httpAuth": []
          }
        ],
        "summary": "Delete an existing attachment",
        "tags": [
          "CRUD",
          "ItemAttachments"
        ]
      },
      "get": {
        "description": "Returns found attachment.<br/>Requirements:<br/>  - auth-client scopes: \"workspace:read\"<br/>  - user permission: \"read\" or higher<br/>Returns:<br/>400 if the resource is not found<br/>403 if user does not have the required permission",
        "operationId": "retrieveItemAttachment",
        "parameters": [
          {
            "deprecated": true,
            "description": "Enable sudo-mode for admins for a single request, which gives full permission to all workspaces in the team.",
            "in": "query",
            "name": "actAsAdmin",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "description": "ID of the workspace which contains the managed attachments.",
            "in": "path",
            "name": "workspaceId",
            "required": true,
            "schema": {
              "format": "uuid",
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "itemAttachmentId",
            "required": true,
            "schema": {
              "format": "uuid",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ItemAttachmentWithEmbed"
                }
              }
            },
            "description": ""
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "httpAuth": []
          }
        ],
        "summary": "Retrieve a single attachment by its ID",
        "tags": [
          "CRUD",
          "ItemAttachments"
        ]
      },
      "patch": {
        "description": "Returns the whole updated attachment with its sanitised data.<br/>Requirements:<br/>  - auth-client scopes: \"workspace\"<br/>  - user permission: \"write\" or higher<br/>Returns:<br/>400 if the resource is not found<br/>403 if user does not have the required permission",
        "operationId": "patchItemAttachment",
        "parameters": [
          {
            "deprecated": true,
            "description": "Enable sudo-mode for admins for a single request, which gives full permission to all workspaces in the team.",
            "in": "query",
            "name": "actAsAdmin",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "description": "ID of the workspace which contains the managed attachments.",
            "in": "path",
            "name": "workspaceId",
            "required": true,
            "schema": {
              "format": "uuid",
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "itemAttachmentId",
            "required": true,
            "schema": {
              "format": "uuid",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/JsonPatch"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ItemAttachmentWithEmbed"
                }
              }
            },
            "description": ""
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "httpAuth": []
          }
        ],
        "summary": "Patch an existing attachment",
        "tags": [
          "CRUD",
          "ItemAttachments"
        ]
      },
      "put": {
        "description": "Returns updated attachment with its sanitised data.<br/>Requirements:<br/>  - auth-client scopes: \"workspace\"<br/>  - user permission: \"write\" or higher<br/>Returns:<br/>400 if the resource is not found<br/>403 if user does not have the required permission",
        "operationId": "updateItemAttachment",
        "parameters": [
          {
            "deprecated": true,
            "description": "Enable sudo-mode for admins for a single request, which gives full permission to all workspaces in the team.",
            "in": "query",
            "name": "actAsAdmin",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "description": "ID of the workspace which contains the managed attachments.",
            "in": "path",
            "name": "workspaceId",
            "required": true,
            "schema": {
              "format": "uuid",
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "itemAttachmentId",
            "required": true,
            "schema": {
              "format": "uuid",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ItemAttachment"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ItemAttachmentWithEmbed"
                }
              }
            },
            "description": ""
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "httpAuth": []
          }
        ],
        "summary": "Update an existing attachment",
        "tags": [
          "CRUD",
          "ItemAttachments"
        ]
      }
    },
    "/api/workspaces/{workspaceId}/comments": {
      "post": {
        "description": "Returns newly created comment with its sanitised data.<br/>Requirements:<br/>  - auth-client scopes: \"workspace\"<br/>  - user permission: \"write\" or higher<br/>Returns:<br/>403 if user does not have the required permission",
        "operationId": "createComment",
        "parameters": [
          {
            "deprecated": true,
            "description": "Enable sudo-mode for admins for a single request, which gives full permission to all workspaces in the team.",
            "in": "query",
            "name": "actAsAdmin",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "in": "path",
            "name": "workspaceId",
            "required": true,
            "schema": {
              "format": "uuid",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ItemComment"
              }
            },
            "application/json+markdown": {
              "schema": {
                "$ref": "#/components/schemas/ItemComment"
              }
            },
            "application/vnd.airfocus.markdown+json": {
              "schema": {
                "$ref": "#/components/schemas/ItemComment"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ItemCommentWithItemCommentEmbed"
                }
              },
              "application/json+markdown": {
                "schema": {
                  "$ref": "#/components/schemas/ItemCommentWithItemCommentEmbed"
                }
              },
              "application/vnd.airfocus.markdown+json": {
                "schema": {
                  "$ref": "#/components/schemas/ItemCommentWithItemCommentEmbed"
                }
              }
            },
            "description": ""
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "httpAuth": []
          }
        ],
        "summary": "Create a new comment",
        "tags": [
          "CRUD",
          "Comments"
        ]
      }
    },
    "/api/workspaces/{workspaceId}/comments/bulk": {
      "post": {
        "description": "Accepts a list of create/update/patch/delete operations (see the request model for more details).<br/>\nEach operations can target a single or multiple comments.<br/>\nReturns a list of results for each input operation including errors.<br/>\nGuarantees that the size and order of the returned results matches the input list of operations.<br/>Requirements:<br/>  - auth-client scopes: \"workspace\"<br/>  - user permission: \"write\" or higher<br/>Returns:<br/>403 if user does not have the required permission",
        "operationId": "bulkComments",
        "parameters": [
          {
            "deprecated": true,
            "description": "Enable sudo-mode for admins for a single request, which gives full permission to all workspaces in the team.",
            "in": "query",
            "name": "actAsAdmin",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "in": "path",
            "name": "workspaceId",
            "required": true,
            "schema": {
              "format": "uuid",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "items": {
                  "$ref": "#/components/schemas/CommentBulkAction"
                },
                "type": "array"
              }
            },
            "application/json+markdown": {
              "schema": {
                "items": {
                  "$ref": "#/components/schemas/CommentBulkAction"
                },
                "type": "array"
              }
            },
            "application/vnd.airfocus.markdown+json": {
              "schema": {
                "items": {
                  "$ref": "#/components/schemas/CommentBulkAction"
                },
                "type": "array"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ItemCommentWithItemCommentEmbedOrNullList"
                }
              },
              "application/json+markdown": {
                "schema": {
                  "$ref": "#/components/schemas/ItemCommentWithItemCommentEmbedOrNullList"
                }
              },
              "application/vnd.airfocus.markdown+json": {
                "schema": {
                  "$ref": "#/components/schemas/ItemCommentWithItemCommentEmbedOrNullList"
                }
              }
            },
            "description": ""
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "httpAuth": []
          }
        ],
        "summary": "Perform multiple operations with comments",
        "tags": [
          "CRUD",
          "Comments"
        ]
      }
    },
    "/api/workspaces/{workspaceId}/comments/list": {
      "post": {
        "description": "Returns a list of comments.<br/>\nReturns null for those comments which are not found or not accessible.<br/>\nGuarantees that the size and order of the returned list matches the requested IDs.<br/>Requirements:<br/>  - auth-client scopes: \"workspace:read\"<br/>  - user permission: \"read\" or higher<br/>Returns:<br/>403 if user does not have the required permission",
        "operationId": "listComments",
        "parameters": [
          {
            "deprecated": true,
            "description": "Enable sudo-mode for admins for a single request, which gives full permission to all workspaces in the team.",
            "in": "query",
            "name": "actAsAdmin",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "in": "path",
            "name": "workspaceId",
            "required": true,
            "schema": {
              "format": "uuid",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "items": {
                  "format": "uuid",
                  "type": "string"
                },
                "type": "array"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ItemCommentWithItemCommentEmbedOrNullList"
                }
              },
              "application/json+markdown": {
                "schema": {
                  "$ref": "#/components/schemas/ItemCommentWithItemCommentEmbedOrNullList"
                }
              },
              "application/vnd.airfocus.markdown+json": {
                "schema": {
                  "$ref": "#/components/schemas/ItemCommentWithItemCommentEmbedOrNullList"
                }
              }
            },
            "description": ""
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "httpAuth": []
          }
        ],
        "summary": "Retrieve multiple comments by their IDs",
        "tags": [
          "CRUD",
          "Comments"
        ]
      }
    },
    "/api/workspaces/{workspaceId}/comments/search": {
      "post": {
        "description": "Returns all comments or searches comments by query. Always returns only comments which are accessible by the current user.<br/>Requirements:<br/>  - auth-client scopes: \"workspace:read\"<br/>  - user permission: \"read\" or higher<br/>Returns:<br/>403 if user does not have the required permission",
        "operationId": "searchComments",
        "parameters": [
          {
            "deprecated": true,
            "description": "Enable sudo-mode for admins for a single request, which gives full permission to all workspaces in the team.",
            "in": "query",
            "name": "actAsAdmin",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "in": "path",
            "name": "workspaceId",
            "required": true,
            "schema": {
              "format": "uuid",
              "type": "string"
            }
          },
          {
            "description": "How many elements to skip.",
            "in": "query",
            "name": "offset",
            "required": false,
            "schema": {
              "default": 0,
              "format": "int32",
              "minimum": 0,
              "type": "integer"
            }
          },
          {
            "description": "How many elements to return.",
            "in": "query",
            "name": "limit",
            "required": false,
            "schema": {
              "default": 1000,
              "format": "int32",
              "maximum": 1000,
              "minimum": 0,
              "type": "integer"
            }
          },
          {
            "deprecated": true,
            "description": "From which element the page should start.",
            "in": "query",
            "name": "from",
            "required": false,
            "schema": {
              "default": 0,
              "deprecated": true,
              "format": "int32",
              "minimum": 0,
              "type": "integer"
            }
          },
          {
            "deprecated": true,
            "description": "At which element the page should end (excluding it).",
            "in": "query",
            "name": "to",
            "required": false,
            "schema": {
              "deprecated": true,
              "format": "int32",
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ItemCommentSearchQuery"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ItemCommentWithItemCommentEmbedPage"
                }
              },
              "application/json+markdown": {
                "schema": {
                  "$ref": "#/components/schemas/ItemCommentWithItemCommentEmbedPage"
                }
              },
              "application/vnd.airfocus.markdown+json": {
                "schema": {
                  "$ref": "#/components/schemas/ItemCommentWithItemCommentEmbedPage"
                }
              }
            },
            "description": ""
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "httpAuth": []
          }
        ],
        "summary": "Retrieve or search comments",
        "tags": [
          "CRUD",
          "Comments"
        ]
      }
    },
    "/api/workspaces/{workspaceId}/comments/{commentId}": {
      "delete": {
        "description": "Returns empty result if the comment was successfully deleted.<br/>Requirements:<br/>  - auth-client scopes: \"workspace\"<br/>  - user permission: \"write\" or higher<br/>Returns:<br/>400 if the resource is not found<br/>403 if user does not have the required permission",
        "operationId": "deleteComment",
        "parameters": [
          {
            "deprecated": true,
            "description": "Enable sudo-mode for admins for a single request, which gives full permission to all workspaces in the team.",
            "in": "query",
            "name": "actAsAdmin",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "in": "path",
            "name": "workspaceId",
            "required": true,
            "schema": {
              "format": "uuid",
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "commentId",
            "required": true,
            "schema": {
              "format": "uuid",
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": ""
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "httpAuth": []
          }
        ],
        "summary": "Delete an existing comment",
        "tags": [
          "CRUD",
          "Comments"
        ]
      },
      "get": {
        "description": "Returns found comment.<br/>Requirements:<br/>  - auth-client scopes: \"workspace:read\"<br/>  - user permission: \"read\" or higher<br/>Returns:<br/>400 if the resource is not found<br/>403 if user does not have the required permission",
        "operationId": "retrieveComment",
        "parameters": [
          {
            "deprecated": true,
            "description": "Enable sudo-mode for admins for a single request, which gives full permission to all workspaces in the team.",
            "in": "query",
            "name": "actAsAdmin",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "in": "path",
            "name": "workspaceId",
            "required": true,
            "schema": {
              "format": "uuid",
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "commentId",
            "required": true,
            "schema": {
              "format": "uuid",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ItemCommentWithItemCommentEmbed"
                }
              },
              "application/json+markdown": {
                "schema": {
                  "$ref": "#/components/schemas/ItemCommentWithItemCommentEmbed"
                }
              },
              "application/vnd.airfocus.markdown+json": {
                "schema": {
                  "$ref": "#/components/schemas/ItemCommentWithItemCommentEmbed"
                }
              }
            },
            "description": ""
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "httpAuth": []
          }
        ],
        "summary": "Retrieve a single comment by its ID",
        "tags": [
          "CRUD",
          "Comments"
        ]
      },
      "patch": {
        "description": "Returns the whole updated comment with its sanitised data.<br/>Requirements:<br/>  - auth-client scopes: \"workspace\"<br/>  - user permission: \"write\" or higher<br/>Returns:<br/>400 if the resource is not found<br/>403 if user does not have the required permission",
        "operationId": "patchComment",
        "parameters": [
          {
            "deprecated": true,
            "description": "Enable sudo-mode for admins for a single request, which gives full permission to all workspaces in the team.",
            "in": "query",
            "name": "actAsAdmin",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "in": "path",
            "name": "workspaceId",
            "required": true,
            "schema": {
              "format": "uuid",
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "commentId",
            "required": true,
            "schema": {
              "format": "uuid",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/JsonPatch"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ItemCommentWithItemCommentEmbed"
                }
              },
              "application/json+markdown": {
                "schema": {
                  "$ref": "#/components/schemas/ItemCommentWithItemCommentEmbed"
                }
              },
              "application/vnd.airfocus.markdown+json": {
                "schema": {
                  "$ref": "#/components/schemas/ItemCommentWithItemCommentEmbed"
                }
              }
            },
            "description": ""
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "httpAuth": []
          }
        ],
        "summary": "Patch an existing comment",
        "tags": [
          "CRUD",
          "Comments"
        ]
      },
      "put": {
        "description": "Returns updated comment with its sanitised data.<br/>Requirements:<br/>  - auth-client scopes: \"workspace\"<br/>  - user permission: \"write\" or higher<br/>Returns:<br/>400 if the resource is not found<br/>403 if user does not have the required permission",
        "operationId": "updateComment",
        "parameters": [
          {
            "deprecated": true,
            "description": "Enable sudo-mode for admins for a single request, which gives full permission to all workspaces in the team.",
            "in": "query",
            "name": "actAsAdmin",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "in": "path",
            "name": "workspaceId",
            "required": true,
            "schema": {
              "format": "uuid",
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "commentId",
            "required": true,
            "schema": {
              "format": "uuid",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ItemComment"
              }
            },
            "application/json+markdown": {
              "schema": {
                "$ref": "#/components/schemas/ItemComment"
              }
            },
            "application/vnd.airfocus.markdown+json": {
              "schema": {
                "$ref": "#/components/schemas/ItemComment"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ItemCommentWithItemCommentEmbed"
                }
              },
              "application/json+markdown": {
                "schema": {
                  "$ref": "#/components/schemas/ItemCommentWithItemCommentEmbed"
                }
              },
              "application/vnd.airfocus.markdown+json": {
                "schema": {
                  "$ref": "#/components/schemas/ItemCommentWithItemCommentEmbed"
                }
              }
            },
            "description": ""
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "httpAuth": []
          }
        ],
        "summary": "Update an existing comment",
        "tags": [
          "CRUD",
          "Comments"
        ]
      }
    },
    "/api/workspaces/{workspaceId}/comments/{commentId}/reactions/{emojiCode}": {
      "delete": {
        "description": "This action can be performed only as a real authenticated user<br/>Requirements:<br/>  - auth-client scopes: \"workspace\"<br/>  - user permission: \"write\" or higher<br/>Returns:<br/>403 if user does not have the required permission",
        "operationId": "removeCommentReaction",
        "parameters": [
          {
            "deprecated": true,
            "description": "Enable sudo-mode for admins for a single request, which gives full permission to all workspaces in the team.",
            "in": "query",
            "name": "actAsAdmin",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "in": "path",
            "name": "workspaceId",
            "required": true,
            "schema": {
              "format": "uuid",
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "commentId",
            "required": true,
            "schema": {
              "format": "uuid",
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "emojiCode",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Emoji"
            }
          }
        ],
        "responses": {
          "204": {
            "description": ""
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "httpAuth": []
          }
        ],
        "summary": "Remove a reaction from the specified comment.",
        "tags": [
          "Comments"
        ]
      },
      "post": {
        "description": "This action can be performed only as a real authenticated user<br/>Requirements:<br/>  - auth-client scopes: \"workspace\"<br/>  - user permission: \"write\" or higher<br/>Returns:<br/>403 if user does not have the required permission",
        "operationId": "addCommentReaction",
        "parameters": [
          {
            "deprecated": true,
            "description": "Enable sudo-mode for admins for a single request, which gives full permission to all workspaces in the team.",
            "in": "query",
            "name": "actAsAdmin",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "in": "path",
            "name": "workspaceId",
            "required": true,
            "schema": {
              "format": "uuid",
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "commentId",
            "required": true,
            "schema": {
              "format": "uuid",
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "emojiCode",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Emoji"
            }
          }
        ],
        "responses": {
          "204": {
            "description": ""
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "httpAuth": []
          }
        ],
        "summary": "Add a reaction to the specified comment.",
        "tags": [
          "Comments"
        ]
      }
    },
    "/api/workspaces/{workspaceId}/duplicate": {
      "post": {
        "description": "Returns the newly created workspace with embedded data.<br/>Requirements:<br/>- auth-client scopes: \"workspace\"<br/>- user permission: \"write\" or higher",
        "operationId": "duplicateWorkspace",
        "parameters": [
          {
            "deprecated": true,
            "description": "Enable sudo-mode for admins for a single request, which gives full permission to all workspaces in the team.",
            "in": "query",
            "name": "actAsAdmin",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "in": "path",
            "name": "workspaceId",
            "required": true,
            "schema": {
              "format": "uuid",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/WorkspaceDuplicateRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WorkspaceWithWorkspaceEmbed"
                }
              }
            },
            "description": ""
          },
          "400": {
            "content": {
              "application/json": {
                "example": {
                  "code": "not_found",
                  "data": {},
                  "message": "Unknown entity 'fe4c0f30-aa35-3c41-99f9-a5f69c8c4192'"
                },
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "If path parameters are invalid or payload is invalid or resource does not exist."
          },
          "401": {
            "content": {
              "application/json": {
                "example": {
                  "code": "missing_token",
                  "data": {},
                  "message": "Access token is missing"
                },
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "If missing authentication token."
          },
          "403": {
            "content": {
              "application/json": {
                "example": {
                  "code": "forbidden",
                  "data": {},
                  "message": "Insufficient permission"
                },
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "If user does not have the required permission, or authenticated client does not have the required access scopes."
          },
          "default": {
            "content": {
              "application/json": {
                "example": {
                  "code": "unknown_error",
                  "data": {},
                  "message": "Server error"
                },
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "If any other error happens."
          }
        },
        "security": [
          {
            "httpAuth": []
          }
        ],
        "summary": "Duplicate workspace with all its items and apps.",
        "tags": [
          "Workspaces"
        ]
      }
    },
    "/api/workspaces/{workspaceId}/install-field": {
      "post": {
        "deprecated": true,
        "description": "Installs a new field.\nIf it's a team-field, then it's possible to install it with empty or any non-empty amount of linked workspaces.\nOtherwise, if it's not a team-field, then exactly one linked workspace should be specified.<br/>Requirements:<br/>  - auth-client scopes: \"workspace\"<br/>  - user permission: \"full\"<br/>  - team features: \"team-fields\" when operating with team-fields<br/>  - user role: \"admin\" when operating with team-fields<br/>Returns:<br/>403 if user does not have the required permission",
        "operationId": "installFieldLegacyWithWorkspaceId",
        "parameters": [
          {
            "deprecated": true,
            "description": "Enable sudo-mode for admins for a single request, which gives full permission to all workspaces in the team.",
            "in": "query",
            "name": "actAsAdmin",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "description": "ID of the workspace which contains the managed fields.",
            "in": "path",
            "name": "workspaceId",
            "required": true,
            "schema": {
              "format": "uuid",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/FieldServerEndpointsInstallFieldRequestLegacy"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FieldWithFieldEmbed"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "httpAuth": []
          }
        ],
        "summary": "Install a new field",
        "tags": [
          "Fields"
        ]
      }
    },
    "/api/workspaces/{workspaceId}/items": {
      "post": {
        "description": "Returns newly created item with its sanitised data.<br/>Requirements:<br/>- auth-client scopes: \"workspace\"<br/>- user permission: \"write\" or higher",
        "operationId": "createItem",
        "parameters": [
          {
            "deprecated": true,
            "description": "Enable sudo-mode for admins for a single request, which gives full permission to all workspaces in the team.",
            "in": "query",
            "name": "actAsAdmin",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "description": "ID of the workspace which contains the managed items.",
            "in": "path",
            "name": "workspaceId",
            "required": true,
            "schema": {
              "format": "uuid",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateItemRequest"
              }
            },
            "application/json+markdown": {
              "schema": {
                "$ref": "#/components/schemas/CreateItemRequestWithMD"
              }
            },
            "application/vnd.airfocus.markdown+json": {
              "schema": {
                "$ref": "#/components/schemas/CreateItemRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ItemWithItemEmbed"
                }
              },
              "application/json+markdown": {
                "schema": {
                  "$ref": "#/components/schemas/ItemWithMDWithItemEmbed"
                }
              },
              "application/vnd.airfocus.markdown+json": {
                "schema": {
                  "$ref": "#/components/schemas/ItemWithItemEmbed"
                }
              }
            },
            "description": ""
          },
          "400": {
            "content": {
              "application/json": {
                "example": {
                  "code": "bad_request",
                  "data": {},
                  "message": "Request body is invalid"
                },
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "If payload is invalid."
          },
          "401": {
            "content": {
              "application/json": {
                "example": {
                  "code": "missing_token",
                  "data": {},
                  "message": "Access token is missing"
                },
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "If missing authentication token."
          },
          "403": {
            "content": {
              "application/json": {
                "example": {
                  "code": "forbidden",
                  "data": {},
                  "message": "Insufficient permission"
                },
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "If user does not have the required permission, or authenticated client does not have the required access scopes."
          },
          "default": {
            "content": {
              "application/json": {
                "example": {
                  "code": "unknown_error",
                  "data": {},
                  "message": "Server error"
                },
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "If any other error happens."
          }
        },
        "security": [
          {
            "httpAuth": []
          }
        ],
        "summary": "Create a new item",
        "tags": [
          "CRUD",
          "Items"
        ]
      }
    },
    "/api/workspaces/{workspaceId}/items/bulk": {
      "post": {
        "description": "Accepts a list of create/update/patch/delete operations (see the request model for more details).<br/>\nEach operation can target a single or multiple items.<br/>\nReturns a list of results for each input operation including errors.<br/>\nGuarantees that the size and order of the returned results matches the input list of operations.<br/>Requirements:<br/>- auth-client scopes: \"workspace\"<br/>- user permission: \"write\" or higher",
        "operationId": "bulkItems",
        "parameters": [
          {
            "deprecated": true,
            "description": "Enable sudo-mode for admins for a single request, which gives full permission to all workspaces in the team.",
            "in": "query",
            "name": "actAsAdmin",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "description": "ID of the workspace which contains the managed items.",
            "in": "path",
            "name": "workspaceId",
            "required": true,
            "schema": {
              "format": "uuid",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "items": {
                  "$ref": "#/components/schemas/ItemBulkAction"
                },
                "type": "array"
              }
            },
            "application/json+markdown": {
              "schema": {
                "items": {
                  "$ref": "#/components/schemas/ItemBulkAction"
                },
                "type": "array"
              }
            },
            "application/vnd.airfocus.markdown+json": {
              "schema": {
                "items": {
                  "$ref": "#/components/schemas/ItemBulkAction"
                },
                "type": "array"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ItemWithItemEmbedOrNullList"
                }
              },
              "application/json+markdown": {
                "schema": {
                  "$ref": "#/components/schemas/ItemWithMDWithItemEmbedOrNullList"
                }
              },
              "application/vnd.airfocus.markdown+json": {
                "schema": {
                  "$ref": "#/components/schemas/ItemWithItemEmbedOrNullList"
                }
              }
            },
            "description": ""
          },
          "400": {
            "content": {
              "application/json": {
                "example": {
                  "code": "bad_request",
                  "data": {},
                  "message": "Request body is invalid"
                },
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "If payload is invalid."
          },
          "401": {
            "content": {
              "application/json": {
                "example": {
                  "code": "missing_token",
                  "data": {},
                  "message": "Access token is missing"
                },
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "If missing authentication token."
          },
          "403": {
            "content": {
              "application/json": {
                "example": {
                  "code": "forbidden",
                  "data": {},
                  "message": "Insufficient permission"
                },
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "If user does not have the required permission, or authenticated client does not have the required access scopes."
          },
          "default": {
            "content": {
              "application/json": {
                "example": {
                  "code": "unknown_error",
                  "data": {},
                  "message": "Server error"
                },
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "If any other error happens."
          }
        },
        "security": [
          {
            "httpAuth": []
          }
        ],
        "summary": "Perform multiple operations with items",
        "tags": [
          "CRUD",
          "Items"
        ]
      }
    },
    "/api/workspaces/{workspaceId}/items/list": {
      "post": {
        "description": "Returns a list of items resolved for the provided IDs.<br/>\nDoes not fail if any of the requested items is not found or not accessible - instead it returns corresponding error-object instead of an entity-object.<br/>\nGuarantees that the size and order of the returned list matches the requested IDs.<br/>Requirements:<br/>- auth-client scopes: \"workspace:read\"<br/>- user permission: \"read\" or higher",
        "operationId": "listItems",
        "parameters": [
          {
            "deprecated": true,
            "description": "Enable sudo-mode for admins for a single request, which gives full permission to all workspaces in the team.",
            "in": "query",
            "name": "actAsAdmin",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "description": "ID of the workspace which contains the managed items.",
            "in": "path",
            "name": "workspaceId",
            "required": true,
            "schema": {
              "format": "uuid",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "items": {
                  "format": "uuid",
                  "type": "string"
                },
                "type": "array"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ItemWithItemEmbedOrNullList"
                }
              },
              "application/json+markdown": {
                "schema": {
                  "$ref": "#/components/schemas/ItemWithMDWithItemEmbedOrNullList"
                }
              },
              "application/vnd.airfocus.markdown+json": {
                "schema": {
                  "$ref": "#/components/schemas/ItemWithItemEmbedOrNullList"
                }
              }
            },
            "description": ""
          },
          "400": {
            "content": {
              "application/json": {
                "example": {
                  "code": "bad_request",
                  "data": {},
                  "message": "Request body is invalid"
                },
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "If payload is invalid."
          },
          "401": {
            "content": {
              "application/json": {
                "example": {
                  "code": "missing_token",
                  "data": {},
                  "message": "Access token is missing"
                },
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "If missing authentication token."
          },
          "403": {
            "content": {
              "application/json": {
                "example": {
                  "code": "forbidden",
                  "data": {},
                  "message": "Insufficient permission"
                },
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "If user does not have the required permission, or authenticated client does not have the required access scopes."
          },
          "default": {
            "content": {
              "application/json": {
                "example": {
                  "code": "unknown_error",
                  "data": {},
                  "message": "Server error"
                },
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "If any other error happens."
          }
        },
        "security": [
          {
            "httpAuth": []
          }
        ],
        "summary": "Retrieve multiple items by their IDs",
        "tags": [
          "CRUD",
          "Items"
        ]
      }
    },
    "/api/workspaces/{workspaceId}/items/reset-colors": {
      "post": {
        "description": "Sets all items to match the color configured in the workspace settings if it's configured, otherwise resets each item with a randomly generated color from the available color palette.<br/>Requirements:<br/>- auth-client scopes: \"workspace\"<br/>- user permission: \"write\" or higher",
        "operationId": "resetItemColors",
        "parameters": [
          {
            "deprecated": true,
            "description": "Enable sudo-mode for admins for a single request, which gives full permission to all workspaces in the team.",
            "in": "query",
            "name": "actAsAdmin",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "description": "ID of the workspace which contains the managed items.",
            "in": "path",
            "name": "workspaceId",
            "required": true,
            "schema": {
              "format": "uuid",
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": ""
          },
          "400": {
            "content": {
              "application/json": {
                "example": {
                  "code": "not_found",
                  "data": {},
                  "message": "Unknown entity 'fe4c0f30-aa35-3c41-99f9-a5f69c8c4192'"
                },
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "If target workspace does not exist."
          },
          "401": {
            "content": {
              "application/json": {
                "example": {
                  "code": "missing_token",
                  "data": {},
                  "message": "Access token is missing"
                },
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "If missing authentication token."
          },
          "403": {
            "content": {
              "application/json": {
                "example": {
                  "code": "forbidden",
                  "data": {},
                  "message": "Insufficient permission"
                },
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "If user does not have the required permission, or authenticated client does not have the required access scopes."
          },
          "default": {
            "content": {
              "application/json": {
                "example": {
                  "code": "unknown_error",
                  "data": {},
                  "message": "Server error"
                },
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "If any other error happens."
          }
        },
        "security": [
          {
            "httpAuth": []
          }
        ],
        "summary": "Reset colors of all items in the specified workspace.",
        "tags": [
          "Items"
        ]
      }
    },
    "/api/workspaces/{workspaceId}/items/search": {
      "post": {
        "description": "Returns all items or searches items by query. Always returns only items which are accessible by the current user.<br/>Requirements:<br/>- auth-client scopes: \"workspace:read\"<br/>- user permission: \"read\" or higher",
        "operationId": "searchItems",
        "parameters": [
          {
            "deprecated": true,
            "description": "Enable sudo-mode for admins for a single request, which gives full permission to all workspaces in the team.",
            "in": "query",
            "name": "actAsAdmin",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "description": "ID of the workspace which contains the managed items.",
            "in": "path",
            "name": "workspaceId",
            "required": true,
            "schema": {
              "format": "uuid",
              "type": "string"
            }
          },
          {
            "description": "How many elements to skip.",
            "in": "query",
            "name": "offset",
            "required": false,
            "schema": {
              "default": 0,
              "format": "int32",
              "minimum": 0,
              "type": "integer"
            }
          },
          {
            "description": "How many elements to return.",
            "in": "query",
            "name": "limit",
            "required": false,
            "schema": {
              "default": 1000,
              "format": "int32",
              "maximum": 1000,
              "minimum": 0,
              "type": "integer"
            }
          },
          {
            "deprecated": true,
            "description": "From which element the page should start.",
            "in": "query",
            "name": "from",
            "required": false,
            "schema": {
              "default": 0,
              "deprecated": true,
              "format": "int32",
              "minimum": 0,
              "type": "integer"
            }
          },
          {
            "deprecated": true,
            "description": "At which element the page should end (excluding it).",
            "in": "query",
            "name": "to",
            "required": false,
            "schema": {
              "deprecated": true,
              "format": "int32",
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ItemSearchQuery"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ItemWithItemEmbedPage"
                }
              },
              "application/json+markdown": {
                "schema": {
                  "$ref": "#/components/schemas/ItemWithMDWithItemEmbedPage"
                }
              },
              "application/vnd.airfocus.markdown+json": {
                "schema": {
                  "$ref": "#/components/schemas/ItemWithItemEmbedPage"
                }
              }
            },
            "description": ""
          },
          "400": {
            "content": {
              "application/json": {
                "example": {
                  "code": "bad_request",
                  "data": {},
                  "message": "Request body is invalid"
                },
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "If payload is invalid."
          },
          "401": {
            "content": {
              "application/json": {
                "example": {
                  "code": "missing_token",
                  "data": {},
                  "message": "Access token is missing"
                },
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "If missing authentication token."
          },
          "403": {
            "content": {
              "application/json": {
                "example": {
                  "code": "forbidden",
                  "data": {},
                  "message": "Insufficient permission"
                },
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "If user does not have the required permission, or authenticated client does not have the required access scopes."
          },
          "default": {
            "content": {
              "application/json": {
                "example": {
                  "code": "unknown_error",
                  "data": {},
                  "message": "Server error"
                },
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "If any other error happens."
          }
        },
        "security": [
          {
            "httpAuth": []
          }
        ],
        "summary": "Retrieve or search items",
        "tags": [
          "CRUD",
          "Items"
        ]
      }
    },
    "/api/workspaces/{workspaceId}/items/unwatch": {
      "post": {
        "description": "Requirements:<br/>- auth-client scopes: \"workspace\"<br/>- user permission: \"write\" or higher",
        "operationId": "unwatchItems",
        "parameters": [
          {
            "deprecated": true,
            "description": "Enable sudo-mode for admins for a single request, which gives full permission to all workspaces in the team.",
            "in": "query",
            "name": "actAsAdmin",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "description": "ID of the workspace which contains the managed items.",
            "in": "path",
            "name": "workspaceId",
            "required": true,
            "schema": {
              "format": "uuid",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "items": {
                  "format": "uuid",
                  "type": "string"
                },
                "type": "array",
                "uniqueItems": true
              }
            }
          },
          "description": "List of item IDs to unwatch.",
          "required": false
        },
        "responses": {
          "204": {
            "description": ""
          },
          "400": {
            "content": {
              "application/json": {
                "example": {
                  "code": "not_found",
                  "data": {},
                  "message": "Unknown entity 'fe4c0f30-aa35-3c41-99f9-a5f69c8c4192'"
                },
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "If payload is invalid or resource does not exist."
          },
          "401": {
            "content": {
              "application/json": {
                "example": {
                  "code": "missing_token",
                  "data": {},
                  "message": "Access token is missing"
                },
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "If missing authentication token."
          },
          "403": {
            "content": {
              "application/json": {
                "example": {
                  "code": "forbidden",
                  "data": {},
                  "message": "Insufficient permission"
                },
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "If user does not have the required permission, or authenticated client does not have the required access scopes."
          },
          "default": {
            "content": {
              "application/json": {
                "example": {
                  "code": "unknown_error",
                  "data": {},
                  "message": "Server error"
                },
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "If any other error happens."
          }
        },
        "security": [
          {
            "httpAuth": []
          }
        ],
        "summary": "Remove watching status of the current user for the specified items.",
        "tags": [
          "Items"
        ]
      }
    },
    "/api/workspaces/{workspaceId}/items/watch": {
      "post": {
        "description": "Requirements:<br/>- auth-client scopes: \"workspace\"<br/>- user permission: \"write\" or higher",
        "operationId": "watchItems",
        "parameters": [
          {
            "deprecated": true,
            "description": "Enable sudo-mode for admins for a single request, which gives full permission to all workspaces in the team.",
            "in": "query",
            "name": "actAsAdmin",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "description": "ID of the workspace which contains the managed items.",
            "in": "path",
            "name": "workspaceId",
            "required": true,
            "schema": {
              "format": "uuid",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "items": {
                  "format": "uuid",
                  "type": "string"
                },
                "type": "array",
                "uniqueItems": true
              }
            }
          },
          "description": "List of item IDs to watch.",
          "required": false
        },
        "responses": {
          "204": {
            "description": ""
          },
          "400": {
            "content": {
              "application/json": {
                "example": {
                  "code": "not_found",
                  "data": {},
                  "message": "Unknown entity 'fe4c0f30-aa35-3c41-99f9-a5f69c8c4192'"
                },
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "If payload is invalid or resource does not exist."
          },
          "401": {
            "content": {
              "application/json": {
                "example": {
                  "code": "missing_token",
                  "data": {},
                  "message": "Access token is missing"
                },
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "If missing authentication token."
          },
          "403": {
            "content": {
              "application/json": {
                "example": {
                  "code": "forbidden",
                  "data": {},
                  "message": "Insufficient permission"
                },
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "If user does not have the required permission, or authenticated client does not have the required access scopes."
          },
          "default": {
            "content": {
              "application/json": {
                "example": {
                  "code": "unknown_error",
                  "data": {},
                  "message": "Server error"
                },
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "If any other error happens."
          }
        },
        "security": [
          {
            "httpAuth": []
          }
        ],
        "summary": "Set current user as a watcher of the specified items.",
        "tags": [
          "Items"
        ]
      }
    },
    "/api/workspaces/{workspaceId}/items/{itemId}": {
      "delete": {
        "description": "Returns empty result if the item was successfully deleted.<br/>Requirements:<br/>- auth-client scopes: \"workspace\"<br/>- user permission: \"write\" or higher",
        "operationId": "deleteItem",
        "parameters": [
          {
            "deprecated": true,
            "description": "Enable sudo-mode for admins for a single request, which gives full permission to all workspaces in the team.",
            "in": "query",
            "name": "actAsAdmin",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "description": "ID of the workspace which contains the managed items.",
            "in": "path",
            "name": "workspaceId",
            "required": true,
            "schema": {
              "format": "uuid",
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "itemId",
            "required": true,
            "schema": {
              "format": "uuid",
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": ""
          },
          "400": {
            "content": {
              "application/json": {
                "example": {
                  "code": "not_found",
                  "data": {},
                  "message": "Unknown entity 'fe4c0f30-aa35-3c41-99f9-a5f69c8c4192'"
                },
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "If path parameters are invalid or resource does not exist."
          },
          "401": {
            "content": {
              "application/json": {
                "example": {
                  "code": "missing_token",
                  "data": {},
                  "message": "Access token is missing"
                },
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "If missing authentication token."
          },
          "403": {
            "content": {
              "application/json": {
                "example": {
                  "code": "forbidden",
                  "data": {},
                  "message": "Insufficient permission"
                },
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "If user does not have the required permission, or authenticated client does not have the required access scopes."
          },
          "default": {
            "content": {
              "application/json": {
                "example": {
                  "code": "unknown_error",
                  "data": {},
                  "message": "Server error"
                },
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "If any other error happens."
          }
        },
        "security": [
          {
            "httpAuth": []
          }
        ],
        "summary": "Delete an existing item",
        "tags": [
          "CRUD",
          "Items"
        ]
      },
      "get": {
        "description": "Returns found item.<br/>Requirements:<br/>- auth-client scopes: \"workspace:read\"<br/>- user permission: \"read\" or higher",
        "operationId": "retrieveItem",
        "parameters": [
          {
            "deprecated": true,
            "description": "Enable sudo-mode for admins for a single request, which gives full permission to all workspaces in the team.",
            "in": "query",
            "name": "actAsAdmin",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "description": "ID of the workspace which contains the managed items.",
            "in": "path",
            "name": "workspaceId",
            "required": true,
            "schema": {
              "format": "uuid",
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "itemId",
            "required": true,
            "schema": {
              "format": "uuid",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ItemWithItemEmbed"
                }
              },
              "application/json+markdown": {
                "schema": {
                  "$ref": "#/components/schemas/ItemWithMDWithItemEmbed"
                }
              },
              "application/vnd.airfocus.markdown+json": {
                "schema": {
                  "$ref": "#/components/schemas/ItemWithItemEmbed"
                }
              }
            },
            "description": ""
          },
          "400": {
            "content": {
              "application/json": {
                "example": {
                  "code": "not_found",
                  "data": {},
                  "message": "Unknown entity 'fe4c0f30-aa35-3c41-99f9-a5f69c8c4192'"
                },
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "If path parameters are invalid or payload is invalid or resource does not exist."
          },
          "401": {
            "content": {
              "application/json": {
                "example": {
                  "code": "missing_token",
                  "data": {},
                  "message": "Access token is missing"
                },
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "If missing authentication token."
          },
          "403": {
            "content": {
              "application/json": {
                "example": {
                  "code": "forbidden",
                  "data": {},
                  "message": "Insufficient permission"
                },
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "If user does not have the required permission, or authenticated client does not have the required access scopes."
          },
          "default": {
            "content": {
              "application/json": {
                "example": {
                  "code": "unknown_error",
                  "data": {},
                  "message": "Server error"
                },
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "If any other error happens."
          }
        },
        "security": [
          {
            "httpAuth": []
          }
        ],
        "summary": "Retrieve a single item by its ID",
        "tags": [
          "CRUD",
          "Items"
        ]
      },
      "patch": {
        "description": "Returns the whole updated item with its sanitised data.<br>Note: also supports patching description as a Markdown string.<br/>Requirements:<br/>- auth-client scopes: \"workspace\"<br/>- user permission: \"write\" or higher",
        "operationId": "patchItem",
        "parameters": [
          {
            "deprecated": true,
            "description": "Enable sudo-mode for admins for a single request, which gives full permission to all workspaces in the team.",
            "in": "query",
            "name": "actAsAdmin",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "description": "ID of the workspace which contains the managed items.",
            "in": "path",
            "name": "workspaceId",
            "required": true,
            "schema": {
              "format": "uuid",
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "itemId",
            "required": true,
            "schema": {
              "format": "uuid",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/JsonPatch"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ItemWithItemEmbed"
                }
              },
              "application/json+markdown": {
                "schema": {
                  "$ref": "#/components/schemas/ItemWithMDWithItemEmbed"
                }
              },
              "application/vnd.airfocus.markdown+json": {
                "schema": {
                  "$ref": "#/components/schemas/ItemWithItemEmbed"
                }
              }
            },
            "description": ""
          },
          "400": {
            "content": {
              "application/json": {
                "example": {
                  "code": "not_found",
                  "data": {},
                  "message": "Unknown entity 'fe4c0f30-aa35-3c41-99f9-a5f69c8c4192'"
                },
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "If path parameters are invalid or payload is invalid or resource does not exist."
          },
          "401": {
            "content": {
              "application/json": {
                "example": {
                  "code": "missing_token",
                  "data": {},
                  "message": "Access token is missing"
                },
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "If missing authentication token."
          },
          "403": {
            "content": {
              "application/json": {
                "example": {
                  "code": "forbidden",
                  "data": {},
                  "message": "Insufficient permission"
                },
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "If user does not have the required permission, or authenticated client does not have the required access scopes."
          },
          "default": {
            "content": {
              "application/json": {
                "example": {
                  "code": "unknown_error",
                  "data": {},
                  "message": "Server error"
                },
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "If any other error happens."
          }
        },
        "security": [
          {
            "httpAuth": []
          }
        ],
        "summary": "Patch an existing item",
        "tags": [
          "CRUD",
          "Items"
        ]
      },
      "put": {
        "description": "Returns updated item with its sanitised data.<br/>Requirements:<br/>- auth-client scopes: \"workspace\"<br/>- user permission: \"write\" or higher",
        "operationId": "updateItem",
        "parameters": [
          {
            "deprecated": true,
            "description": "Enable sudo-mode for admins for a single request, which gives full permission to all workspaces in the team.",
            "in": "query",
            "name": "actAsAdmin",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "description": "ID of the workspace which contains the managed items.",
            "in": "path",
            "name": "workspaceId",
            "required": true,
            "schema": {
              "format": "uuid",
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "itemId",
            "required": true,
            "schema": {
              "format": "uuid",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateItemRequest"
              }
            },
            "application/json+markdown": {
              "schema": {
                "$ref": "#/components/schemas/UpdateItemRequestWithMD"
              }
            },
            "application/vnd.airfocus.markdown+json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateItemRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ItemWithItemEmbed"
                }
              },
              "application/json+markdown": {
                "schema": {
                  "$ref": "#/components/schemas/ItemWithMDWithItemEmbed"
                }
              },
              "application/vnd.airfocus.markdown+json": {
                "schema": {
                  "$ref": "#/components/schemas/ItemWithItemEmbed"
                }
              }
            },
            "description": ""
          },
          "400": {
            "content": {
              "application/json": {
                "example": {
                  "code": "not_found",
                  "data": {},
                  "message": "Unknown entity 'fe4c0f30-aa35-3c41-99f9-a5f69c8c4192'"
                },
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "If path parameters are invalid or payload is invalid or resource does not exist."
          },
          "401": {
            "content": {
              "application/json": {
                "example": {
                  "code": "missing_token",
                  "data": {},
                  "message": "Access token is missing"
                },
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "If missing authentication token."
          },
          "403": {
            "content": {
              "application/json": {
                "example": {
                  "code": "forbidden",
                  "data": {},
                  "message": "Insufficient permission"
                },
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "If user does not have the required permission, or authenticated client does not have the required access scopes."
          },
          "default": {
            "content": {
              "application/json": {
                "example": {
                  "code": "unknown_error",
                  "data": {},
                  "message": "Server error"
                },
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "If any other error happens."
          }
        },
        "security": [
          {
            "httpAuth": []
          }
        ],
        "summary": "Update an existing item",
        "tags": [
          "CRUD",
          "Items"
        ]
      }
    },
    "/api/workspaces/{workspaceId}/links": {
      "post": {
        "description": "Returns newly created item-link with its sanitised data.<br/>Requirements:<br/>- auth-client scopes: \"workspace\"<br/>- user permission: \"write\" or higher",
        "operationId": "createItemLink",
        "parameters": [
          {
            "deprecated": true,
            "description": "Enable sudo-mode for admins for a single request, which gives full permission to all workspaces in the team.",
            "in": "query",
            "name": "actAsAdmin",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "description": "ID of the workspace which contains the managed item-links.",
            "in": "path",
            "name": "workspaceId",
            "required": true,
            "schema": {
              "format": "uuid",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateItemLinkRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ItemLinkWithItemLinkEmbed"
                }
              }
            },
            "description": ""
          },
          "400": {
            "content": {
              "application/json": {
                "example": {
                  "code": "bad_request",
                  "data": {},
                  "message": "Request body is invalid"
                },
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "If payload is invalid."
          },
          "401": {
            "content": {
              "application/json": {
                "example": {
                  "code": "missing_token",
                  "data": {},
                  "message": "Access token is missing"
                },
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "If missing authentication token."
          },
          "403": {
            "content": {
              "application/json": {
                "example": {
                  "code": "forbidden",
                  "data": {},
                  "message": "Insufficient permission"
                },
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "If user does not have the required permission, or authenticated client does not have the required access scopes."
          },
          "default": {
            "content": {
              "application/json": {
                "example": {
                  "code": "unknown_error",
                  "data": {},
                  "message": "Server error"
                },
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "If any other error happens."
          }
        },
        "security": [
          {
            "httpAuth": []
          }
        ],
        "summary": "Create a new item-link",
        "tags": [
          "CRUD",
          "Items:Links"
        ]
      }
    },
    "/api/workspaces/{workspaceId}/links/bulk": {
      "post": {
        "description": "Accepts a list of create/update/patch/delete operations (see the request model for more details).<br/>\nEach operation can target a single or multiple item-links.<br/>\nReturns a list of results for each input operation including errors.<br/>\nGuarantees that the size and order of the returned results matches the input list of operations.<br/>Requirements:<br/>- auth-client scopes: \"workspace\"<br/>- user permission: \"write\" or higher",
        "operationId": "bulkItemLinks",
        "parameters": [
          {
            "deprecated": true,
            "description": "Enable sudo-mode for admins for a single request, which gives full permission to all workspaces in the team.",
            "in": "query",
            "name": "actAsAdmin",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "description": "ID of the workspace which contains the managed item-links.",
            "in": "path",
            "name": "workspaceId",
            "required": true,
            "schema": {
              "format": "uuid",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "items": {
                  "$ref": "#/components/schemas/ItemLinkBulkAction"
                },
                "type": "array"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ItemLinkWithItemLinkEmbedOrNullList"
                }
              }
            },
            "description": ""
          },
          "400": {
            "content": {
              "application/json": {
                "example": {
                  "code": "bad_request",
                  "data": {},
                  "message": "Request body is invalid"
                },
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "If payload is invalid."
          },
          "401": {
            "content": {
              "application/json": {
                "example": {
                  "code": "missing_token",
                  "data": {},
                  "message": "Access token is missing"
                },
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "If missing authentication token."
          },
          "403": {
            "content": {
              "application/json": {
                "example": {
                  "code": "forbidden",
                  "data": {},
                  "message": "Insufficient permission"
                },
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "If user does not have the required permission, or authenticated client does not have the required access scopes."
          },
          "default": {
            "content": {
              "application/json": {
                "example": {
                  "code": "unknown_error",
                  "data": {},
                  "message": "Server error"
                },
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "If any other error happens."
          }
        },
        "security": [
          {
            "httpAuth": []
          }
        ],
        "summary": "Perform multiple operations with item-links",
        "tags": [
          "CRUD",
          "Items:Links"
        ]
      }
    },
    "/api/workspaces/{workspaceId}/links/list": {
      "post": {
        "description": "Returns a list of item-links resolved for the provided IDs.<br/>\nDoes not fail if any of the requested item-links is not found or not accessible - instead it returns corresponding error-object instead of an entity-object.<br/>\nGuarantees that the size and order of the returned list matches the requested IDs.<br/>Requirements:<br/>- auth-client scopes: \"workspace:read\"<br/>- user permission: \"read\" or higher",
        "operationId": "listItemLinks",
        "parameters": [
          {
            "deprecated": true,
            "description": "Enable sudo-mode for admins for a single request, which gives full permission to all workspaces in the team.",
            "in": "query",
            "name": "actAsAdmin",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "description": "ID of the workspace which contains the managed item-links.",
            "in": "path",
            "name": "workspaceId",
            "required": true,
            "schema": {
              "format": "uuid",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "items": {
                  "format": "uuid",
                  "type": "string"
                },
                "type": "array"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ItemLinkWithItemLinkEmbedOrNullList"
                }
              }
            },
            "description": ""
          },
          "400": {
            "content": {
              "application/json": {
                "example": {
                  "code": "bad_request",
                  "data": {},
                  "message": "Request body is invalid"
                },
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "If payload is invalid."
          },
          "401": {
            "content": {
              "application/json": {
                "example": {
                  "code": "missing_token",
                  "data": {},
                  "message": "Access token is missing"
                },
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "If missing authentication token."
          },
          "403": {
            "content": {
              "application/json": {
                "example": {
                  "code": "forbidden",
                  "data": {},
                  "message": "Insufficient permission"
                },
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "If user does not have the required permission, or authenticated client does not have the required access scopes."
          },
          "default": {
            "content": {
              "application/json": {
                "example": {
                  "code": "unknown_error",
                  "data": {},
                  "message": "Server error"
                },
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "If any other error happens."
          }
        },
        "security": [
          {
            "httpAuth": []
          }
        ],
        "summary": "Retrieve multiple item-links by their IDs",
        "tags": [
          "CRUD",
          "Items:Links"
        ]
      }
    },
    "/api/workspaces/{workspaceId}/links/search": {
      "post": {
        "description": "Returns all item-links or searches item-links by query. Always returns only item-links which are accessible by the current user.<br/>Requirements:<br/>- auth-client scopes: \"workspace:read\"<br/>- user permission: \"read\" or higher",
        "operationId": "searchItemLinks",
        "parameters": [
          {
            "deprecated": true,
            "description": "Enable sudo-mode for admins for a single request, which gives full permission to all workspaces in the team.",
            "in": "query",
            "name": "actAsAdmin",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "description": "ID of the workspace which contains the managed item-links.",
            "in": "path",
            "name": "workspaceId",
            "required": true,
            "schema": {
              "format": "uuid",
              "type": "string"
            }
          },
          {
            "description": "How many elements to skip.",
            "in": "query",
            "name": "offset",
            "required": false,
            "schema": {
              "default": 0,
              "format": "int32",
              "minimum": 0,
              "type": "integer"
            }
          },
          {
            "description": "How many elements to return.",
            "in": "query",
            "name": "limit",
            "required": false,
            "schema": {
              "default": 1000,
              "format": "int32",
              "maximum": 1000,
              "minimum": 0,
              "type": "integer"
            }
          },
          {
            "deprecated": true,
            "description": "From which element the page should start.",
            "in": "query",
            "name": "from",
            "required": false,
            "schema": {
              "default": 0,
              "deprecated": true,
              "format": "int32",
              "minimum": 0,
              "type": "integer"
            }
          },
          {
            "deprecated": true,
            "description": "At which element the page should end (excluding it).",
            "in": "query",
            "name": "to",
            "required": false,
            "schema": {
              "deprecated": true,
              "format": "int32",
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ItemLinkSearchQuery"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ItemLinkWithItemLinkEmbedPage"
                }
              }
            },
            "description": ""
          },
          "400": {
            "content": {
              "application/json": {
                "example": {
                  "code": "bad_request",
                  "data": {},
                  "message": "Request body is invalid"
                },
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "If payload is invalid."
          },
          "401": {
            "content": {
              "application/json": {
                "example": {
                  "code": "missing_token",
                  "data": {},
                  "message": "Access token is missing"
                },
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "If missing authentication token."
          },
          "403": {
            "content": {
              "application/json": {
                "example": {
                  "code": "forbidden",
                  "data": {},
                  "message": "Insufficient permission"
                },
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "If user does not have the required permission, or authenticated client does not have the required access scopes."
          },
          "default": {
            "content": {
              "application/json": {
                "example": {
                  "code": "unknown_error",
                  "data": {},
                  "message": "Server error"
                },
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "If any other error happens."
          }
        },
        "security": [
          {
            "httpAuth": []
          }
        ],
        "summary": "Retrieve or search item-links",
        "tags": [
          "CRUD",
          "Items:Links"
        ]
      }
    },
    "/api/workspaces/{workspaceId}/links/{itemLinkId}": {
      "delete": {
        "description": "Returns empty result if the item-link was successfully deleted.<br/>Requirements:<br/>- auth-client scopes: \"workspace\"<br/>- user permission: \"write\" or higher",
        "operationId": "deleteItemLink",
        "parameters": [
          {
            "deprecated": true,
            "description": "Enable sudo-mode for admins for a single request, which gives full permission to all workspaces in the team.",
            "in": "query",
            "name": "actAsAdmin",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "description": "ID of the workspace which contains the managed item-links.",
            "in": "path",
            "name": "workspaceId",
            "required": true,
            "schema": {
              "format": "uuid",
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "itemLinkId",
            "required": true,
            "schema": {
              "format": "uuid",
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": ""
          },
          "400": {
            "content": {
              "application/json": {
                "example": {
                  "code": "not_found",
                  "data": {},
                  "message": "Unknown entity 'fe4c0f30-aa35-3c41-99f9-a5f69c8c4192'"
                },
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "If path parameters are invalid or resource does not exist."
          },
          "401": {
            "content": {
              "application/json": {
                "example": {
                  "code": "missing_token",
                  "data": {},
                  "message": "Access token is missing"
                },
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "If missing authentication token."
          },
          "403": {
            "content": {
              "application/json": {
                "example": {
                  "code": "forbidden",
                  "data": {},
                  "message": "Insufficient permission"
                },
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "If user does not have the required permission, or authenticated client does not have the required access scopes."
          },
          "default": {
            "content": {
              "application/json": {
                "example": {
                  "code": "unknown_error",
                  "data": {},
                  "message": "Server error"
                },
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "If any other error happens."
          }
        },
        "security": [
          {
            "httpAuth": []
          }
        ],
        "summary": "Delete an existing item-link",
        "tags": [
          "CRUD",
          "Items:Links"
        ]
      },
      "get": {
        "description": "Returns found item-link.<br/>Requirements:<br/>- auth-client scopes: \"workspace:read\"<br/>- user permission: \"read\" or higher",
        "operationId": "retrieveItemLink",
        "parameters": [
          {
            "deprecated": true,
            "description": "Enable sudo-mode for admins for a single request, which gives full permission to all workspaces in the team.",
            "in": "query",
            "name": "actAsAdmin",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "description": "ID of the workspace which contains the managed item-links.",
            "in": "path",
            "name": "workspaceId",
            "required": true,
            "schema": {
              "format": "uuid",
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "itemLinkId",
            "required": true,
            "schema": {
              "format": "uuid",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ItemLinkWithItemLinkEmbed"
                }
              }
            },
            "description": ""
          },
          "400": {
            "content": {
              "application/json": {
                "example": {
                  "code": "not_found",
                  "data": {},
                  "message": "Unknown entity 'fe4c0f30-aa35-3c41-99f9-a5f69c8c4192'"
                },
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "If path parameters are invalid or payload is invalid or resource does not exist."
          },
          "401": {
            "content": {
              "application/json": {
                "example": {
                  "code": "missing_token",
                  "data": {},
                  "message": "Access token is missing"
                },
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "If missing authentication token."
          },
          "403": {
            "content": {
              "application/json": {
                "example": {
                  "code": "forbidden",
                  "data": {},
                  "message": "Insufficient permission"
                },
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "If user does not have the required permission, or authenticated client does not have the required access scopes."
          },
          "default": {
            "content": {
              "application/json": {
                "example": {
                  "code": "unknown_error",
                  "data": {},
                  "message": "Server error"
                },
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "If any other error happens."
          }
        },
        "security": [
          {
            "httpAuth": []
          }
        ],
        "summary": "Retrieve a single item-link by its ID",
        "tags": [
          "CRUD",
          "Items:Links"
        ]
      },
      "patch": {
        "description": "Returns the whole updated item-link with its sanitised data.<br/>Requirements:<br/>- auth-client scopes: \"workspace\"<br/>- user permission: \"write\" or higher",
        "operationId": "patchItemLink",
        "parameters": [
          {
            "deprecated": true,
            "description": "Enable sudo-mode for admins for a single request, which gives full permission to all workspaces in the team.",
            "in": "query",
            "name": "actAsAdmin",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "description": "ID of the workspace which contains the managed item-links.",
            "in": "path",
            "name": "workspaceId",
            "required": true,
            "schema": {
              "format": "uuid",
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "itemLinkId",
            "required": true,
            "schema": {
              "format": "uuid",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/JsonPatch"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ItemLinkWithItemLinkEmbed"
                }
              }
            },
            "description": ""
          },
          "400": {
            "content": {
              "application/json": {
                "example": {
                  "code": "not_found",
                  "data": {},
                  "message": "Unknown entity 'fe4c0f30-aa35-3c41-99f9-a5f69c8c4192'"
                },
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "If path parameters are invalid or payload is invalid or resource does not exist."
          },
          "401": {
            "content": {
              "application/json": {
                "example": {
                  "code": "missing_token",
                  "data": {},
                  "message": "Access token is missing"
                },
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "If missing authentication token."
          },
          "403": {
            "content": {
              "application/json": {
                "example": {
                  "code": "forbidden",
                  "data": {},
                  "message": "Insufficient permission"
                },
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "If user does not have the required permission, or authenticated client does not have the required access scopes."
          },
          "default": {
            "content": {
              "application/json": {
                "example": {
                  "code": "unknown_error",
                  "data": {},
                  "message": "Server error"
                },
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "If any other error happens."
          }
        },
        "security": [
          {
            "httpAuth": []
          }
        ],
        "summary": "Patch an existing item-link",
        "tags": [
          "CRUD",
          "Items:Links"
        ]
      },
      "put": {
        "description": "Returns updated item-link with its sanitised data.<br/>Requirements:<br/>- auth-client scopes: \"workspace\"<br/>- user permission: \"write\" or higher",
        "operationId": "updateItemLink",
        "parameters": [
          {
            "deprecated": true,
            "description": "Enable sudo-mode for admins for a single request, which gives full permission to all workspaces in the team.",
            "in": "query",
            "name": "actAsAdmin",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "description": "ID of the workspace which contains the managed item-links.",
            "in": "path",
            "name": "workspaceId",
            "required": true,
            "schema": {
              "format": "uuid",
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "itemLinkId",
            "required": true,
            "schema": {
              "format": "uuid",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateItemLinkRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ItemLinkWithItemLinkEmbed"
                }
              }
            },
            "description": ""
          },
          "400": {
            "content": {
              "application/json": {
                "example": {
                  "code": "not_found",
                  "data": {},
                  "message": "Unknown entity 'fe4c0f30-aa35-3c41-99f9-a5f69c8c4192'"
                },
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "If path parameters are invalid or payload is invalid or resource does not exist."
          },
          "401": {
            "content": {
              "application/json": {
                "example": {
                  "code": "missing_token",
                  "data": {},
                  "message": "Access token is missing"
                },
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "If missing authentication token."
          },
          "403": {
            "content": {
              "application/json": {
                "example": {
                  "code": "forbidden",
                  "data": {},
                  "message": "Insufficient permission"
                },
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "If user does not have the required permission, or authenticated client does not have the required access scopes."
          },
          "default": {
            "content": {
              "application/json": {
                "example": {
                  "code": "unknown_error",
                  "data": {},
                  "message": "Server error"
                },
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "If any other error happens."
          }
        },
        "security": [
          {
            "httpAuth": []
          }
        ],
        "summary": "Update an existing item-link",
        "tags": [
          "CRUD",
          "Items:Links"
        ]
      }
    },
    "/api/workspaces/{workspaceId}/milestones": {
      "post": {
        "description": "Returns newly created milestone with its sanitised data.<br/>Requirements:<br/>- auth-client scopes: \"workspace\"<br/>- user permission: \"write\" or higher",
        "operationId": "createMilestone",
        "parameters": [
          {
            "deprecated": true,
            "description": "Enable sudo-mode for admins for a single request, which gives full permission to all workspaces in the team.",
            "in": "query",
            "name": "actAsAdmin",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "description": "ID of the workspace which contains the managed milestones.",
            "in": "path",
            "name": "workspaceId",
            "required": true,
            "schema": {
              "format": "uuid",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateMilestoneRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MilestoneWithEmbed"
                }
              }
            },
            "description": ""
          },
          "400": {
            "content": {
              "application/json": {
                "example": {
                  "code": "bad_request",
                  "data": {},
                  "message": "Request body is invalid"
                },
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "If payload is invalid."
          },
          "401": {
            "content": {
              "application/json": {
                "example": {
                  "code": "missing_token",
                  "data": {},
                  "message": "Access token is missing"
                },
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "If missing authentication token."
          },
          "403": {
            "content": {
              "application/json": {
                "example": {
                  "code": "forbidden",
                  "data": {},
                  "message": "Insufficient permission"
                },
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "If user does not have the required permission, or authenticated client does not have the required access scopes."
          },
          "default": {
            "content": {
              "application/json": {
                "example": {
                  "code": "unknown_error",
                  "data": {},
                  "message": "Server error"
                },
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "If any other error happens."
          }
        },
        "security": [
          {
            "httpAuth": []
          }
        ],
        "summary": "Create a new milestone",
        "tags": [
          "CRUD",
          "Milestones"
        ]
      }
    },
    "/api/workspaces/{workspaceId}/milestones/bulk": {
      "post": {
        "description": "Accepts a list of create/update/patch/delete operations (see the request model for more details).<br/>\nEach operation can target a single or multiple milestones.<br/>\nReturns a list of results for each input operation including errors.<br/>\nGuarantees that the size and order of the returned results matches the input list of operations.<br/>Requirements:<br/>- auth-client scopes: \"workspace\"<br/>- user permission: \"write\" or higher",
        "operationId": "bulkMilestones",
        "parameters": [
          {
            "deprecated": true,
            "description": "Enable sudo-mode for admins for a single request, which gives full permission to all workspaces in the team.",
            "in": "query",
            "name": "actAsAdmin",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "description": "ID of the workspace which contains the managed milestones.",
            "in": "path",
            "name": "workspaceId",
            "required": true,
            "schema": {
              "format": "uuid",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "items": {
                  "$ref": "#/components/schemas/MilestoneBulkAction"
                },
                "type": "array"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MilestoneWithEmbedOrNullList"
                }
              }
            },
            "description": ""
          },
          "400": {
            "content": {
              "application/json": {
                "example": {
                  "code": "bad_request",
                  "data": {},
                  "message": "Request body is invalid"
                },
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "If payload is invalid."
          },
          "401": {
            "content": {
              "application/json": {
                "example": {
                  "code": "missing_token",
                  "data": {},
                  "message": "Access token is missing"
                },
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "If missing authentication token."
          },
          "403": {
            "content": {
              "application/json": {
                "example": {
                  "code": "forbidden",
                  "data": {},
                  "message": "Insufficient permission"
                },
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "If user does not have the required permission, or authenticated client does not have the required access scopes."
          },
          "default": {
            "content": {
              "application/json": {
                "example": {
                  "code": "unknown_error",
                  "data": {},
                  "message": "Server error"
                },
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "If any other error happens."
          }
        },
        "security": [
          {
            "httpAuth": []
          }
        ],
        "summary": "Perform multiple operations with milestones",
        "tags": [
          "CRUD",
          "Milestones"
        ]
      }
    },
    "/api/workspaces/{workspaceId}/milestones/list": {
      "post": {
        "description": "Returns a list of milestones resolved for the provided IDs.<br/>\nDoes not fail if any of the requested milestones is not found or not accessible - instead it returns corresponding error-object instead of an entity-object.<br/>\nGuarantees that the size and order of the returned list matches the requested IDs.<br/>Requirements:<br/>- auth-client scopes: \"workspace:read\"<br/>- user permission: \"read\" or higher",
        "operationId": "listMilestones",
        "parameters": [
          {
            "deprecated": true,
            "description": "Enable sudo-mode for admins for a single request, which gives full permission to all workspaces in the team.",
            "in": "query",
            "name": "actAsAdmin",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "description": "ID of the workspace which contains the managed milestones.",
            "in": "path",
            "name": "workspaceId",
            "required": true,
            "schema": {
              "format": "uuid",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "items": {
                  "format": "uuid",
                  "type": "string"
                },
                "type": "array"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MilestoneWithEmbedOrNullList"
                }
              }
            },
            "description": ""
          },
          "400": {
            "content": {
              "application/json": {
                "example": {
                  "code": "bad_request",
                  "data": {},
                  "message": "Request body is invalid"
                },
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "If payload is invalid."
          },
          "401": {
            "content": {
              "application/json": {
                "example": {
                  "code": "missing_token",
                  "data": {},
                  "message": "Access token is missing"
                },
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "If missing authentication token."
          },
          "403": {
            "content": {
              "application/json": {
                "example": {
                  "code": "forbidden",
                  "data": {},
                  "message": "Insufficient permission"
                },
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "If user does not have the required permission, or authenticated client does not have the required access scopes."
          },
          "default": {
            "content": {
              "application/json": {
                "example": {
                  "code": "unknown_error",
                  "data": {},
                  "message": "Server error"
                },
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "If any other error happens."
          }
        },
        "security": [
          {
            "httpAuth": []
          }
        ],
        "summary": "Retrieve multiple milestones by their IDs",
        "tags": [
          "CRUD",
          "Milestones"
        ]
      }
    },
    "/api/workspaces/{workspaceId}/milestones/search": {
      "post": {
        "description": "Returns all milestones or searches milestones by query. Always returns only milestones which are accessible by the current user.<br/>Requirements:<br/>- auth-client scopes: \"workspace:read\"<br/>- user permission: \"read\" or higher",
        "operationId": "searchMilestones",
        "parameters": [
          {
            "deprecated": true,
            "description": "Enable sudo-mode for admins for a single request, which gives full permission to all workspaces in the team.",
            "in": "query",
            "name": "actAsAdmin",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "description": "ID of the workspace which contains the managed milestones.",
            "in": "path",
            "name": "workspaceId",
            "required": true,
            "schema": {
              "format": "uuid",
              "type": "string"
            }
          },
          {
            "description": "How many elements to skip.",
            "in": "query",
            "name": "offset",
            "required": false,
            "schema": {
              "default": 0,
              "format": "int32",
              "minimum": 0,
              "type": "integer"
            }
          },
          {
            "description": "How many elements to return.",
            "in": "query",
            "name": "limit",
            "required": false,
            "schema": {
              "default": 1000,
              "format": "int32",
              "maximum": 1000,
              "minimum": 0,
              "type": "integer"
            }
          },
          {
            "deprecated": true,
            "description": "From which element the page should start.",
            "in": "query",
            "name": "from",
            "required": false,
            "schema": {
              "default": 0,
              "deprecated": true,
              "format": "int32",
              "minimum": 0,
              "type": "integer"
            }
          },
          {
            "deprecated": true,
            "description": "At which element the page should end (excluding it).",
            "in": "query",
            "name": "to",
            "required": false,
            "schema": {
              "deprecated": true,
              "format": "int32",
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MilestoneWithEmbedPage"
                }
              }
            },
            "description": ""
          },
          "400": {
            "content": {
              "application/json": {
                "example": {
                  "code": "bad_request",
                  "data": {},
                  "message": "Request body is invalid"
                },
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "If payload is invalid."
          },
          "401": {
            "content": {
              "application/json": {
                "example": {
                  "code": "missing_token",
                  "data": {},
                  "message": "Access token is missing"
                },
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "If missing authentication token."
          },
          "403": {
            "content": {
              "application/json": {
                "example": {
                  "code": "forbidden",
                  "data": {},
                  "message": "Insufficient permission"
                },
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "If user does not have the required permission, or authenticated client does not have the required access scopes."
          },
          "default": {
            "content": {
              "application/json": {
                "example": {
                  "code": "unknown_error",
                  "data": {},
                  "message": "Server error"
                },
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "If any other error happens."
          }
        },
        "security": [
          {
            "httpAuth": []
          }
        ],
        "summary": "Retrieve or search milestones",
        "tags": [
          "CRUD",
          "Milestones"
        ]
      }
    },
    "/api/workspaces/{workspaceId}/milestones/{milestoneId}": {
      "delete": {
        "description": "Returns empty result if the milestone was successfully deleted.<br/>Requirements:<br/>- auth-client scopes: \"workspace\"<br/>- user permission: \"write\" or higher",
        "operationId": "deleteMilestone",
        "parameters": [
          {
            "deprecated": true,
            "description": "Enable sudo-mode for admins for a single request, which gives full permission to all workspaces in the team.",
            "in": "query",
            "name": "actAsAdmin",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "description": "ID of the workspace which contains the managed milestones.",
            "in": "path",
            "name": "workspaceId",
            "required": true,
            "schema": {
              "format": "uuid",
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "milestoneId",
            "required": true,
            "schema": {
              "format": "uuid",
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": ""
          },
          "400": {
            "content": {
              "application/json": {
                "example": {
                  "code": "not_found",
                  "data": {},
                  "message": "Unknown entity 'fe4c0f30-aa35-3c41-99f9-a5f69c8c4192'"
                },
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "If path parameters are invalid or resource does not exist."
          },
          "401": {
            "content": {
              "application/json": {
                "example": {
                  "code": "missing_token",
                  "data": {},
                  "message": "Access token is missing"
                },
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "If missing authentication token."
          },
          "403": {
            "content": {
              "application/json": {
                "example": {
                  "code": "forbidden",
                  "data": {},
                  "message": "Insufficient permission"
                },
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "If user does not have the required permission, or authenticated client does not have the required access scopes."
          },
          "default": {
            "content": {
              "application/json": {
                "example": {
                  "code": "unknown_error",
                  "data": {},
                  "message": "Server error"
                },
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "If any other error happens."
          }
        },
        "security": [
          {
            "httpAuth": []
          }
        ],
        "summary": "Delete an existing milestone",
        "tags": [
          "CRUD",
          "Milestones"
        ]
      },
      "get": {
        "description": "Returns found milestone.<br/>Requirements:<br/>- auth-client scopes: \"workspace:read\"<br/>- user permission: \"read\" or higher",
        "operationId": "retrieveMilestone",
        "parameters": [
          {
            "deprecated": true,
            "description": "Enable sudo-mode for admins for a single request, which gives full permission to all workspaces in the team.",
            "in": "query",
            "name": "actAsAdmin",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "description": "ID of the workspace which contains the managed milestones.",
            "in": "path",
            "name": "workspaceId",
            "required": true,
            "schema": {
              "format": "uuid",
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "milestoneId",
            "required": true,
            "schema": {
              "format": "uuid",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MilestoneWithEmbed"
                }
              }
            },
            "description": ""
          },
          "400": {
            "content": {
              "application/json": {
                "example": {
                  "code": "not_found",
                  "data": {},
                  "message": "Unknown entity 'fe4c0f30-aa35-3c41-99f9-a5f69c8c4192'"
                },
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "If path parameters are invalid or payload is invalid or resource does not exist."
          },
          "401": {
            "content": {
              "application/json": {
                "example": {
                  "code": "missing_token",
                  "data": {},
                  "message": "Access token is missing"
                },
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "If missing authentication token."
          },
          "403": {
            "content": {
              "application/json": {
                "example": {
                  "code": "forbidden",
                  "data": {},
                  "message": "Insufficient permission"
                },
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "If user does not have the required permission, or authenticated client does not have the required access scopes."
          },
          "default": {
            "content": {
              "application/json": {
                "example": {
                  "code": "unknown_error",
                  "data": {},
                  "message": "Server error"
                },
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "If any other error happens."
          }
        },
        "security": [
          {
            "httpAuth": []
          }
        ],
        "summary": "Retrieve a single milestone by its ID",
        "tags": [
          "CRUD",
          "Milestones"
        ]
      },
      "patch": {
        "description": "Returns the whole updated milestone with its sanitised data.<br/>Requirements:<br/>- auth-client scopes: \"workspace\"<br/>- user permission: \"write\" or higher",
        "operationId": "patchMilestone",
        "parameters": [
          {
            "deprecated": true,
            "description": "Enable sudo-mode for admins for a single request, which gives full permission to all workspaces in the team.",
            "in": "query",
            "name": "actAsAdmin",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "description": "ID of the workspace which contains the managed milestones.",
            "in": "path",
            "name": "workspaceId",
            "required": true,
            "schema": {
              "format": "uuid",
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "milestoneId",
            "required": true,
            "schema": {
              "format": "uuid",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/JsonPatch"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MilestoneWithEmbed"
                }
              }
            },
            "description": ""
          },
          "400": {
            "content": {
              "application/json": {
                "example": {
                  "code": "not_found",
                  "data": {},
                  "message": "Unknown entity 'fe4c0f30-aa35-3c41-99f9-a5f69c8c4192'"
                },
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "If path parameters are invalid or payload is invalid or resource does not exist."
          },
          "401": {
            "content": {
              "application/json": {
                "example": {
                  "code": "missing_token",
                  "data": {},
                  "message": "Access token is missing"
                },
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "If missing authentication token."
          },
          "403": {
            "content": {
              "application/json": {
                "example": {
                  "code": "forbidden",
                  "data": {},
                  "message": "Insufficient permission"
                },
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "If user does not have the required permission, or authenticated client does not have the required access scopes."
          },
          "default": {
            "content": {
              "application/json": {
                "example": {
                  "code": "unknown_error",
                  "data": {},
                  "message": "Server error"
                },
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "If any other error happens."
          }
        },
        "security": [
          {
            "httpAuth": []
          }
        ],
        "summary": "Patch an existing milestone",
        "tags": [
          "CRUD",
          "Milestones"
        ]
      },
      "put": {
        "description": "Returns updated milestone with its sanitised data.<br/>Requirements:<br/>- auth-client scopes: \"workspace\"<br/>- user permission: \"write\" or higher",
        "operationId": "updateMilestone",
        "parameters": [
          {
            "deprecated": true,
            "description": "Enable sudo-mode for admins for a single request, which gives full permission to all workspaces in the team.",
            "in": "query",
            "name": "actAsAdmin",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "description": "ID of the workspace which contains the managed milestones.",
            "in": "path",
            "name": "workspaceId",
            "required": true,
            "schema": {
              "format": "uuid",
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "milestoneId",
            "required": true,
            "schema": {
              "format": "uuid",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateMilestoneRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MilestoneWithEmbed"
                }
              }
            },
            "description": ""
          },
          "400": {
            "content": {
              "application/json": {
                "example": {
                  "code": "not_found",
                  "data": {},
                  "message": "Unknown entity 'fe4c0f30-aa35-3c41-99f9-a5f69c8c4192'"
                },
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "If path parameters are invalid or payload is invalid or resource does not exist."
          },
          "401": {
            "content": {
              "application/json": {
                "example": {
                  "code": "missing_token",
                  "data": {},
                  "message": "Access token is missing"
                },
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "If missing authentication token."
          },
          "403": {
            "content": {
              "application/json": {
                "example": {
                  "code": "forbidden",
                  "data": {},
                  "message": "Insufficient permission"
                },
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "If user does not have the required permission, or authenticated client does not have the required access scopes."
          },
          "default": {
            "content": {
              "application/json": {
                "example": {
                  "code": "unknown_error",
                  "data": {},
                  "message": "Server error"
                },
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "If any other error happens."
          }
        },
        "security": [
          {
            "httpAuth": []
          }
        ],
        "summary": "Update an existing milestone",
        "tags": [
          "CRUD",
          "Milestones"
        ]
      }
    },
    "/api/workspaces/{workspaceId}/permissions": {
      "post": {
        "description": "Returns effective permission for the current user.<br/>Requirements:<br/>- auth-client scopes: \"workspace\"<br/>- user permission: \"write\" or higher",
        "operationId": "updateWorkspacePermissions",
        "parameters": [
          {
            "deprecated": true,
            "description": "Enable sudo-mode for admins for a single request, which gives full permission to all workspaces in the team.",
            "in": "query",
            "name": "actAsAdmin",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "in": "path",
            "name": "workspaceId",
            "required": true,
            "schema": {
              "format": "uuid",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/WorkspacePermissionsUpdateRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Permission"
                }
              }
            },
            "description": ""
          },
          "400": {
            "content": {
              "application/json": {
                "example": {
                  "code": "not_found",
                  "data": {},
                  "message": "Unknown entity 'fe4c0f30-aa35-3c41-99f9-a5f69c8c4192'"
                },
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "If path parameters are invalid or payload is invalid or resource does not exist."
          },
          "401": {
            "content": {
              "application/json": {
                "example": {
                  "code": "missing_token",
                  "data": {},
                  "message": "Access token is missing"
                },
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "If missing authentication token."
          },
          "403": {
            "content": {
              "application/json": {
                "example": {
                  "code": "forbidden",
                  "data": {},
                  "message": "Insufficient permission"
                },
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "If user does not have the required permission, or authenticated client does not have the required access scopes."
          },
          "default": {
            "content": {
              "application/json": {
                "example": {
                  "code": "unknown_error",
                  "data": {},
                  "message": "Server error"
                },
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "If any other error happens."
          }
        },
        "security": [
          {
            "httpAuth": []
          }
        ],
        "summary": "Update workspace permissions.",
        "tags": [
          "Workspaces"
        ]
      }
    },
    "/api/workspaces/{workspaceId}/reconfigure-field": {
      "post": {
        "deprecated": true,
        "description": "Updates configuration properties of an existing field.<br/>Requirements:<br/>  - auth-client scopes: \"workspace\"<br/>  - user permission: \"full\"<br/>  - team features: \"team-fields\" when operating with team-fields<br/>  - user role: \"admin\" when operating with team-fields<br/>Returns:<br/>403 if user does not have the required permission",
        "operationId": "reconfigureFieldLegacyWithWorkspaceId",
        "parameters": [
          {
            "deprecated": true,
            "description": "Enable sudo-mode for admins for a single request, which gives full permission to all workspaces in the team.",
            "in": "query",
            "name": "actAsAdmin",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "description": "ID of the workspace which contains the managed fields.",
            "in": "path",
            "name": "workspaceId",
            "required": true,
            "schema": {
              "format": "uuid",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/FieldServerEndpointsReconfigureFieldRequestLegacy"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FieldWithFieldEmbed"
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "httpAuth": []
          }
        ],
        "summary": "Reconfigure field",
        "tags": [
          "Fields"
        ]
      }
    },
    "/api/workspaces/{workspaceId}/reorder-fields": {
      "post": {
        "deprecated": true,
        "description": "Updates the order of fields in the specified workspace.<br/>Requirements:<br/>  - auth-client scopes: \"workspace\"<br/>  - user permission: \"full\"<br/>  - team features: \"team-fields\" when operating with team-fields<br/>  - user role: \"admin\" when operating with team-fields<br/>Returns:<br/>403 if user does not have the required permission",
        "operationId": "reorderFieldsLegacy",
        "parameters": [
          {
            "deprecated": true,
            "description": "Enable sudo-mode for admins for a single request, which gives full permission to all workspaces in the team.",
            "in": "query",
            "name": "actAsAdmin",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "description": "ID of the workspace which contains the managed fields.",
            "in": "path",
            "name": "workspaceId",
            "required": true,
            "schema": {
              "format": "uuid",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "items": {
                  "format": "uuid",
                  "type": "string"
                },
                "type": "array"
              }
            }
          },
          "required": false
        },
        "responses": {
          "204": {
            "description": ""
          }
        },
        "security": [
          {
            "httpAuth": []
          }
        ],
        "summary": "Reorder fields",
        "tags": [
          "Fields"
        ]
      }
    },
    "/api/workspaces/{workspaceId}/statuses": {
      "post": {
        "description": "Sets statuses (all at once) for the specified workspace.\nNew statuses in the list will be added to the database, missing statuses will be removed from the database, all other statuses will be updated.\nEach workspace must have at least one status in each category: 'draft', 'active', 'closed'<br/>Requirements:<br/>- auth-client scopes: \"workspace\"<br/>- user permission: \"write\" or higher",
        "operationId": "setWorkspaceStatuses",
        "parameters": [
          {
            "deprecated": true,
            "description": "Enable sudo-mode for admins for a single request, which gives full permission to all workspaces in the team.",
            "in": "query",
            "name": "actAsAdmin",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "in": "path",
            "name": "workspaceId",
            "required": true,
            "schema": {
              "format": "uuid",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SetWorkspaceStatusesRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": ""
          },
          "400": {
            "content": {
              "application/json": {
                "example": {
                  "code": "not_found",
                  "data": {},
                  "message": "Unknown entity 'fe4c0f30-aa35-3c41-99f9-a5f69c8c4192'"
                },
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "If path parameters are invalid or payload is invalid or resource does not exist."
          },
          "401": {
            "content": {
              "application/json": {
                "example": {
                  "code": "missing_token",
                  "data": {},
                  "message": "Access token is missing"
                },
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "If missing authentication token."
          },
          "403": {
            "content": {
              "application/json": {
                "example": {
                  "code": "forbidden",
                  "data": {},
                  "message": "Insufficient permission"
                },
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "If user does not have the required permission, or authenticated client does not have the required access scopes."
          },
          "default": {
            "content": {
              "application/json": {
                "example": {
                  "code": "unknown_error",
                  "data": {},
                  "message": "Server error"
                },
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "If any other error happens."
          }
        },
        "security": [
          {
            "httpAuth": []
          }
        ],
        "summary": "Configure workspace statuses.",
        "tags": [
          "Workspaces"
        ]
      }
    },
    "/api/workspaces/{workspaceId}/uninstall-field": {
      "post": {
        "deprecated": true,
        "description": "Uninstalls a field from the specified workspace.\nFor team-fields it results in just removing the field<>workspace connection, but the field itself won't be removed.\nFor non-team-fields it additionally results in removing the field.<br/>Requirements:<br/>  - auth-client scopes: \"workspace\"<br/>  - user permission: \"full\"<br/>  - team features: \"team-fields\" when operating with team-fields<br/>  - user role: \"admin\" when operating with team-fields<br/>Returns:<br/>403 if user does not have the required permission",
        "operationId": "uninstallFieldLegacy",
        "parameters": [
          {
            "deprecated": true,
            "description": "Enable sudo-mode for admins for a single request, which gives full permission to all workspaces in the team.",
            "in": "query",
            "name": "actAsAdmin",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "description": "ID of the workspace which contains the managed fields.",
            "in": "path",
            "name": "workspaceId",
            "required": true,
            "schema": {
              "format": "uuid",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/FieldServerEndpointsUninstallFieldRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": ""
          }
        },
        "security": [
          {
            "httpAuth": []
          }
        ],
        "summary": "Delete field",
        "tags": [
          "Fields"
        ]
      }
    }
  },
  "servers": [
    {
      "url": "https://app.airfocus.com"
    },
    {
      "url": "https://app.us.airfocus.com"
    }
  ],
  "tags": [
    {
      "description": "Manage comments on items.",
      "name": "Comments"
    },
    {
      "description": "Endpoints for managing workspace fields.",
      "name": "Fields"
    },
    {
      "description": "Endpoints for global searching",
      "name": "Global search"
    },
    {
      "description": "Connect items with uploaded attachment-files. Note: this module is not responsible for uploading files, it only manages the links between items and files.",
      "name": "ItemAttachments"
    },
    {
      "description": "Endpoints for managing items.",
      "name": "Items"
    },
    {
      "description": "Endpoints for linking/unlinking items.",
      "name": "Items:Links"
    },
    {
      "description": "Endpoints for managing hierarchical relations between items.",
      "name": "Items:Relations"
    },
    {
      "description": "Manage milestones in a single workspace. Milestones are time-anchors which are displayed in the Timeline and Gantt views.",
      "name": "Milestones"
    },
    {
      "description": "Endpoints for managing the user profile",
      "name": "Profile"
    },
    {
      "description": "Endpoints for managing the team and users",
      "name": "Team"
    },
    {
      "description": "Endpoints for creating workspaces via templates.",
      "name": "Templates"
    },
    {
      "description": "Manage workspace groups.",
      "name": "WorkspaceGroups"
    },
    {
      "description": "Manage workspace relations (hierarchy).",
      "name": "WorkspaceRelations"
    },
    {
      "description": "Endpoints for managing workspaces.",
      "name": "Workspaces"
    }
  ]
}
