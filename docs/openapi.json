{
  "components": {
    "schemas": {
      "App": {
        "properties": {
          "id": {
            "format": "uuid",
            "type": "string"
          },
          "settings": {},
          "teamId": {
            "format": "uuid",
            "type": "string"
          },
          "typeId": {
            "type": "string"
          }
        },
        "required": [
          "id",
          "teamId",
          "typeId",
          "settings"
        ],
        "title": "App",
        "type": "object"
      },
      "AttachmentSearchQuery": {
        "properties": {
          "itemId": {
            "format": "uuid",
            "type": [
              "string",
              "null"
            ]
          }
        },
        "title": "AttachmentSearchQuery",
        "type": "object"
      },
      "BooleanFieldWithFieldEmbed": {
        "properties": {
          "_embedded": {
            "$ref": "#/components/schemas/FieldEmbed"
          },
          "createdAt": {
            "format": "date-time",
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "id": {
            "format": "uuid",
            "type": "string"
          },
          "isTeamField": {
            "type": "boolean"
          },
          "name": {
            "type": "string"
          },
          "teamId": {
            "format": "uuid",
            "type": "string"
          },
          "typeId": {
            "type": "string"
          }
        },
        "required": [
          "id",
          "typeId",
          "name",
          "description",
          "isTeamField",
          "teamId",
          "createdAt",
          "_embedded"
        ],
        "title": "BooleanFieldWithFieldEmbed",
        "type": "object"
      },
      "Comment": {
        "properties": {
          "content": {
            "$ref": "#/components/schemas/RichText"
          },
          "createdAt": {
            "format": "date-time",
            "type": "string"
          },
          "id": {
            "format": "uuid",
            "type": "string"
          },
          "itemId": {
            "format": "uuid",
            "type": "string"
          },
          "lastUpdatedAt": {
            "format": "date-time",
            "type": "string"
          },
          "reactions": {
            "items": {
              "$ref": "#/components/schemas/CommentReaction"
            },
            "type": "array"
          },
          "userId": {
            "format": "uuid",
            "type": "string"
          }
        },
        "required": [
          "id",
          "itemId",
          "userId",
          "content",
          "createdAt",
          "lastUpdatedAt"
        ],
        "title": "Comment",
        "type": "object"
      },
      "CommentBulkAction": {
        "discriminator": {
          "mapping": {
            "create": "#/components/schemas/CommentBulkCreate",
            "delete": "#/components/schemas/CommentBulkDelete",
            "patch": "#/components/schemas/CommentBulkPatch",
            "update": "#/components/schemas/CommentBulkUpdate"
          },
          "propertyName": "type"
        },
        "oneOf": [
          {
            "$ref": "#/components/schemas/CommentBulkCreate"
          },
          {
            "$ref": "#/components/schemas/CommentBulkDelete"
          },
          {
            "$ref": "#/components/schemas/CommentBulkPatch"
          },
          {
            "$ref": "#/components/schemas/CommentBulkUpdate"
          }
        ],
        "title": "CommentBulkAction"
      },
      "CommentBulkCreate": {
        "properties": {
          "resource": {
            "$ref": "#/components/schemas/Comment"
          },
          "type": {
            "enum": [
              "create"
            ],
            "type": "string"
          }
        },
        "required": [
          "resource",
          "type"
        ],
        "title": "CommentBulkCreate",
        "type": "object"
      },
      "CommentBulkDelete": {
        "properties": {
          "id": {
            "format": "uuid",
            "type": "string"
          },
          "type": {
            "enum": [
              "delete"
            ],
            "type": "string"
          }
        },
        "required": [
          "id",
          "type"
        ],
        "title": "CommentBulkDelete",
        "type": "object"
      },
      "CommentBulkPatch": {
        "properties": {
          "id": {
            "format": "uuid",
            "type": "string"
          },
          "transform": {
            "$ref": "#/components/schemas/JsonPatch"
          },
          "type": {
            "enum": [
              "patch"
            ],
            "type": "string"
          }
        },
        "required": [
          "id",
          "transform",
          "type"
        ],
        "title": "CommentBulkPatch",
        "type": "object"
      },
      "CommentBulkUpdate": {
        "properties": {
          "id": {
            "format": "uuid",
            "type": "string"
          },
          "resource": {
            "$ref": "#/components/schemas/Comment"
          },
          "type": {
            "enum": [
              "update"
            ],
            "type": "string"
          }
        },
        "required": [
          "id",
          "resource",
          "type"
        ],
        "title": "CommentBulkUpdate",
        "type": "object"
      },
      "CommentReaction": {
        "properties": {
          "emoji": {
            "$ref": "#/components/schemas/CommentReactionEmoji"
          },
          "userIds": {
            "items": {
              "format": "uuid",
              "type": "string"
            },
            "type": "array"
          }
        },
        "required": [
          "emoji"
        ],
        "title": "CommentReaction",
        "type": "object"
      },
      "CommentReactionEmoji": {
        "enum": [
          "blue_heart",
          "clap",
          "confused",
          "eyes",
          "+1",
          "rocket",
          "thinking_face",
          "white_check_mark"
        ],
        "title": "CommentReactionEmoji",
        "type": "string"
      },
      "CommentSearchQuery": {
        "properties": {
          "itemId": {
            "format": "uuid",
            "type": [
              "string",
              "null"
            ]
          }
        },
        "title": "CommentSearchQuery",
        "type": "object"
      },
      "CommentWithEmbed": {
        "properties": {
          "_embedded": {
            "type": "object"
          },
          "content": {
            "$ref": "#/components/schemas/RichText"
          },
          "createdAt": {
            "format": "date-time",
            "type": "string"
          },
          "id": {
            "format": "uuid",
            "type": "string"
          },
          "itemId": {
            "format": "uuid",
            "type": "string"
          },
          "lastUpdatedAt": {
            "format": "date-time",
            "type": "string"
          },
          "reactions": {
            "items": {
              "$ref": "#/components/schemas/CommentReaction"
            },
            "type": "array"
          },
          "userId": {
            "format": "uuid",
            "type": "string"
          }
        },
        "required": [
          "id",
          "itemId",
          "userId",
          "content",
          "createdAt",
          "lastUpdatedAt",
          "_embedded"
        ],
        "title": "CommentWithEmbed",
        "type": "object"
      },
      "CommentWithEmbedOrNullList": {
        "items": {
          "anyOf": [
            {
              "$ref": "#/components/schemas/CommentWithEmbed"
            },
            {
              "type": "null"
            }
          ]
        },
        "title": "CommentWithEmbedOrNullList",
        "type": "array"
      },
      "CommentWithEmbedPage": {
        "properties": {
          "items": {
            "items": {
              "$ref": "#/components/schemas/CommentWithEmbed"
            },
            "type": "array"
          },
          "totalItems": {
            "format": "int32",
            "type": "integer"
          }
        },
        "required": [
          "totalItems"
        ],
        "title": "CommentWithEmbedPage",
        "type": "object"
      },
      "CreateStatus": {
        "properties": {
          "category": {
            "$ref": "#/components/schemas/StatusCategory"
          },
          "color": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/StatusColor"
              },
              {
                "type": "null"
              }
            ]
          },
          "default": {
            "description": "Whether this status should be applied by default to newly created items. There can be only one default status in each workspace.",
            "type": "boolean"
          },
          "name": {
            "description": "Name of this status in UI.",
            "type": "string"
          },
          "order": {
            "description": "Order of this status comparing to other statuses in the same workspace.",
            "format": "int32",
            "type": "integer"
          }
        },
        "required": [
          "id",
          "workspaceId",
          "category",
          "name",
          "default",
          "order"
        ],
        "title": "CreateStatus",
        "type": "object"
      },
      "DateFieldWithFieldEmbed": {
        "properties": {
          "_embedded": {
            "$ref": "#/components/schemas/FieldEmbed"
          },
          "createdAt": {
            "format": "date-time",
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "id": {
            "format": "uuid",
            "type": "string"
          },
          "isTeamField": {
            "type": "boolean"
          },
          "name": {
            "type": "string"
          },
          "teamId": {
            "format": "uuid",
            "type": "string"
          },
          "typeId": {
            "type": "string"
          }
        },
        "required": [
          "id",
          "typeId",
          "name",
          "description",
          "isTeamField",
          "teamId",
          "createdAt",
          "_embedded"
        ],
        "title": "DateFieldWithFieldEmbed",
        "type": "object"
      },
      "DateRangeFieldWithFieldEmbed": {
        "properties": {
          "_embedded": {
            "$ref": "#/components/schemas/FieldEmbed"
          },
          "createdAt": {
            "format": "date-time",
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "id": {
            "format": "uuid",
            "type": "string"
          },
          "isTeamField": {
            "type": "boolean"
          },
          "name": {
            "type": "string"
          },
          "teamId": {
            "format": "uuid",
            "type": "string"
          },
          "typeId": {
            "type": "string"
          }
        },
        "required": [
          "id",
          "typeId",
          "name",
          "description",
          "isTeamField",
          "teamId",
          "createdAt",
          "_embedded"
        ],
        "title": "DateRangeFieldWithFieldEmbed",
        "type": "object"
      },
      "ErrorResponse": {
        "description": "A general error response which is returned by the server for all handled errors.",
        "properties": {
          "code": {
            "description": "Machine readable code",
            "examples": [
              "not_found"
            ],
            "type": "string"
          },
          "data": {
            "$ref": "#/components/schemas/JsObject",
            "description": "Additional informational data about the error"
          },
          "message": {
            "description": "Error messages",
            "examples": [
              "Entity not found"
            ],
            "type": "string"
          }
        },
        "required": [
          "code",
          "message",
          "data"
        ],
        "title": "ErrorResponse",
        "type": "object"
      },
      "FieldEmbed": {
        "properties": {
          "workspaces": {
            "description": "List of all workspaces where this field is used.",
            "items": {
              "$ref": "#/components/schemas/FieldFieldWorkspaceEmbed"
            },
            "type": "array"
          }
        },
        "title": "FieldEmbed",
        "type": "object"
      },
      "FieldEndpointsFieldToWorkspaceLink": {
        "properties": {
          "fieldId": {
            "format": "uuid",
            "type": "string"
          },
          "workspaceId": {
            "format": "uuid",
            "type": "string"
          }
        },
        "required": [
          "fieldId",
          "workspaceId"
        ],
        "title": "FieldEndpointsFieldToWorkspaceLink",
        "type": "object"
      },
      "FieldEndpointsFieldTypeInfo": {
        "properties": {
          "typeId": {
            "type": "string"
          }
        },
        "required": [
          "typeId"
        ],
        "title": "FieldEndpointsFieldTypeInfo",
        "type": "object"
      },
      "FieldEndpointsInstallFieldRequest": {
        "discriminator": {
          "mapping": {
            "boolean": "#/components/schemas/InstallBooleanFieldRequest",
            "date": "#/components/schemas/InstallDateFieldRequest",
            "date-range": "#/components/schemas/InstallDateRangeFieldRequest",
            "number": "#/components/schemas/InstallNumberFieldRequest",
            "people": "#/components/schemas/InstallPeopleFieldRequest",
            "select": "#/components/schemas/InstallSelectFieldRequest",
            "text": "#/components/schemas/InstallTextFieldRequest"
          },
          "propertyName": "typeId"
        },
        "oneOf": [
          {
            "$ref": "#/components/schemas/InstallBooleanFieldRequest"
          },
          {
            "$ref": "#/components/schemas/InstallDateFieldRequest"
          },
          {
            "$ref": "#/components/schemas/InstallDateRangeFieldRequest"
          },
          {
            "$ref": "#/components/schemas/InstallNumberFieldRequest"
          },
          {
            "$ref": "#/components/schemas/InstallPeopleFieldRequest"
          },
          {
            "$ref": "#/components/schemas/InstallSelectFieldRequest"
          },
          {
            "$ref": "#/components/schemas/InstallTextFieldRequest"
          }
        ],
        "title": "FieldEndpointsInstallFieldRequest"
      },
      "FieldEndpointsReconfigureFieldRequest": {
        "properties": {
          "description": {
            "type": "string"
          },
          "isTeamField": {
            "type": "boolean"
          },
          "name": {
            "type": "string"
          },
          "settings": {
            "description": "The settings object which corresponds to the type of the requested field, or it can be skipped if the requested field does not have any settings.\nThis schema shows all the available field-settings. See also the Field schema to learn about settings of each specific field type.",
            "oneOf": [
              {
                "$ref": "#/components/schemas/FormSourceFieldTypeSettings"
              },
              {
                "$ref": "#/components/schemas/InsightsFieldTypeSettings"
              },
              {
                "$ref": "#/components/schemas/NumberFieldTypeSettings"
              },
              {
                "$ref": "#/components/schemas/OkrConfidenceFieldSettings"
              },
              {
                "$ref": "#/components/schemas/OkrTimePeriodFieldSettings"
              },
              {
                "$ref": "#/components/schemas/PeopleFieldTypeSettings"
              },
              {
                "$ref": "#/components/schemas/SelectFieldTypeSettings"
              },
              {
                "$ref": "#/components/schemas/VotingAppScoreFieldTypeSettings"
              }
            ]
          }
        },
        "required": [
          "name",
          "description",
          "isTeamField"
        ],
        "title": "FieldEndpointsReconfigureFieldRequest",
        "type": "object"
      },
      "FieldEndpointsReorderFieldsRequest": {
        "properties": {
          "fieldIds": {
            "items": {
              "format": "uuid",
              "type": "string"
            },
            "type": "array"
          },
          "workspaceId": {
            "format": "uuid",
            "type": "string"
          }
        },
        "required": [
          "workspaceId"
        ],
        "title": "FieldEndpointsReorderFieldsRequest",
        "type": "object"
      },
      "FieldFieldWorkspaceEmbed": {
        "properties": {
          "order": {
            "description": "Order of the field in this specific workspace.",
            "examples": [
              42
            ],
            "format": "int32",
            "type": "integer"
          },
          "workspaceId": {
            "format": "uuid",
            "type": "string"
          }
        },
        "required": [
          "workspaceId",
          "order"
        ],
        "title": "FieldFieldWorkspaceEmbed",
        "type": "object"
      },
      "FieldSearchQuery": {
        "properties": {
          "isTeamField": {
            "description": "Return only fields with the specified isTeamField value.",
            "type": [
              "boolean",
              "null"
            ]
          },
          "workspaceIds": {
            "description": "Return only fields which are installed in the specified workspaces.",
            "items": {
              "format": "uuid",
              "type": "string"
            },
            "type": [
              "array",
              "null"
            ],
            "uniqueItems": true
          }
        },
        "title": "FieldSearchQuery",
        "type": "object"
      },
      "FieldWithFieldEmbed": {
        "discriminator": {
          "mapping": {
            "boolean": "#/components/schemas/BooleanFieldWithFieldEmbed",
            "date": "#/components/schemas/DateFieldWithFieldEmbed",
            "date-range": "#/components/schemas/DateRangeFieldWithFieldEmbed",
            "form-source": "#/components/schemas/FormSourceFieldWithFieldEmbed",
            "form-target": "#/components/schemas/FormTargetFieldWithFieldEmbed",
            "insights": "#/components/schemas/InsightsFieldWithFieldEmbed",
            "mirror-source": "#/components/schemas/MirrorSourceFieldWithFieldEmbed",
            "mirror-target": "#/components/schemas/MirrorTargetFieldWithFieldEmbed",
            "number": "#/components/schemas/NumberFieldWithFieldEmbed",
            "okr-checkins": "#/components/schemas/OkrCheckinsFieldWithFieldEmbed",
            "okr-confidence": "#/components/schemas/OkrConfidenceFieldWithFieldEmbed",
            "okr-key-result-reference": "#/components/schemas/OkrKeyResultReferenceFieldWithFieldEmbed",
            "okr-key-results": "#/components/schemas/OkrKeyResultsFieldWithFieldEmbed",
            "okr-progress": "#/components/schemas/OkrProgressFieldWithFieldEmbed",
            "okr-time-period": "#/components/schemas/OkrTimePeriodFieldWithFieldEmbed",
            "people": "#/components/schemas/PeopleFieldWithFieldEmbed",
            "portal": "#/components/schemas/PortalFieldWithFieldEmbed",
            "prioritization": "#/components/schemas/PrioritizationFieldWithFieldEmbed",
            "select": "#/components/schemas/SelectFieldWithFieldEmbed",
            "text": "#/components/schemas/TextFieldWithFieldEmbed",
            "votes": "#/components/schemas/VotesFieldWithFieldEmbed",
            "votingScore": "#/components/schemas/VotingScoreFieldWithFieldEmbed"
          },
          "propertyName": "typeId"
        },
        "oneOf": [
          {
            "$ref": "#/components/schemas/BooleanFieldWithFieldEmbed"
          },
          {
            "$ref": "#/components/schemas/DateFieldWithFieldEmbed"
          },
          {
            "$ref": "#/components/schemas/DateRangeFieldWithFieldEmbed"
          },
          {
            "$ref": "#/components/schemas/FormSourceFieldWithFieldEmbed"
          },
          {
            "$ref": "#/components/schemas/FormTargetFieldWithFieldEmbed"
          },
          {
            "$ref": "#/components/schemas/InsightsFieldWithFieldEmbed"
          },
          {
            "$ref": "#/components/schemas/MirrorSourceFieldWithFieldEmbed"
          },
          {
            "$ref": "#/components/schemas/MirrorTargetFieldWithFieldEmbed"
          },
          {
            "$ref": "#/components/schemas/NumberFieldWithFieldEmbed"
          },
          {
            "$ref": "#/components/schemas/OkrCheckinsFieldWithFieldEmbed"
          },
          {
            "$ref": "#/components/schemas/OkrConfidenceFieldWithFieldEmbed"
          },
          {
            "$ref": "#/components/schemas/OkrKeyResultReferenceFieldWithFieldEmbed"
          },
          {
            "$ref": "#/components/schemas/OkrKeyResultsFieldWithFieldEmbed"
          },
          {
            "$ref": "#/components/schemas/OkrProgressFieldWithFieldEmbed"
          },
          {
            "$ref": "#/components/schemas/OkrTimePeriodFieldWithFieldEmbed"
          },
          {
            "$ref": "#/components/schemas/PeopleFieldWithFieldEmbed"
          },
          {
            "$ref": "#/components/schemas/PortalFieldWithFieldEmbed"
          },
          {
            "$ref": "#/components/schemas/PrioritizationFieldWithFieldEmbed"
          },
          {
            "$ref": "#/components/schemas/SelectFieldWithFieldEmbed"
          },
          {
            "$ref": "#/components/schemas/TextFieldWithFieldEmbed"
          },
          {
            "$ref": "#/components/schemas/VotesFieldWithFieldEmbed"
          },
          {
            "$ref": "#/components/schemas/VotingScoreFieldWithFieldEmbed"
          }
        ],
        "title": "FieldWithFieldEmbed"
      },
      "FieldWithFieldEmbedPage": {
        "properties": {
          "items": {
            "items": {
              "$ref": "#/components/schemas/FieldWithFieldEmbed"
            },
            "type": "array"
          },
          "totalItems": {
            "format": "int32",
            "type": "integer"
          }
        },
        "required": [
          "totalItems"
        ],
        "title": "FieldWithFieldEmbedPage",
        "type": "object"
      },
      "FormSourceFieldTypeSettings": {
        "properties": {
          "maximum": {
            "format": "int32",
            "type": [
              "integer",
              "null"
            ]
          }
        },
        "title": "FormSourceFieldTypeSettings",
        "type": "object"
      },
      "FormSourceFieldWithFieldEmbed": {
        "properties": {
          "_embedded": {
            "$ref": "#/components/schemas/FieldEmbed"
          },
          "createdAt": {
            "format": "date-time",
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "id": {
            "format": "uuid",
            "type": "string"
          },
          "isTeamField": {
            "type": "boolean"
          },
          "name": {
            "type": "string"
          },
          "settings": {
            "$ref": "#/components/schemas/FormSourceFieldTypeSettings"
          },
          "teamId": {
            "format": "uuid",
            "type": "string"
          },
          "typeId": {
            "type": "string"
          }
        },
        "required": [
          "id",
          "typeId",
          "settings",
          "name",
          "description",
          "isTeamField",
          "teamId",
          "createdAt",
          "_embedded"
        ],
        "title": "FormSourceFieldWithFieldEmbed",
        "type": "object"
      },
      "FormTargetFieldWithFieldEmbed": {
        "properties": {
          "_embedded": {
            "$ref": "#/components/schemas/FieldEmbed"
          },
          "createdAt": {
            "format": "date-time",
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "id": {
            "format": "uuid",
            "type": "string"
          },
          "isTeamField": {
            "type": "boolean"
          },
          "name": {
            "type": "string"
          },
          "teamId": {
            "format": "uuid",
            "type": "string"
          },
          "typeId": {
            "type": "string"
          }
        },
        "required": [
          "id",
          "typeId",
          "name",
          "description",
          "isTeamField",
          "teamId",
          "createdAt",
          "_embedded"
        ],
        "title": "FormTargetFieldWithFieldEmbed",
        "type": "object"
      },
      "InsightsFieldTypeSettings": {
        "properties": {
          "maximum": {
            "format": "int32",
            "type": [
              "integer",
              "null"
            ]
          }
        },
        "title": "InsightsFieldTypeSettings",
        "type": "object"
      },
      "InsightsFieldWithFieldEmbed": {
        "properties": {
          "_embedded": {
            "$ref": "#/components/schemas/FieldEmbed"
          },
          "createdAt": {
            "format": "date-time",
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "id": {
            "format": "uuid",
            "type": "string"
          },
          "isTeamField": {
            "type": "boolean"
          },
          "name": {
            "type": "string"
          },
          "settings": {
            "$ref": "#/components/schemas/InsightsFieldTypeSettings"
          },
          "teamId": {
            "format": "uuid",
            "type": "string"
          },
          "typeId": {
            "type": "string"
          }
        },
        "required": [
          "id",
          "typeId",
          "settings",
          "name",
          "description",
          "isTeamField",
          "teamId",
          "createdAt",
          "_embedded"
        ],
        "title": "InsightsFieldWithFieldEmbed",
        "type": "object"
      },
      "InstallBooleanFieldRequest": {
        "properties": {
          "description": {
            "default": "",
            "description": "User-readable field description.",
            "type": "string"
          },
          "isTeamField": {
            "default": false,
            "description": "Whether the field should be installed as a team-field or a workspace-specific field.",
            "type": "boolean"
          },
          "name": {
            "description": "User-readable field name.",
            "type": "string"
          },
          "typeId": {
            "type": "string"
          },
          "workspaceIds": {
            "description": "If isTeamField=false then exactly one workspace ID should be provided.\nIf isTeamField=true then any amount of workspace IDs can be provided to be linked to the newly installed field.",
            "items": {
              "format": "uuid",
              "type": "string"
            },
            "type": "array"
          }
        },
        "required": [
          "typeId",
          "name"
        ],
        "title": "InstallBooleanFieldRequest",
        "type": "object"
      },
      "InstallDateFieldRequest": {
        "properties": {
          "description": {
            "default": "",
            "description": "User-readable field description.",
            "type": "string"
          },
          "isTeamField": {
            "default": false,
            "description": "Whether the field should be installed as a team-field or a workspace-specific field.",
            "type": "boolean"
          },
          "name": {
            "description": "User-readable field name.",
            "type": "string"
          },
          "typeId": {
            "type": "string"
          },
          "workspaceIds": {
            "description": "If isTeamField=false then exactly one workspace ID should be provided.\nIf isTeamField=true then any amount of workspace IDs can be provided to be linked to the newly installed field.",
            "items": {
              "format": "uuid",
              "type": "string"
            },
            "type": "array"
          }
        },
        "required": [
          "typeId",
          "name"
        ],
        "title": "InstallDateFieldRequest",
        "type": "object"
      },
      "InstallDateRangeFieldRequest": {
        "properties": {
          "description": {
            "default": "",
            "description": "User-readable field description.",
            "type": "string"
          },
          "isTeamField": {
            "default": false,
            "description": "Whether the field should be installed as a team-field or a workspace-specific field.",
            "type": "boolean"
          },
          "name": {
            "description": "User-readable field name.",
            "type": "string"
          },
          "typeId": {
            "type": "string"
          },
          "workspaceIds": {
            "description": "If isTeamField=false then exactly one workspace ID should be provided.\nIf isTeamField=true then any amount of workspace IDs can be provided to be linked to the newly installed field.",
            "items": {
              "format": "uuid",
              "type": "string"
            },
            "type": "array"
          }
        },
        "required": [
          "typeId",
          "name"
        ],
        "title": "InstallDateRangeFieldRequest",
        "type": "object"
      },
      "InstallNumberFieldRequest": {
        "properties": {
          "description": {
            "default": "",
            "description": "User-readable field description.",
            "type": "string"
          },
          "isTeamField": {
            "default": false,
            "description": "Whether the field should be installed as a team-field or a workspace-specific field.",
            "type": "boolean"
          },
          "name": {
            "description": "User-readable field name.",
            "type": "string"
          },
          "settings": {
            "$ref": "#/components/schemas/NumberFieldTypeSettings",
            "description": "Field settings."
          },
          "typeId": {
            "type": "string"
          },
          "workspaceIds": {
            "description": "If isTeamField=false then exactly one workspace ID should be provided.\nIf isTeamField=true then any amount of workspace IDs can be provided to be linked to the newly installed field.",
            "items": {
              "format": "uuid",
              "type": "string"
            },
            "type": "array"
          }
        },
        "required": [
          "typeId",
          "name",
          "settings"
        ],
        "title": "InstallNumberFieldRequest",
        "type": "object"
      },
      "InstallPeopleFieldRequest": {
        "properties": {
          "description": {
            "default": "",
            "description": "User-readable field description.",
            "type": "string"
          },
          "isTeamField": {
            "default": false,
            "description": "Whether the field should be installed as a team-field or a workspace-specific field.",
            "type": "boolean"
          },
          "name": {
            "description": "User-readable field name.",
            "type": "string"
          },
          "settings": {
            "$ref": "#/components/schemas/PeopleFieldTypeSettings",
            "description": "Field settings."
          },
          "typeId": {
            "type": "string"
          },
          "workspaceIds": {
            "description": "If isTeamField=false then exactly one workspace ID should be provided.\nIf isTeamField=true then any amount of workspace IDs can be provided to be linked to the newly installed field.",
            "items": {
              "format": "uuid",
              "type": "string"
            },
            "type": "array"
          }
        },
        "required": [
          "typeId",
          "name",
          "settings"
        ],
        "title": "InstallPeopleFieldRequest",
        "type": "object"
      },
      "InstallSelectFieldRequest": {
        "properties": {
          "description": {
            "default": "",
            "description": "User-readable field description.",
            "type": "string"
          },
          "isTeamField": {
            "default": false,
            "description": "Whether the field should be installed as a team-field or a workspace-specific field.",
            "type": "boolean"
          },
          "name": {
            "description": "User-readable field name.",
            "type": "string"
          },
          "settings": {
            "$ref": "#/components/schemas/SelectFieldTypeSettings",
            "description": "Field settings."
          },
          "typeId": {
            "type": "string"
          },
          "workspaceIds": {
            "description": "If isTeamField=false then exactly one workspace ID should be provided.\nIf isTeamField=true then any amount of workspace IDs can be provided to be linked to the newly installed field.",
            "items": {
              "format": "uuid",
              "type": "string"
            },
            "type": "array"
          }
        },
        "required": [
          "typeId",
          "name",
          "settings"
        ],
        "title": "InstallSelectFieldRequest",
        "type": "object"
      },
      "InstallTextFieldRequest": {
        "properties": {
          "description": {
            "default": "",
            "description": "User-readable field description.",
            "type": "string"
          },
          "isTeamField": {
            "default": false,
            "description": "Whether the field should be installed as a team-field or a workspace-specific field.",
            "type": "boolean"
          },
          "name": {
            "description": "User-readable field name.",
            "type": "string"
          },
          "typeId": {
            "type": "string"
          },
          "workspaceIds": {
            "description": "If isTeamField=false then exactly one workspace ID should be provided.\nIf isTeamField=true then any amount of workspace IDs can be provided to be linked to the newly installed field.",
            "items": {
              "format": "uuid",
              "type": "string"
            },
            "type": "array"
          }
        },
        "required": [
          "typeId",
          "name"
        ],
        "title": "InstallTextFieldRequest",
        "type": "object"
      },
      "IntegrationCapabilities": {
        "properties": {
          "debug": {
            "type": "boolean"
          },
          "hierarchy": {
            "type": "boolean"
          },
          "push": {
            "type": "boolean"
          },
          "sync": {
            "type": "boolean"
          }
        },
        "required": [
          "sync",
          "push",
          "hierarchy",
          "debug"
        ],
        "title": "IntegrationCapabilities",
        "type": "object"
      },
      "IntegrationSummary": {
        "properties": {
          "capabilities": {
            "$ref": "#/components/schemas/IntegrationCapabilities"
          },
          "createdAt": {
            "format": "date-time",
            "type": "string"
          },
          "id": {
            "format": "uuid",
            "type": "string"
          },
          "lastSyncAt": {
            "format": "date-time",
            "type": [
              "string",
              "null"
            ]
          },
          "lastSyncState": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/IntegrationSyncState"
              },
              {
                "type": "null"
              }
            ]
          },
          "settings": {},
          "typeId": {
            "type": "string"
          }
        },
        "required": [
          "id",
          "typeId",
          "settings",
          "createdAt",
          "capabilities"
        ],
        "title": "IntegrationSummary",
        "type": "object"
      },
      "IntegrationSyncState": {
        "properties": {
          "errorCount": {
            "format": "int32",
            "type": "integer"
          },
          "successCount": {
            "format": "int32",
            "type": "integer"
          }
        },
        "required": [
          "successCount",
          "errorCount"
        ],
        "title": "IntegrationSyncState",
        "type": "object"
      },
      "Item": {
        "properties": {
          "archived": {
            "type": "boolean"
          },
          "assigneeUserIds": {
            "items": {
              "format": "uuid",
              "type": "string"
            },
            "type": "array"
          },
          "color": {
            "$ref": "#/components/schemas/ItemColor"
          },
          "createdAt": {
            "format": "date-time",
            "type": "string"
          },
          "description": {
            "$ref": "#/components/schemas/RichText"
          },
          "fields": {
            "additionalProperties": {},
            "description": "Values of custom fields, where each key is a custom-field ID and each value is a JSON-formatted value of the corresponding field.",
            "examples": [
              {
                "0fc3cfbc-27e9-3ea6-8a78-7de13dae3e3c": {
                  "number": 42
                },
                "34f05b62-dd43-3e1e-82bc-b0acabd0d004": {
                  "boolean": true
                },
                "5396681e-ea50-3d63-9ae3-c9f8ca17b7d8": {
                  "userIds": [
                    "24c9e15e-52af-347c-a25b-757e7bee1f9d"
                  ]
                },
                "75fe57ec-4a04-3a30-8cac-5f27223df81a": {
                  "dateRange": {
                    "endDate": "2024-02-14",
                    "startDate": "2024-01-14",
                    "timezone": "UTC"
                  }
                },
                "8be74552-df93-331b-bdd6-b36ed74bdb6a": {
                  "selection": [
                    "2bb225ce-b5ee-3493-967c-fde0d72da242"
                  ]
                },
                "c7824f3d-4d5f-3b2f-a2d0-34758c1e9454": {
                  "text": "A platform built for the new way of doing product management"
                },
                "e34d514f-7db5-38aa-872a-7c8191a09617": {
                  "date": {
                    "date": "2024-01-01",
                    "timezone": "UTC"
                  }
                }
              }
            ],
            "type": "object"
          },
          "id": {
            "format": "uuid",
            "type": "string"
          },
          "lastUpdatedAt": {
            "format": "date-time",
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "number": {
            "format": "int32",
            "type": [
              "integer",
              "null"
            ]
          },
          "order": {
            "format": "int32",
            "type": "integer"
          },
          "statusCategoryUpdatedAt": {
            "format": "date-time",
            "type": [
              "string",
              "null"
            ]
          },
          "statusId": {
            "format": "uuid",
            "type": "string"
          },
          "statusUpdatedAt": {
            "format": "date-time",
            "type": [
              "string",
              "null"
            ]
          },
          "workspaceId": {
            "format": "uuid",
            "type": "string"
          }
        },
        "required": [
          "id",
          "workspaceId",
          "statusId",
          "color",
          "name",
          "description",
          "fields",
          "archived",
          "createdAt",
          "lastUpdatedAt",
          "order"
        ],
        "title": "Item",
        "type": "object"
      },
      "ItemAttachment": {
        "description": "A connection link between an item and an uploaded attachment.",
        "properties": {
          "contentType": {
            "description": "Type of updated content.",
            "type": "string"
          },
          "createdAt": {
            "description": "When this attachment link has been created.",
            "format": "date-time",
            "type": "string"
          },
          "id": {
            "description": "ID of an item-attachment link.",
            "format": "uuid",
            "type": "string"
          },
          "itemId": {
            "description": "ID of the item to which the attachment is linked.",
            "format": "uuid",
            "type": "string"
          },
          "lastUpdatedAt": {
            "description": "When this attachment link has been updated for the last time.",
            "format": "date-time",
            "type": "string"
          },
          "name": {
            "description": "Name of the attachment, e.g. its file name (to be displayed in UI).",
            "type": "string"
          },
          "uri": {
            "description": "URI of the attachment contents. It can be any URI, but conventionally it's a relative URI like 'attachment:1ecb9ecd-8a97-403a-a74a-741eb4b8fb69' with UUID of a file uploaded to airfocus file-storage. Such URI is then resolved by clients into a full HTTPS URL.",
            "type": "string"
          }
        },
        "required": [
          "id",
          "itemId",
          "name",
          "uri",
          "contentType",
          "createdAt",
          "lastUpdatedAt"
        ],
        "title": "ItemAttachment",
        "type": "object"
      },
      "ItemAttachmentBulkAction": {
        "discriminator": {
          "mapping": {
            "create": "#/components/schemas/ItemAttachmentBulkCreate",
            "delete": "#/components/schemas/ItemAttachmentBulkDelete",
            "patch": "#/components/schemas/ItemAttachmentBulkPatch",
            "update": "#/components/schemas/ItemAttachmentBulkUpdate"
          },
          "propertyName": "type"
        },
        "oneOf": [
          {
            "$ref": "#/components/schemas/ItemAttachmentBulkCreate"
          },
          {
            "$ref": "#/components/schemas/ItemAttachmentBulkDelete"
          },
          {
            "$ref": "#/components/schemas/ItemAttachmentBulkPatch"
          },
          {
            "$ref": "#/components/schemas/ItemAttachmentBulkUpdate"
          }
        ],
        "title": "ItemAttachmentBulkAction"
      },
      "ItemAttachmentBulkCreate": {
        "properties": {
          "resource": {
            "$ref": "#/components/schemas/ItemAttachment"
          },
          "type": {
            "enum": [
              "create"
            ],
            "type": "string"
          }
        },
        "required": [
          "resource",
          "type"
        ],
        "title": "ItemAttachmentBulkCreate",
        "type": "object"
      },
      "ItemAttachmentBulkDelete": {
        "properties": {
          "id": {
            "format": "uuid",
            "type": "string"
          },
          "type": {
            "enum": [
              "delete"
            ],
            "type": "string"
          }
        },
        "required": [
          "id",
          "type"
        ],
        "title": "ItemAttachmentBulkDelete",
        "type": "object"
      },
      "ItemAttachmentBulkPatch": {
        "properties": {
          "id": {
            "format": "uuid",
            "type": "string"
          },
          "transform": {
            "$ref": "#/components/schemas/JsonPatch"
          },
          "type": {
            "enum": [
              "patch"
            ],
            "type": "string"
          }
        },
        "required": [
          "id",
          "transform",
          "type"
        ],
        "title": "ItemAttachmentBulkPatch",
        "type": "object"
      },
      "ItemAttachmentBulkUpdate": {
        "properties": {
          "id": {
            "format": "uuid",
            "type": "string"
          },
          "resource": {
            "$ref": "#/components/schemas/ItemAttachment"
          },
          "type": {
            "enum": [
              "update"
            ],
            "type": "string"
          }
        },
        "required": [
          "id",
          "resource",
          "type"
        ],
        "title": "ItemAttachmentBulkUpdate",
        "type": "object"
      },
      "ItemAttachmentWithEmbed": {
        "description": "A connection link between an item and an uploaded attachment.",
        "properties": {
          "_embedded": {
            "type": "object"
          },
          "contentType": {
            "description": "Type of updated content.",
            "type": "string"
          },
          "createdAt": {
            "description": "When this attachment link has been created.",
            "format": "date-time",
            "type": "string"
          },
          "id": {
            "description": "ID of an item-attachment link.",
            "format": "uuid",
            "type": "string"
          },
          "itemId": {
            "description": "ID of the item to which the attachment is linked.",
            "format": "uuid",
            "type": "string"
          },
          "lastUpdatedAt": {
            "description": "When this attachment link has been updated for the last time.",
            "format": "date-time",
            "type": "string"
          },
          "name": {
            "description": "Name of the attachment, e.g. its file name (to be displayed in UI).",
            "type": "string"
          },
          "uri": {
            "description": "URI of the attachment contents. It can be any URI, but conventionally it's a relative URI like 'attachment:1ecb9ecd-8a97-403a-a74a-741eb4b8fb69' with UUID of a file uploaded to airfocus file-storage. Such URI is then resolved by clients into a full HTTPS URL.",
            "type": "string"
          }
        },
        "required": [
          "id",
          "itemId",
          "name",
          "uri",
          "contentType",
          "createdAt",
          "lastUpdatedAt",
          "_embedded"
        ],
        "title": "ItemAttachmentWithEmbed",
        "type": "object"
      },
      "ItemAttachmentWithEmbedOrNullList": {
        "items": {
          "anyOf": [
            {
              "$ref": "#/components/schemas/ItemAttachmentWithEmbed"
            },
            {
              "type": "null"
            }
          ]
        },
        "title": "ItemAttachmentWithEmbedOrNullList",
        "type": "array"
      },
      "ItemAttachmentWithEmbedPage": {
        "properties": {
          "items": {
            "items": {
              "$ref": "#/components/schemas/ItemAttachmentWithEmbed"
            },
            "type": "array"
          },
          "totalItems": {
            "format": "int32",
            "type": "integer"
          }
        },
        "required": [
          "totalItems"
        ],
        "title": "ItemAttachmentWithEmbedPage",
        "type": "object"
      },
      "ItemBulkAction": {
        "discriminator": {
          "mapping": {
            "create": "#/components/schemas/ItemBulkCreate",
            "delete": "#/components/schemas/ItemBulkDelete",
            "patch": "#/components/schemas/ItemBulkPatch",
            "update": "#/components/schemas/ItemBulkUpdate"
          },
          "propertyName": "type"
        },
        "oneOf": [
          {
            "$ref": "#/components/schemas/ItemBulkCreate"
          },
          {
            "$ref": "#/components/schemas/ItemBulkDelete"
          },
          {
            "$ref": "#/components/schemas/ItemBulkPatch"
          },
          {
            "$ref": "#/components/schemas/ItemBulkUpdate"
          }
        ],
        "title": "ItemBulkAction"
      },
      "ItemBulkCreate": {
        "properties": {
          "resource": {
            "$ref": "#/components/schemas/Item"
          },
          "type": {
            "enum": [
              "create"
            ],
            "type": "string"
          }
        },
        "required": [
          "resource",
          "type"
        ],
        "title": "ItemBulkCreate",
        "type": "object"
      },
      "ItemBulkDelete": {
        "properties": {
          "id": {
            "format": "uuid",
            "type": "string"
          },
          "type": {
            "enum": [
              "delete"
            ],
            "type": "string"
          }
        },
        "required": [
          "id",
          "type"
        ],
        "title": "ItemBulkDelete",
        "type": "object"
      },
      "ItemBulkPatch": {
        "properties": {
          "id": {
            "format": "uuid",
            "type": "string"
          },
          "transform": {
            "$ref": "#/components/schemas/JsonPatch"
          },
          "type": {
            "enum": [
              "patch"
            ],
            "type": "string"
          }
        },
        "required": [
          "id",
          "transform",
          "type"
        ],
        "title": "ItemBulkPatch",
        "type": "object"
      },
      "ItemBulkUpdate": {
        "properties": {
          "id": {
            "format": "uuid",
            "type": "string"
          },
          "resource": {
            "$ref": "#/components/schemas/Item"
          },
          "type": {
            "enum": [
              "update"
            ],
            "type": "string"
          }
        },
        "required": [
          "id",
          "resource",
          "type"
        ],
        "title": "ItemBulkUpdate",
        "type": "object"
      },
      "ItemColor": {
        "enum": [
          "amber",
          "azure",
          "black",
          "blue",
          "coco",
          "daulphine",
          "emerald",
          "fanta",
          "granite",
          "great",
          "leaf",
          "moss",
          "ocean",
          "orange",
          "pink",
          "purple",
          "red",
          "sky",
          "violet",
          "yellow"
        ],
        "title": "ItemColor",
        "type": "string"
      },
      "ItemConstraint": {
        "discriminator": {
          "mapping": {
            "integrationPushForbidden": "#/components/schemas/ItemConstraintIntegrationPushForbidden",
            "integrationToInternal": "#/components/schemas/ItemConstraintIntegrationToInternal",
            "propertyReadOnly": "#/components/schemas/ItemConstraintPropertyReadOnly",
            "undeletable": "#/components/schemas/ItemConstraintUndeletable"
          },
          "propertyName": "type"
        },
        "oneOf": [
          {
            "$ref": "#/components/schemas/ItemConstraintIntegrationPushForbidden"
          },
          {
            "$ref": "#/components/schemas/ItemConstraintIntegrationToInternal"
          },
          {
            "$ref": "#/components/schemas/ItemConstraintPropertyReadOnly"
          },
          {
            "$ref": "#/components/schemas/ItemConstraintUndeletable"
          }
        ],
        "title": "ItemConstraint"
      },
      "ItemConstraintIntegrationPushForbidden": {
        "properties": {
          "extensionId": {
            "format": "uuid",
            "type": "string"
          }
        },
        "required": [
          "extensionId"
        ],
        "title": "ItemConstraintIntegrationPushForbidden",
        "type": "object"
      },
      "ItemConstraintIntegrationToInternal": {
        "properties": {
          "extensionId": {
            "format": "uuid",
            "type": "string"
          },
          "property": {
            "$ref": "#/components/schemas/Property"
          }
        },
        "required": [
          "extensionId",
          "property"
        ],
        "title": "ItemConstraintIntegrationToInternal",
        "type": "object"
      },
      "ItemConstraintPropertyReadOnly": {
        "properties": {
          "extensionId": {
            "format": "uuid",
            "type": "string"
          },
          "property": {
            "$ref": "#/components/schemas/Property"
          }
        },
        "required": [
          "extensionId",
          "property"
        ],
        "title": "ItemConstraintPropertyReadOnly",
        "type": "object"
      },
      "ItemConstraintUndeletable": {
        "properties": {
          "extensionId": {
            "format": "uuid",
            "type": "string"
          }
        },
        "required": [
          "extensionId"
        ],
        "title": "ItemConstraintUndeletable",
        "type": "object"
      },
      "ItemEmbed": {
        "properties": {
          "alias": {
            "type": [
              "string",
              "null"
            ]
          },
          "apps": {
            "additionalProperties": {
              "$ref": "#/components/schemas/ItemEmbedApp"
            },
            "type": "object"
          },
          "attachmentCount": {
            "format": "int32",
            "type": "integer"
          },
          "children": {
            "items": {
              "$ref": "#/components/schemas/ItemEmbedRelativeItem"
            },
            "type": "array"
          },
          "commentCount": {
            "format": "int32",
            "type": "integer"
          },
          "constraints": {
            "items": {
              "$ref": "#/components/schemas/ItemConstraint"
            },
            "type": "array"
          },
          "integration": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/ItemEmbedIntegration"
              },
              {
                "type": "null"
              }
            ]
          },
          "linkCount": {
            "format": "int32",
            "type": "integer"
          },
          "parents": {
            "items": {
              "$ref": "#/components/schemas/ItemEmbedRelativeItem"
            },
            "type": "array"
          },
          "progress": {
            "$ref": "#/components/schemas/ItemEmbedProgress"
          },
          "watched": {
            "type": "boolean"
          },
          "workspaceItemType": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/ItemType"
              },
              {
                "type": "null"
              }
            ]
          }
        },
        "required": [
          "progress",
          "apps",
          "watched",
          "linkCount",
          "commentCount",
          "attachmentCount"
        ],
        "title": "ItemEmbed",
        "type": "object"
      },
      "ItemEmbedApp": {
        "properties": {
          "data": {},
          "id": {
            "format": "uuid",
            "type": "string"
          },
          "typeId": {
            "type": "string"
          }
        },
        "required": [
          "id",
          "typeId",
          "data"
        ],
        "title": "ItemEmbedApp",
        "type": "object"
      },
      "ItemEmbedIntegration": {
        "properties": {
          "data": {},
          "id": {
            "format": "uuid",
            "type": "string"
          },
          "typeId": {
            "type": "string"
          }
        },
        "required": [
          "id",
          "typeId",
          "data"
        ],
        "title": "ItemEmbedIntegration",
        "type": "object"
      },
      "ItemEmbedProgress": {
        "properties": {
          "closed": {
            "format": "int32",
            "type": "integer"
          },
          "total": {
            "format": "int32",
            "type": "integer"
          }
        },
        "required": [
          "closed",
          "total"
        ],
        "title": "ItemEmbedProgress",
        "type": "object"
      },
      "ItemEmbedRelativeItem": {
        "properties": {
          "alias": {
            "type": [
              "string",
              "null"
            ]
          },
          "childOrder": {
            "format": "int32",
            "type": "integer"
          },
          "item": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/Item"
              },
              {
                "type": "null"
              }
            ]
          },
          "itemId": {
            "format": "uuid",
            "type": "string"
          },
          "itemType": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/ItemType"
              },
              {
                "type": "null"
              }
            ]
          },
          "parentOrder": {
            "format": "int32",
            "type": "integer"
          },
          "relationId": {
            "format": "uuid",
            "type": "string"
          },
          "workspaceId": {
            "format": "uuid",
            "type": "string"
          }
        },
        "required": [
          "relationId",
          "workspaceId",
          "itemId",
          "parentOrder",
          "childOrder"
        ],
        "title": "ItemEmbedRelativeItem",
        "type": "object"
      },
      "ItemLink": {
        "properties": {
          "fromItemId": {
            "format": "uuid",
            "type": "string"
          },
          "fromOrder": {
            "description": "How this link is ordered in the list of links of the \"fromItem\".",
            "format": "int32",
            "type": "integer"
          },
          "id": {
            "format": "uuid",
            "type": "string"
          },
          "toItemId": {
            "format": "uuid",
            "type": "string"
          },
          "toOrder": {
            "description": "How this link is ordered in the list of links of the \"toItem\".",
            "format": "int32",
            "type": "integer"
          },
          "type": {
            "$ref": "#/components/schemas/ItemLinkType"
          }
        },
        "required": [
          "id",
          "fromItemId",
          "toItemId",
          "type",
          "fromOrder",
          "toOrder"
        ],
        "title": "ItemLink",
        "type": "object"
      },
      "ItemLinkBulkAction": {
        "discriminator": {
          "mapping": {
            "create": "#/components/schemas/ItemLinkBulkCreate",
            "delete": "#/components/schemas/ItemLinkBulkDelete",
            "patch": "#/components/schemas/ItemLinkBulkPatch",
            "update": "#/components/schemas/ItemLinkBulkUpdate"
          },
          "propertyName": "type"
        },
        "oneOf": [
          {
            "$ref": "#/components/schemas/ItemLinkBulkCreate"
          },
          {
            "$ref": "#/components/schemas/ItemLinkBulkDelete"
          },
          {
            "$ref": "#/components/schemas/ItemLinkBulkPatch"
          },
          {
            "$ref": "#/components/schemas/ItemLinkBulkUpdate"
          }
        ],
        "title": "ItemLinkBulkAction"
      },
      "ItemLinkBulkCreate": {
        "properties": {
          "resource": {
            "$ref": "#/components/schemas/Milestone"
          },
          "type": {
            "enum": [
              "create"
            ],
            "type": "string"
          }
        },
        "required": [
          "resource",
          "type"
        ],
        "title": "ItemLinkBulkCreate",
        "type": "object"
      },
      "ItemLinkBulkDelete": {
        "properties": {
          "id": {
            "format": "uuid",
            "type": "string"
          },
          "type": {
            "enum": [
              "delete"
            ],
            "type": "string"
          }
        },
        "required": [
          "id",
          "type"
        ],
        "title": "ItemLinkBulkDelete",
        "type": "object"
      },
      "ItemLinkBulkPatch": {
        "properties": {
          "id": {
            "format": "uuid",
            "type": "string"
          },
          "transform": {
            "$ref": "#/components/schemas/JsonPatch"
          },
          "type": {
            "enum": [
              "patch"
            ],
            "type": "string"
          }
        },
        "required": [
          "id",
          "transform",
          "type"
        ],
        "title": "ItemLinkBulkPatch",
        "type": "object"
      },
      "ItemLinkBulkUpdate": {
        "properties": {
          "id": {
            "format": "uuid",
            "type": "string"
          },
          "resource": {
            "$ref": "#/components/schemas/ItemLink"
          },
          "type": {
            "enum": [
              "update"
            ],
            "type": "string"
          }
        },
        "required": [
          "id",
          "resource",
          "type"
        ],
        "title": "ItemLinkBulkUpdate",
        "type": "object"
      },
      "ItemLinkConstraintUndeletable": {
        "properties": {
          "extensionId": {
            "format": "uuid",
            "type": "string"
          },
          "type": {
            "enum": [
              "undeletable"
            ],
            "type": "string"
          }
        },
        "required": [
          "extensionId",
          "type"
        ],
        "title": "ItemLinkConstraintUndeletable",
        "type": "object"
      },
      "ItemLinkEmbed": {
        "properties": {
          "apps": {
            "additionalProperties": {
              "$ref": "#/components/schemas/ItemLinkEmbedApp"
            },
            "type": "object"
          },
          "constraints": {
            "items": {
              "discriminator": {
                "mapping": {
                  "undeletable": "#/components/schemas/ItemLinkConstraintUndeletable"
                },
                "propertyName": "type"
              },
              "oneOf": [
                {
                  "$ref": "#/components/schemas/ItemLinkConstraintUndeletable"
                }
              ]
            },
            "type": "array"
          }
        },
        "required": [
          "apps"
        ],
        "title": "ItemLinkEmbed",
        "type": "object"
      },
      "ItemLinkEmbedApp": {
        "properties": {
          "data": {},
          "id": {
            "format": "uuid",
            "type": "string"
          },
          "typeId": {
            "type": "string"
          }
        },
        "required": [
          "id",
          "typeId",
          "data"
        ],
        "title": "ItemLinkEmbedApp",
        "type": "object"
      },
      "ItemLinkSearchQuery": {
        "description": "Query-parameters for searching links.",
        "properties": {
          "includeArchived": {
            "default": false,
            "description": "Also include links which connect archived items.",
            "type": "boolean"
          },
          "itemIds": {
            "description": "Return only those links which connect the specified items.",
            "items": {
              "format": "uuid",
              "type": "string"
            },
            "type": "array",
            "uniqueItems": true
          },
          "workspaceIds": {
            "description": "Return only those links which connect items in the specified workspaces.",
            "items": {
              "format": "uuid",
              "type": "string"
            },
            "type": "array",
            "uniqueItems": true
          }
        },
        "title": "ItemLinkSearchQuery",
        "type": "object"
      },
      "ItemLinkType": {
        "description": "Type of a link. At the moment only one type \"dependency\" is supported.",
        "enum": [
          "dependency"
        ],
        "title": "ItemLinkType",
        "type": "string"
      },
      "ItemLinkWithItemLinkEmbed": {
        "properties": {
          "_embedded": {
            "$ref": "#/components/schemas/ItemLinkEmbed"
          },
          "fromItemId": {
            "format": "uuid",
            "type": "string"
          },
          "fromOrder": {
            "description": "How this link is ordered in the list of links of the \"fromItem\".",
            "format": "int32",
            "type": "integer"
          },
          "id": {
            "format": "uuid",
            "type": "string"
          },
          "toItemId": {
            "format": "uuid",
            "type": "string"
          },
          "toOrder": {
            "description": "How this link is ordered in the list of links of the \"toItem\".",
            "format": "int32",
            "type": "integer"
          },
          "type": {
            "$ref": "#/components/schemas/ItemLinkType"
          }
        },
        "required": [
          "id",
          "fromItemId",
          "toItemId",
          "type",
          "fromOrder",
          "toOrder",
          "_embedded"
        ],
        "title": "ItemLinkWithItemLinkEmbed",
        "type": "object"
      },
      "ItemLinkWithItemLinkEmbedOrNullList": {
        "items": {
          "anyOf": [
            {
              "$ref": "#/components/schemas/ItemLinkWithItemLinkEmbed"
            },
            {
              "type": "null"
            }
          ]
        },
        "title": "ItemLinkWithItemLinkEmbedOrNullList",
        "type": "array"
      },
      "ItemLinkWithItemLinkEmbedPage": {
        "properties": {
          "items": {
            "items": {
              "$ref": "#/components/schemas/ItemLinkWithItemLinkEmbed"
            },
            "type": "array"
          },
          "totalItems": {
            "format": "int32",
            "type": "integer"
          }
        },
        "required": [
          "totalItems"
        ],
        "title": "ItemLinkWithItemLinkEmbedPage",
        "type": "object"
      },
      "ItemRelation": {
        "properties": {
          "childId": {
            "format": "uuid",
            "type": "string"
          },
          "childOrder": {
            "format": "int32",
            "type": "integer"
          },
          "id": {
            "format": "uuid",
            "type": "string"
          },
          "parentId": {
            "format": "uuid",
            "type": "string"
          },
          "parentOrder": {
            "format": "int32",
            "type": "integer"
          }
        },
        "required": [
          "id",
          "parentId",
          "childId",
          "parentOrder",
          "childOrder"
        ],
        "title": "ItemRelation",
        "type": "object"
      },
      "ItemRelationBulkAction": {
        "discriminator": {
          "mapping": {
            "create": "#/components/schemas/ItemRelationBulkCreate",
            "delete": "#/components/schemas/ItemRelationBulkDelete",
            "patch": "#/components/schemas/ItemRelationBulkPatch",
            "update": "#/components/schemas/ItemRelationBulkUpdate"
          },
          "propertyName": "type"
        },
        "oneOf": [
          {
            "$ref": "#/components/schemas/ItemRelationBulkCreate"
          },
          {
            "$ref": "#/components/schemas/ItemRelationBulkDelete"
          },
          {
            "$ref": "#/components/schemas/ItemRelationBulkPatch"
          },
          {
            "$ref": "#/components/schemas/ItemRelationBulkUpdate"
          }
        ],
        "title": "ItemRelationBulkAction"
      },
      "ItemRelationBulkCreate": {
        "properties": {
          "resource": {
            "$ref": "#/components/schemas/ItemRelation"
          },
          "type": {
            "enum": [
              "create"
            ],
            "type": "string"
          }
        },
        "required": [
          "resource",
          "type"
        ],
        "title": "ItemRelationBulkCreate",
        "type": "object"
      },
      "ItemRelationBulkDelete": {
        "properties": {
          "id": {
            "format": "uuid",
            "type": "string"
          },
          "type": {
            "enum": [
              "delete"
            ],
            "type": "string"
          }
        },
        "required": [
          "id",
          "type"
        ],
        "title": "ItemRelationBulkDelete",
        "type": "object"
      },
      "ItemRelationBulkPatch": {
        "properties": {
          "id": {
            "format": "uuid",
            "type": "string"
          },
          "transform": {
            "$ref": "#/components/schemas/JsonPatch"
          },
          "type": {
            "enum": [
              "patch"
            ],
            "type": "string"
          }
        },
        "required": [
          "id",
          "transform",
          "type"
        ],
        "title": "ItemRelationBulkPatch",
        "type": "object"
      },
      "ItemRelationBulkUpdate": {
        "properties": {
          "id": {
            "format": "uuid",
            "type": "string"
          },
          "resource": {
            "$ref": "#/components/schemas/ItemRelation"
          },
          "type": {
            "enum": [
              "update"
            ],
            "type": "string"
          }
        },
        "required": [
          "id",
          "resource",
          "type"
        ],
        "title": "ItemRelationBulkUpdate",
        "type": "object"
      },
      "ItemRelationSearchQuery": {
        "properties": {
          "filter": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/ItemRelationSearchQueryFilter"
              },
              {
                "type": "null"
              }
            ]
          }
        },
        "title": "ItemRelationSearchQuery",
        "type": "object"
      },
      "ItemRelationSearchQueryFilter": {
        "discriminator": {
          "mapping": {
            "child": "#/components/schemas/ItemRelationSearchQueryFilterChild",
            "parent": "#/components/schemas/ItemRelationSearchQueryFilterParent",
            "parentOrChild": "#/components/schemas/ItemRelationSearchQueryFilterParentOrChild"
          },
          "propertyName": "type"
        },
        "oneOf": [
          {
            "$ref": "#/components/schemas/ItemRelationSearchQueryFilterChild"
          },
          {
            "$ref": "#/components/schemas/ItemRelationSearchQueryFilterParent"
          },
          {
            "$ref": "#/components/schemas/ItemRelationSearchQueryFilterParentOrChild"
          }
        ],
        "title": "ItemRelationSearchQueryFilter"
      },
      "ItemRelationSearchQueryFilterChild": {
        "properties": {
          "itemId": {
            "format": "uuid",
            "type": "string"
          }
        },
        "required": [
          "itemId"
        ],
        "title": "ItemRelationSearchQueryFilterChild",
        "type": "object"
      },
      "ItemRelationSearchQueryFilterParent": {
        "properties": {
          "itemId": {
            "format": "uuid",
            "type": "string"
          }
        },
        "required": [
          "itemId"
        ],
        "title": "ItemRelationSearchQueryFilterParent",
        "type": "object"
      },
      "ItemRelationSearchQueryFilterParentOrChild": {
        "properties": {
          "itemId": {
            "format": "uuid",
            "type": "string"
          }
        },
        "required": [
          "itemId"
        ],
        "title": "ItemRelationSearchQueryFilterParentOrChild",
        "type": "object"
      },
      "ItemRelationWithEmbed": {
        "properties": {
          "_embedded": {
            "type": "object"
          },
          "childId": {
            "format": "uuid",
            "type": "string"
          },
          "childOrder": {
            "format": "int32",
            "type": "integer"
          },
          "id": {
            "format": "uuid",
            "type": "string"
          },
          "parentId": {
            "format": "uuid",
            "type": "string"
          },
          "parentOrder": {
            "format": "int32",
            "type": "integer"
          }
        },
        "required": [
          "id",
          "parentId",
          "childId",
          "parentOrder",
          "childOrder",
          "_embedded"
        ],
        "title": "ItemRelationWithEmbed",
        "type": "object"
      },
      "ItemRelationWithEmbedOrNullList": {
        "items": {
          "anyOf": [
            {
              "$ref": "#/components/schemas/ItemRelationWithEmbed"
            },
            {
              "type": "null"
            }
          ]
        },
        "title": "ItemRelationWithEmbedOrNullList",
        "type": "array"
      },
      "ItemRelationWithEmbedPage": {
        "properties": {
          "items": {
            "items": {
              "$ref": "#/components/schemas/ItemRelationWithEmbed"
            },
            "type": "array"
          },
          "totalItems": {
            "format": "int32",
            "type": "integer"
          }
        },
        "required": [
          "totalItems"
        ],
        "title": "ItemRelationWithEmbedPage",
        "type": "object"
      },
      "ItemSearchQuery": {
        "properties": {
          "archived": {
            "type": "boolean"
          },
          "filter": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/ItemSearchQueryFilter"
              },
              {
                "type": "null"
              }
            ]
          },
          "sort": {
            "$ref": "#/components/schemas/ItemSearchQuerySort"
          }
        },
        "required": [
          "sort",
          "archived"
        ],
        "title": "ItemSearchQuery",
        "type": "object"
      },
      "ItemSearchQueryDateTimeFilterValue": {
        "properties": {
          "date": {
            "format": "date",
            "type": "string"
          },
          "time": {
            "type": [
              "string",
              "null"
            ]
          },
          "zoneId": {
            "type": "string"
          }
        },
        "required": [
          "date",
          "zoneId"
        ],
        "title": "ItemSearchQueryDateTimeFilterValue",
        "type": "object"
      },
      "ItemSearchQueryFilter": {
        "discriminator": {
          "mapping": {
            "and": "#/components/schemas/ItemSearchQueryFilterAnd",
            "assignees": "#/components/schemas/ItemSearchQueryFilterAssignees",
            "createdAt": "#/components/schemas/ItemSearchQueryFilterCreatedAt",
            "field": "#/components/schemas/ItemSearchQueryFilterField",
            "integration": "#/components/schemas/ItemSearchQueryFilterIntegration",
            "lastUpdatedAt": "#/components/schemas/ItemSearchQueryFilterLastUpdatedAt",
            "name": "#/components/schemas/ItemSearchQueryFilterName",
            "not": "#/components/schemas/ItemSearchQueryFilterNot",
            "or": "#/components/schemas/ItemSearchQueryFilterOr",
            "parent": "#/components/schemas/ItemSearchQueryFilterParent",
            "status": "#/components/schemas/ItemSearchQueryFilterStatus",
            "statusCategory": "#/components/schemas/ItemSearchQueryFilterStatusCategory",
            "updated": "#/components/schemas/ItemSearchQueryFilterUpdated"
          },
          "propertyName": "type"
        },
        "oneOf": [
          {
            "$ref": "#/components/schemas/ItemSearchQueryFilterAnd"
          },
          {
            "$ref": "#/components/schemas/ItemSearchQueryFilterAssignees"
          },
          {
            "$ref": "#/components/schemas/ItemSearchQueryFilterCreatedAt"
          },
          {
            "$ref": "#/components/schemas/ItemSearchQueryFilterField"
          },
          {
            "$ref": "#/components/schemas/ItemSearchQueryFilterIntegration"
          },
          {
            "$ref": "#/components/schemas/ItemSearchQueryFilterLastUpdatedAt"
          },
          {
            "$ref": "#/components/schemas/ItemSearchQueryFilterName"
          },
          {
            "$ref": "#/components/schemas/ItemSearchQueryFilterNot"
          },
          {
            "$ref": "#/components/schemas/ItemSearchQueryFilterOr"
          },
          {
            "$ref": "#/components/schemas/ItemSearchQueryFilterParent"
          },
          {
            "$ref": "#/components/schemas/ItemSearchQueryFilterStatus"
          },
          {
            "$ref": "#/components/schemas/ItemSearchQueryFilterStatusCategory"
          },
          {
            "$ref": "#/components/schemas/ItemSearchQueryFilterUpdated"
          }
        ],
        "title": "ItemSearchQueryFilter"
      },
      "ItemSearchQueryFilterAnd": {
        "properties": {
          "inner": {
            "$ref": "#/components/schemas/ItemSearchQueryFilter"
          }
        },
        "required": [
          "inner"
        ],
        "title": "ItemSearchQueryFilterAnd",
        "type": "object"
      },
      "ItemSearchQueryFilterAssignees": {
        "discriminator": {
          "mapping": {
            "contain": "#/components/schemas/ItemSearchQueryFilterAssigneesContain",
            "containsAll": "#/components/schemas/ItemSearchQueryFilterAssigneesContainsAll",
            "containsAny": "#/components/schemas/ItemSearchQueryFilterAssigneesContainsAny",
            "defined": "io.airfocus.workspaceservice.api.ItemSearchQuery.Filter.Assignees.Defined"
          },
          "propertyName": "mode"
        },
        "oneOf": [
          {
            "$ref": "#/components/schemas/ItemSearchQueryFilterAssigneesContain"
          },
          {
            "$ref": "#/components/schemas/ItemSearchQueryFilterAssigneesContainsAll"
          },
          {
            "$ref": "#/components/schemas/ItemSearchQueryFilterAssigneesContainsAny"
          },
          {
            "type": "object"
          }
        ],
        "title": "ItemSearchQueryFilterAssignees"
      },
      "ItemSearchQueryFilterAssigneesContain": {
        "properties": {
          "id": {
            "format": "uuid",
            "type": "string"
          }
        },
        "required": [
          "id"
        ],
        "title": "ItemSearchQueryFilterAssigneesContain",
        "type": "object"
      },
      "ItemSearchQueryFilterAssigneesContainsAll": {
        "properties": {
          "ids": {
            "items": {
              "format": "uuid",
              "type": "string"
            },
            "type": "array"
          }
        },
        "title": "ItemSearchQueryFilterAssigneesContainsAll",
        "type": "object"
      },
      "ItemSearchQueryFilterAssigneesContainsAny": {
        "properties": {
          "ids": {
            "items": {
              "format": "uuid",
              "type": "string"
            },
            "type": "array"
          }
        },
        "title": "ItemSearchQueryFilterAssigneesContainsAny",
        "type": "object"
      },
      "ItemSearchQueryFilterCreatedAt": {
        "properties": {
          "mode": {
            "$ref": "#/components/schemas/ItemSearchQueryTimeMode"
          },
          "value": {
            "$ref": "#/components/schemas/ItemSearchQueryDateTimeFilterValue"
          }
        },
        "required": [
          "mode",
          "value"
        ],
        "title": "ItemSearchQueryFilterCreatedAt",
        "type": "object"
      },
      "ItemSearchQueryFilterField": {
        "discriminator": {
          "mapping": {
            "value": "#/components/schemas/ItemSearchQueryFilterFieldValue"
          },
          "propertyName": "mode"
        },
        "oneOf": [
          {
            "$ref": "#/components/schemas/ItemSearchQueryFilterFieldValue"
          }
        ],
        "title": "ItemSearchQueryFilterField"
      },
      "ItemSearchQueryFilterFieldValue": {
        "properties": {
          "fieldId": {
            "format": "uuid",
            "type": "string"
          },
          "filter": {
            "$ref": "#/components/schemas/JsObject"
          }
        },
        "required": [
          "fieldId",
          "filter"
        ],
        "title": "ItemSearchQueryFilterFieldValue",
        "type": "object"
      },
      "ItemSearchQueryFilterIntegration": {
        "discriminator": {
          "mapping": {
            "defined": "io.airfocus.workspaceservice.api.ItemSearchQuery.Filter.Integration.Defined",
            "value": "#/components/schemas/ItemSearchQueryFilterIntegrationValue"
          },
          "propertyName": "mode"
        },
        "oneOf": [
          {
            "$ref": "#/components/schemas/ItemSearchQueryFilterIntegrationValue"
          },
          {
            "type": "object"
          }
        ],
        "title": "ItemSearchQueryFilterIntegration"
      },
      "ItemSearchQueryFilterIntegrationValue": {
        "properties": {
          "integrationId": {
            "format": "uuid",
            "type": "string"
          }
        },
        "required": [
          "integrationId"
        ],
        "title": "ItemSearchQueryFilterIntegrationValue",
        "type": "object"
      },
      "ItemSearchQueryFilterLastUpdatedAt": {
        "properties": {
          "mode": {
            "$ref": "#/components/schemas/ItemSearchQueryTimeMode"
          },
          "property": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/Property"
              },
              {
                "type": "null"
              }
            ]
          },
          "value": {
            "$ref": "#/components/schemas/ItemSearchQueryDateTimeFilterValue"
          }
        },
        "required": [
          "mode",
          "value"
        ],
        "title": "ItemSearchQueryFilterLastUpdatedAt",
        "type": "object"
      },
      "ItemSearchQueryFilterName": {
        "discriminator": {
          "mapping": {
            "contain": "#/components/schemas/ItemSearchQueryFilterNameContain",
            "equal": "#/components/schemas/ItemSearchQueryFilterNameEqual"
          },
          "propertyName": "mode"
        },
        "oneOf": [
          {
            "$ref": "#/components/schemas/ItemSearchQueryFilterNameContain"
          },
          {
            "$ref": "#/components/schemas/ItemSearchQueryFilterNameEqual"
          }
        ],
        "title": "ItemSearchQueryFilterName"
      },
      "ItemSearchQueryFilterNameContain": {
        "properties": {
          "caseSensitive": {
            "type": "boolean"
          },
          "text": {
            "type": "string"
          }
        },
        "required": [
          "text",
          "caseSensitive"
        ],
        "title": "ItemSearchQueryFilterNameContain",
        "type": "object"
      },
      "ItemSearchQueryFilterNameEqual": {
        "properties": {
          "caseSensitive": {
            "type": "boolean"
          },
          "text": {
            "type": "string"
          }
        },
        "required": [
          "text",
          "caseSensitive"
        ],
        "title": "ItemSearchQueryFilterNameEqual",
        "type": "object"
      },
      "ItemSearchQueryFilterNot": {
        "properties": {
          "inner": {
            "$ref": "#/components/schemas/ItemSearchQueryFilter"
          }
        },
        "required": [
          "inner"
        ],
        "title": "ItemSearchQueryFilterNot",
        "type": "object"
      },
      "ItemSearchQueryFilterOr": {
        "properties": {
          "inner": {
            "$ref": "#/components/schemas/ItemSearchQueryFilter"
          }
        },
        "required": [
          "inner"
        ],
        "title": "ItemSearchQueryFilterOr",
        "type": "object"
      },
      "ItemSearchQueryFilterParent": {
        "discriminator": {
          "mapping": {
            "defined": "io.airfocus.workspaceservice.api.ItemSearchQuery.Filter.Parent.Defined",
            "value": "#/components/schemas/ItemSearchQueryFilterParentValue"
          },
          "propertyName": "mode"
        },
        "oneOf": [
          {
            "$ref": "#/components/schemas/ItemSearchQueryFilterParentValue"
          },
          {
            "type": "object"
          }
        ],
        "title": "ItemSearchQueryFilterParent"
      },
      "ItemSearchQueryFilterParentValue": {
        "properties": {
          "itemId": {
            "format": "uuid",
            "type": "string"
          },
          "workspaceId": {
            "format": "uuid",
            "type": "string"
          }
        },
        "required": [
          "workspaceId",
          "itemId"
        ],
        "title": "ItemSearchQueryFilterParentValue",
        "type": "object"
      },
      "ItemSearchQueryFilterStatus": {
        "discriminator": {
          "mapping": {
            "containsAny": "#/components/schemas/ItemSearchQueryFilterStatusContainsAny",
            "updatedSince": "#/components/schemas/ItemSearchQueryFilterStatusUpdatedSince"
          },
          "propertyName": "mode"
        },
        "oneOf": [
          {
            "$ref": "#/components/schemas/ItemSearchQueryFilterStatusContainsAny"
          },
          {
            "$ref": "#/components/schemas/ItemSearchQueryFilterStatusUpdatedSince"
          }
        ],
        "title": "ItemSearchQueryFilterStatus"
      },
      "ItemSearchQueryFilterStatusCategory": {
        "discriminator": {
          "mapping": {
            "containsAny": "#/components/schemas/ItemSearchQueryFilterStatusCategoryContainsAny",
            "updatedSince": "#/components/schemas/ItemSearchQueryFilterStatusCategoryUpdatedSince"
          },
          "propertyName": "mode"
        },
        "oneOf": [
          {
            "$ref": "#/components/schemas/ItemSearchQueryFilterStatusCategoryContainsAny"
          },
          {
            "$ref": "#/components/schemas/ItemSearchQueryFilterStatusCategoryUpdatedSince"
          }
        ],
        "title": "ItemSearchQueryFilterStatusCategory"
      },
      "ItemSearchQueryFilterStatusCategoryContainsAny": {
        "properties": {
          "categories": {
            "items": {
              "$ref": "#/components/schemas/StatusCategory"
            },
            "type": "array",
            "uniqueItems": true
          }
        },
        "title": "ItemSearchQueryFilterStatusCategoryContainsAny",
        "type": "object"
      },
      "ItemSearchQueryFilterStatusCategoryUpdatedSince": {
        "properties": {
          "value": {
            "$ref": "#/components/schemas/ItemSearchQueryTimeAnchor"
          }
        },
        "required": [
          "value"
        ],
        "title": "ItemSearchQueryFilterStatusCategoryUpdatedSince",
        "type": "object"
      },
      "ItemSearchQueryFilterStatusContainsAny": {
        "properties": {
          "statusIds": {
            "items": {
              "format": "uuid",
              "type": "string"
            },
            "type": "array",
            "uniqueItems": true
          }
        },
        "title": "ItemSearchQueryFilterStatusContainsAny",
        "type": "object"
      },
      "ItemSearchQueryFilterStatusUpdatedSince": {
        "properties": {
          "value": {
            "$ref": "#/components/schemas/ItemSearchQueryTimeAnchor"
          }
        },
        "required": [
          "value"
        ],
        "title": "ItemSearchQueryFilterStatusUpdatedSince",
        "type": "object"
      },
      "ItemSearchQueryFilterUpdated": {
        "discriminator": {
          "mapping": {
            "since": "#/components/schemas/ItemSearchQueryFilterUpdatedSince"
          },
          "propertyName": "mode"
        },
        "oneOf": [
          {
            "$ref": "#/components/schemas/ItemSearchQueryFilterUpdatedSince"
          }
        ],
        "title": "ItemSearchQueryFilterUpdated"
      },
      "ItemSearchQueryFilterUpdatedSince": {
        "properties": {
          "property": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/Property"
              },
              {
                "type": "null"
              }
            ]
          },
          "timestamp": {
            "format": "date-time",
            "type": "string"
          }
        },
        "required": [
          "timestamp"
        ],
        "title": "ItemSearchQueryFilterUpdatedSince",
        "type": "object"
      },
      "ItemSearchQuerySort": {
        "discriminator": {
          "mapping": {
            "createdAt": "io.airfocus.workspaceservice.api.ItemSearchQuery.Sort.CreatedAt",
            "field": "io.airfocus.workspaceservice.api.ItemSearchQuery.Sort.Field",
            "lastUpdatedAt": "io.airfocus.workspaceservice.api.ItemSearchQuery.Sort.LastUpdatedAt",
            "name": "io.airfocus.workspaceservice.api.ItemSearchQuery.Sort.Name",
            "order": "io.airfocus.workspaceservice.api.ItemSearchQuery.Sort.Order",
            "status": "io.airfocus.workspaceservice.api.ItemSearchQuery.Sort.Status"
          },
          "propertyName": "type"
        },
        "oneOf": [
          {},
          {},
          {},
          {},
          {},
          {}
        ],
        "title": "ItemSearchQuerySort"
      },
      "ItemSearchQueryTimeAnchor": {
        "discriminator": {
          "mapping": {
            "days": "#/components/schemas/ItemSearchQueryTimeAnchorDays",
            "months": "#/components/schemas/ItemSearchQueryTimeAnchorMonths",
            "weeks": "#/components/schemas/ItemSearchQueryTimeAnchorWeeks"
          },
          "propertyName": "type"
        },
        "oneOf": [
          {
            "$ref": "#/components/schemas/ItemSearchQueryTimeAnchorDays"
          },
          {
            "$ref": "#/components/schemas/ItemSearchQueryTimeAnchorMonths"
          },
          {
            "$ref": "#/components/schemas/ItemSearchQueryTimeAnchorWeeks"
          }
        ],
        "title": "ItemSearchQueryTimeAnchor"
      },
      "ItemSearchQueryTimeAnchorDays": {
        "properties": {
          "count": {
            "format": "int32",
            "type": "integer"
          }
        },
        "required": [
          "count"
        ],
        "title": "ItemSearchQueryTimeAnchorDays",
        "type": "object"
      },
      "ItemSearchQueryTimeAnchorMonths": {
        "properties": {
          "count": {
            "format": "int32",
            "type": "integer"
          }
        },
        "required": [
          "count"
        ],
        "title": "ItemSearchQueryTimeAnchorMonths",
        "type": "object"
      },
      "ItemSearchQueryTimeAnchorWeeks": {
        "properties": {
          "count": {
            "format": "int32",
            "type": "integer"
          }
        },
        "required": [
          "count"
        ],
        "title": "ItemSearchQueryTimeAnchorWeeks",
        "type": "object"
      },
      "ItemSearchQueryTimeMode": {
        "enum": [
          "after",
          "afterOrOn",
          "before",
          "beforeOrOn"
        ],
        "title": "ItemSearchQueryTimeMode",
        "type": "string"
      },
      "ItemType": {
        "enum": [
          "bug",
          "epic",
          "experiment",
          "feature",
          "feedback",
          "idea",
          "initiative",
          "app:okr:objective",
          "opportunity",
          "product",
          "project",
          "story",
          "task"
        ],
        "title": "ItemType",
        "type": "string"
      },
      "ItemWithItemEmbed": {
        "properties": {
          "_embedded": {
            "$ref": "#/components/schemas/ItemEmbed"
          },
          "archived": {
            "type": "boolean"
          },
          "assigneeUserIds": {
            "items": {
              "format": "uuid",
              "type": "string"
            },
            "type": "array"
          },
          "color": {
            "$ref": "#/components/schemas/ItemColor"
          },
          "createdAt": {
            "format": "date-time",
            "type": "string"
          },
          "description": {
            "$ref": "#/components/schemas/RichText"
          },
          "fields": {
            "additionalProperties": {},
            "description": "Values of custom fields, where each key is a custom-field ID and each value is a JSON-formatted value of the corresponding field.",
            "examples": [
              {
                "0fc3cfbc-27e9-3ea6-8a78-7de13dae3e3c": {
                  "number": 42
                },
                "34f05b62-dd43-3e1e-82bc-b0acabd0d004": {
                  "boolean": true
                },
                "5396681e-ea50-3d63-9ae3-c9f8ca17b7d8": {
                  "userIds": [
                    "24c9e15e-52af-347c-a25b-757e7bee1f9d"
                  ]
                },
                "75fe57ec-4a04-3a30-8cac-5f27223df81a": {
                  "dateRange": {
                    "endDate": "2024-02-14",
                    "startDate": "2024-01-14",
                    "timezone": "UTC"
                  }
                },
                "8be74552-df93-331b-bdd6-b36ed74bdb6a": {
                  "selection": [
                    "2bb225ce-b5ee-3493-967c-fde0d72da242"
                  ]
                },
                "c7824f3d-4d5f-3b2f-a2d0-34758c1e9454": {
                  "text": "A platform built for the new way of doing product management"
                },
                "e34d514f-7db5-38aa-872a-7c8191a09617": {
                  "date": {
                    "date": "2024-01-01",
                    "timezone": "UTC"
                  }
                }
              }
            ],
            "type": "object"
          },
          "id": {
            "format": "uuid",
            "type": "string"
          },
          "lastUpdatedAt": {
            "format": "date-time",
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "number": {
            "format": "int32",
            "type": [
              "integer",
              "null"
            ]
          },
          "order": {
            "format": "int32",
            "type": "integer"
          },
          "statusCategoryUpdatedAt": {
            "format": "date-time",
            "type": [
              "string",
              "null"
            ]
          },
          "statusId": {
            "format": "uuid",
            "type": "string"
          },
          "statusUpdatedAt": {
            "format": "date-time",
            "type": [
              "string",
              "null"
            ]
          },
          "workspaceId": {
            "format": "uuid",
            "type": "string"
          }
        },
        "required": [
          "id",
          "workspaceId",
          "statusId",
          "color",
          "name",
          "description",
          "fields",
          "archived",
          "createdAt",
          "lastUpdatedAt",
          "order",
          "_embedded"
        ],
        "title": "ItemWithItemEmbed",
        "type": "object"
      },
      "ItemWithItemEmbedOrNullList": {
        "items": {
          "anyOf": [
            {
              "$ref": "#/components/schemas/ItemWithItemEmbed"
            },
            {
              "type": "null"
            }
          ]
        },
        "title": "ItemWithItemEmbedOrNullList",
        "type": "array"
      },
      "ItemWithItemEmbedPage": {
        "properties": {
          "items": {
            "items": {
              "$ref": "#/components/schemas/ItemWithItemEmbed"
            },
            "type": "array"
          },
          "totalItems": {
            "format": "int32",
            "type": "integer"
          }
        },
        "required": [
          "totalItems"
        ],
        "title": "ItemWithItemEmbedPage",
        "type": "object"
      },
      "JsObject": {
        "title": "JsObject",
        "type": "object"
      },
      "JsonPatch": {
        "description": "A JSON Patch document. See https://jsonpatch.com/ for more information.",
        "properties": {
          "ops": {
            "items": {
              "$ref": "#/components/schemas/JsonPatchOperation"
            },
            "type": "array"
          }
        },
        "title": "JsonPatch",
        "type": "object"
      },
      "JsonPatchAdd": {
        "properties": {
          "op": {
            "enum": [
              "add"
            ],
            "type": "string"
          },
          "path": {
            "type": "string"
          },
          "value": {}
        },
        "required": [
          "path",
          "value",
          "op"
        ],
        "title": "JsonPatchAdd",
        "type": "object"
      },
      "JsonPatchCopy": {
        "properties": {
          "from": {
            "type": "string"
          },
          "op": {
            "enum": [
              "copy"
            ],
            "type": "string"
          },
          "path": {
            "type": "string"
          }
        },
        "required": [
          "from",
          "path",
          "op"
        ],
        "title": "JsonPatchCopy",
        "type": "object"
      },
      "JsonPatchMove": {
        "properties": {
          "from": {
            "type": "string"
          },
          "op": {
            "enum": [
              "move"
            ],
            "type": "string"
          },
          "path": {
            "type": "string"
          }
        },
        "required": [
          "from",
          "path",
          "op"
        ],
        "title": "JsonPatchMove",
        "type": "object"
      },
      "JsonPatchOperation": {
        "discriminator": {
          "mapping": {
            "add": "#/components/schemas/JsonPatchAdd",
            "copy": "#/components/schemas/JsonPatchCopy",
            "move": "#/components/schemas/JsonPatchMove",
            "remove": "#/components/schemas/JsonPatchRemove",
            "replace": "#/components/schemas/JsonPatchReplace",
            "test": "#/components/schemas/JsonPatchTest"
          },
          "propertyName": "op"
        },
        "oneOf": [
          {
            "$ref": "#/components/schemas/JsonPatchAdd"
          },
          {
            "$ref": "#/components/schemas/JsonPatchCopy"
          },
          {
            "$ref": "#/components/schemas/JsonPatchMove"
          },
          {
            "$ref": "#/components/schemas/JsonPatchRemove"
          },
          {
            "$ref": "#/components/schemas/JsonPatchReplace"
          },
          {
            "$ref": "#/components/schemas/JsonPatchTest"
          }
        ],
        "title": "JsonPatchOperation"
      },
      "JsonPatchRemove": {
        "properties": {
          "old": {
            "anyOf": [
              {},
              {
                "type": "null"
              }
            ]
          },
          "op": {
            "enum": [
              "remove"
            ],
            "type": "string"
          },
          "path": {
            "type": "string"
          }
        },
        "required": [
          "path",
          "op"
        ],
        "title": "JsonPatchRemove",
        "type": "object"
      },
      "JsonPatchReplace": {
        "properties": {
          "old": {
            "anyOf": [
              {},
              {
                "type": "null"
              }
            ]
          },
          "op": {
            "enum": [
              "replace"
            ],
            "type": "string"
          },
          "path": {
            "type": "string"
          },
          "value": {}
        },
        "required": [
          "path",
          "value",
          "op"
        ],
        "title": "JsonPatchReplace",
        "type": "object"
      },
      "JsonPatchTest": {
        "properties": {
          "op": {
            "enum": [
              "test"
            ],
            "type": "string"
          },
          "path": {
            "type": "string"
          },
          "value": {}
        },
        "required": [
          "path",
          "value",
          "op"
        ],
        "title": "JsonPatchTest",
        "type": "object"
      },
      "Milestone": {
        "properties": {
          "createdAt": {
            "format": "date-time",
            "type": "string"
          },
          "date": {
            "format": "date",
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "id": {
            "format": "uuid",
            "type": "string"
          },
          "lastUpdatedAt": {
            "format": "date-time",
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "timezone": {
            "type": [
              "string",
              "null"
            ]
          },
          "workspaceId": {
            "format": "uuid",
            "type": "string"
          }
        },
        "required": [
          "id",
          "workspaceId",
          "name",
          "description",
          "date",
          "createdAt",
          "lastUpdatedAt"
        ],
        "title": "Milestone",
        "type": "object"
      },
      "MilestoneWithEmbed": {
        "properties": {
          "_embedded": {
            "type": "object"
          },
          "createdAt": {
            "format": "date-time",
            "type": "string"
          },
          "date": {
            "format": "date",
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "id": {
            "format": "uuid",
            "type": "string"
          },
          "lastUpdatedAt": {
            "format": "date-time",
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "timezone": {
            "type": [
              "string",
              "null"
            ]
          },
          "workspaceId": {
            "format": "uuid",
            "type": "string"
          }
        },
        "required": [
          "id",
          "workspaceId",
          "name",
          "description",
          "date",
          "createdAt",
          "lastUpdatedAt",
          "_embedded"
        ],
        "title": "MilestoneWithEmbed",
        "type": "object"
      },
      "MilestoneWithEmbedOrNullList": {
        "items": {
          "anyOf": [
            {
              "$ref": "#/components/schemas/MilestoneWithEmbed"
            },
            {
              "type": "null"
            }
          ]
        },
        "title": "MilestoneWithEmbedOrNullList",
        "type": "array"
      },
      "MilestoneWithEmbedPage": {
        "properties": {
          "items": {
            "items": {
              "$ref": "#/components/schemas/MilestoneWithEmbed"
            },
            "type": "array"
          },
          "totalItems": {
            "format": "int32",
            "type": "integer"
          }
        },
        "required": [
          "totalItems"
        ],
        "title": "MilestoneWithEmbedPage",
        "type": "object"
      },
      "MirrorSourceFieldWithFieldEmbed": {
        "properties": {
          "_embedded": {
            "$ref": "#/components/schemas/FieldEmbed"
          },
          "createdAt": {
            "format": "date-time",
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "id": {
            "format": "uuid",
            "type": "string"
          },
          "isTeamField": {
            "type": "boolean"
          },
          "name": {
            "type": "string"
          },
          "teamId": {
            "format": "uuid",
            "type": "string"
          },
          "typeId": {
            "type": "string"
          }
        },
        "required": [
          "id",
          "typeId",
          "name",
          "description",
          "isTeamField",
          "teamId",
          "createdAt",
          "_embedded"
        ],
        "title": "MirrorSourceFieldWithFieldEmbed",
        "type": "object"
      },
      "MirrorTargetFieldWithFieldEmbed": {
        "properties": {
          "_embedded": {
            "$ref": "#/components/schemas/FieldEmbed"
          },
          "createdAt": {
            "format": "date-time",
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "id": {
            "format": "uuid",
            "type": "string"
          },
          "isTeamField": {
            "type": "boolean"
          },
          "name": {
            "type": "string"
          },
          "teamId": {
            "format": "uuid",
            "type": "string"
          },
          "typeId": {
            "type": "string"
          }
        },
        "required": [
          "id",
          "typeId",
          "name",
          "description",
          "isTeamField",
          "teamId",
          "createdAt",
          "_embedded"
        ],
        "title": "MirrorTargetFieldWithFieldEmbed",
        "type": "object"
      },
      "NumberFieldTypeSettings": {
        "properties": {
          "maximum": {
            "type": [
              "number",
              "null"
            ]
          },
          "minimum": {
            "type": [
              "number",
              "null"
            ]
          },
          "overflow": {
            "type": "boolean"
          },
          "stepping": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/NumberFieldTypeSettingsStepping"
              },
              {
                "type": "null"
              }
            ]
          },
          "unit": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/NumberFieldTypeSettingsUnit"
              },
              {
                "type": "null"
              }
            ]
          }
        },
        "required": [
          "overflow"
        ],
        "title": "NumberFieldTypeSettings",
        "type": "object"
      },
      "NumberFieldTypeSettingsStepping": {
        "discriminator": {
          "mapping": {
            "equal": "#/components/schemas/NumberFieldTypeSettingsSteppingEqual",
            "exponential": "#/components/schemas/NumberFieldTypeSettingsSteppingExponential",
            "fibonacci": "io.airfocus.workspaceservice.extensions.fields.NumberFieldTypeSettings.Stepping.Fibonacci"
          },
          "propertyName": "type"
        },
        "oneOf": [
          {
            "$ref": "#/components/schemas/NumberFieldTypeSettingsSteppingEqual"
          },
          {
            "$ref": "#/components/schemas/NumberFieldTypeSettingsSteppingExponential"
          },
          {
            "type": "object"
          }
        ],
        "title": "NumberFieldTypeSettingsStepping"
      },
      "NumberFieldTypeSettingsSteppingEqual": {
        "properties": {
          "delta": {
            "type": "number"
          }
        },
        "required": [
          "delta"
        ],
        "title": "NumberFieldTypeSettingsSteppingEqual",
        "type": "object"
      },
      "NumberFieldTypeSettingsSteppingExponential": {
        "properties": {
          "factor": {
            "type": "number"
          }
        },
        "required": [
          "factor"
        ],
        "title": "NumberFieldTypeSettingsSteppingExponential",
        "type": "object"
      },
      "NumberFieldTypeSettingsUnit": {
        "discriminator": {
          "mapping": {
            "custom": "io.airfocus.workspaceservice.extensions.fields.NumberFieldTypeSettings.Unit.Custom",
            "money": "io.airfocus.workspaceservice.extensions.fields.NumberFieldTypeSettings.Unit.Money",
            "percent": "io.airfocus.workspaceservice.extensions.fields.NumberFieldTypeSettings.Unit.Percent",
            "storyPoints": "io.airfocus.workspaceservice.extensions.fields.NumberFieldTypeSettings.Unit.StoryPoints"
          },
          "propertyName": "type"
        },
        "oneOf": [
          {},
          {},
          {},
          {}
        ],
        "title": "NumberFieldTypeSettingsUnit"
      },
      "NumberFieldWithFieldEmbed": {
        "properties": {
          "_embedded": {
            "$ref": "#/components/schemas/FieldEmbed"
          },
          "createdAt": {
            "format": "date-time",
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "id": {
            "format": "uuid",
            "type": "string"
          },
          "isTeamField": {
            "type": "boolean"
          },
          "name": {
            "type": "string"
          },
          "settings": {
            "$ref": "#/components/schemas/NumberFieldTypeSettings"
          },
          "teamId": {
            "format": "uuid",
            "type": "string"
          },
          "typeId": {
            "type": "string"
          }
        },
        "required": [
          "id",
          "typeId",
          "settings",
          "name",
          "description",
          "isTeamField",
          "teamId",
          "createdAt",
          "_embedded"
        ],
        "title": "NumberFieldWithFieldEmbed",
        "type": "object"
      },
      "OkrCheckinsFieldWithFieldEmbed": {
        "properties": {
          "_embedded": {
            "$ref": "#/components/schemas/FieldEmbed"
          },
          "createdAt": {
            "format": "date-time",
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "id": {
            "format": "uuid",
            "type": "string"
          },
          "isTeamField": {
            "type": "boolean"
          },
          "name": {
            "type": "string"
          },
          "teamId": {
            "format": "uuid",
            "type": "string"
          },
          "typeId": {
            "type": "string"
          }
        },
        "required": [
          "id",
          "typeId",
          "name",
          "description",
          "isTeamField",
          "teamId",
          "createdAt",
          "_embedded"
        ],
        "title": "OkrCheckinsFieldWithFieldEmbed",
        "type": "object"
      },
      "OkrConfidenceFieldSettings": {
        "properties": {
          "low": {
            "format": "int32",
            "type": "integer"
          },
          "medium": {
            "format": "int32",
            "type": "integer"
          }
        },
        "required": [
          "low",
          "medium"
        ],
        "title": "OkrConfidenceFieldSettings",
        "type": "object"
      },
      "OkrConfidenceFieldWithFieldEmbed": {
        "properties": {
          "_embedded": {
            "$ref": "#/components/schemas/FieldEmbed"
          },
          "createdAt": {
            "format": "date-time",
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "id": {
            "format": "uuid",
            "type": "string"
          },
          "isTeamField": {
            "type": "boolean"
          },
          "name": {
            "type": "string"
          },
          "settings": {
            "$ref": "#/components/schemas/OkrConfidenceFieldSettings"
          },
          "teamId": {
            "format": "uuid",
            "type": "string"
          },
          "typeId": {
            "type": "string"
          }
        },
        "required": [
          "id",
          "typeId",
          "settings",
          "name",
          "description",
          "isTeamField",
          "teamId",
          "createdAt",
          "_embedded"
        ],
        "title": "OkrConfidenceFieldWithFieldEmbed",
        "type": "object"
      },
      "OkrKeyResultReferenceFieldWithFieldEmbed": {
        "properties": {
          "_embedded": {
            "$ref": "#/components/schemas/FieldEmbed"
          },
          "createdAt": {
            "format": "date-time",
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "id": {
            "format": "uuid",
            "type": "string"
          },
          "isTeamField": {
            "type": "boolean"
          },
          "name": {
            "type": "string"
          },
          "teamId": {
            "format": "uuid",
            "type": "string"
          },
          "typeId": {
            "type": "string"
          }
        },
        "required": [
          "id",
          "typeId",
          "name",
          "description",
          "isTeamField",
          "teamId",
          "createdAt",
          "_embedded"
        ],
        "title": "OkrKeyResultReferenceFieldWithFieldEmbed",
        "type": "object"
      },
      "OkrKeyResultsFieldWithFieldEmbed": {
        "properties": {
          "_embedded": {
            "$ref": "#/components/schemas/FieldEmbed"
          },
          "createdAt": {
            "format": "date-time",
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "id": {
            "format": "uuid",
            "type": "string"
          },
          "isTeamField": {
            "type": "boolean"
          },
          "name": {
            "type": "string"
          },
          "teamId": {
            "format": "uuid",
            "type": "string"
          },
          "typeId": {
            "type": "string"
          }
        },
        "required": [
          "id",
          "typeId",
          "name",
          "description",
          "isTeamField",
          "teamId",
          "createdAt",
          "_embedded"
        ],
        "title": "OkrKeyResultsFieldWithFieldEmbed",
        "type": "object"
      },
      "OkrProgressFieldWithFieldEmbed": {
        "properties": {
          "_embedded": {
            "$ref": "#/components/schemas/FieldEmbed"
          },
          "createdAt": {
            "format": "date-time",
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "id": {
            "format": "uuid",
            "type": "string"
          },
          "isTeamField": {
            "type": "boolean"
          },
          "name": {
            "type": "string"
          },
          "teamId": {
            "format": "uuid",
            "type": "string"
          },
          "typeId": {
            "type": "string"
          }
        },
        "required": [
          "id",
          "typeId",
          "name",
          "description",
          "isTeamField",
          "teamId",
          "createdAt",
          "_embedded"
        ],
        "title": "OkrProgressFieldWithFieldEmbed",
        "type": "object"
      },
      "OkrTimePeriodFieldSettings": {
        "properties": {
          "timePeriods": {
            "items": {
              "$ref": "#/components/schemas/TimePeriod"
            },
            "type": "array"
          }
        },
        "title": "OkrTimePeriodFieldSettings",
        "type": "object"
      },
      "OkrTimePeriodFieldWithFieldEmbed": {
        "properties": {
          "_embedded": {
            "$ref": "#/components/schemas/FieldEmbed"
          },
          "createdAt": {
            "format": "date-time",
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "id": {
            "format": "uuid",
            "type": "string"
          },
          "isTeamField": {
            "type": "boolean"
          },
          "name": {
            "type": "string"
          },
          "settings": {
            "$ref": "#/components/schemas/OkrTimePeriodFieldSettings"
          },
          "teamId": {
            "format": "uuid",
            "type": "string"
          },
          "typeId": {
            "type": "string"
          }
        },
        "required": [
          "id",
          "typeId",
          "settings",
          "name",
          "description",
          "isTeamField",
          "teamId",
          "createdAt",
          "_embedded"
        ],
        "title": "OkrTimePeriodFieldWithFieldEmbed",
        "type": "object"
      },
      "PeopleFieldTypeSettings": {
        "properties": {
          "autoAssign": {
            "type": "boolean"
          }
        },
        "required": [
          "autoAssign"
        ],
        "title": "PeopleFieldTypeSettings",
        "type": "object"
      },
      "PeopleFieldWithFieldEmbed": {
        "properties": {
          "_embedded": {
            "$ref": "#/components/schemas/FieldEmbed"
          },
          "createdAt": {
            "format": "date-time",
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "id": {
            "format": "uuid",
            "type": "string"
          },
          "isTeamField": {
            "type": "boolean"
          },
          "name": {
            "type": "string"
          },
          "settings": {
            "$ref": "#/components/schemas/PeopleFieldTypeSettings"
          },
          "teamId": {
            "format": "uuid",
            "type": "string"
          },
          "typeId": {
            "type": "string"
          }
        },
        "required": [
          "id",
          "typeId",
          "settings",
          "name",
          "description",
          "isTeamField",
          "teamId",
          "createdAt",
          "_embedded"
        ],
        "title": "PeopleFieldWithFieldEmbed",
        "type": "object"
      },
      "Permission": {
        "enum": [
          "comment",
          "full",
          "read",
          "write"
        ],
        "title": "Permission",
        "type": "string"
      },
      "PortalFieldWithFieldEmbed": {
        "properties": {
          "_embedded": {
            "$ref": "#/components/schemas/FieldEmbed"
          },
          "createdAt": {
            "format": "date-time",
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "id": {
            "format": "uuid",
            "type": "string"
          },
          "isTeamField": {
            "type": "boolean"
          },
          "name": {
            "type": "string"
          },
          "teamId": {
            "format": "uuid",
            "type": "string"
          },
          "typeId": {
            "type": "string"
          }
        },
        "required": [
          "id",
          "typeId",
          "name",
          "description",
          "isTeamField",
          "teamId",
          "createdAt",
          "_embedded"
        ],
        "title": "PortalFieldWithFieldEmbed",
        "type": "object"
      },
      "PrioritizationFieldWithFieldEmbed": {
        "properties": {
          "_embedded": {
            "$ref": "#/components/schemas/FieldEmbed"
          },
          "createdAt": {
            "format": "date-time",
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "id": {
            "format": "uuid",
            "type": "string"
          },
          "isTeamField": {
            "type": "boolean"
          },
          "name": {
            "type": "string"
          },
          "teamId": {
            "format": "uuid",
            "type": "string"
          },
          "typeId": {
            "type": "string"
          }
        },
        "required": [
          "id",
          "typeId",
          "name",
          "description",
          "isTeamField",
          "teamId",
          "createdAt",
          "_embedded"
        ],
        "title": "PrioritizationFieldWithFieldEmbed",
        "type": "object"
      },
      "Property": {
        "oneOf": [
          {
            "enum": [
              "archived",
              "assignees",
              "color",
              "description",
              "name",
              "status"
            ],
            "type": "string"
          },
          {
            "description": "A combination of 'fieldid:' prefix and a UUID field-id.",
            "pattern": "^fieldid:[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$",
            "type": "string"
          }
        ],
        "title": "Property"
      },
      "RichText": {
        "examples": [
          {
            "blocks": [
              {
                "content": [
                  {
                    "content": "Hello ",
                    "type": "text"
                  },
                  {
                    "content": [
                      {
                        "content": "world",
                        "type": "text"
                      }
                    ],
                    "type": "bold"
                  },
                  {
                    "content": "!",
                    "type": "text"
                  }
                ],
                "type": "paragraph"
              }
            ]
          }
        ],
        "properties": {
          "blocks": {
            "items": {
              "$ref": "#/components/schemas/RichTextBlock"
            },
            "type": "array"
          }
        },
        "title": "RichText",
        "type": "object"
      },
      "RichTextBlock": {
        "discriminator": {
          "mapping": {
            "attachment": "#/components/schemas/RichTextBlockAttachment",
            "blockquote": "#/components/schemas/RichTextBlockBlockquote",
            "code": "#/components/schemas/RichTextBlockCode",
            "custom": "#/components/schemas/RichTextBlockCustom",
            "embed": "#/components/schemas/RichTextBlockEmbed",
            "headline": "#/components/schemas/RichTextBlockHeadline",
            "indentation": "#/components/schemas/RichTextBlockIndentation",
            "list": "#/components/schemas/RichTextBlockList",
            "panel": "#/components/schemas/RichTextBlockPanel",
            "paragraph": "#/components/schemas/RichTextBlockParagraph"
          },
          "propertyName": "type"
        },
        "oneOf": [
          {
            "$ref": "#/components/schemas/RichTextBlockAttachment"
          },
          {
            "$ref": "#/components/schemas/RichTextBlockBlockquote"
          },
          {
            "$ref": "#/components/schemas/RichTextBlockCode"
          },
          {
            "$ref": "#/components/schemas/RichTextBlockCustom"
          },
          {
            "$ref": "#/components/schemas/RichTextBlockEmbed"
          },
          {
            "$ref": "#/components/schemas/RichTextBlockHeadline"
          },
          {
            "$ref": "#/components/schemas/RichTextBlockIndentation"
          },
          {
            "$ref": "#/components/schemas/RichTextBlockList"
          },
          {
            "$ref": "#/components/schemas/RichTextBlockPanel"
          },
          {
            "$ref": "#/components/schemas/RichTextBlockParagraph"
          }
        ],
        "title": "RichTextBlock"
      },
      "RichTextBlockAttachment": {
        "properties": {
          "attachmentId": {
            "format": "uuid",
            "type": "string"
          },
          "caption": {
            "type": [
              "string",
              "null"
            ]
          },
          "contentType": {
            "type": "string"
          },
          "width": {
            "format": "int32",
            "type": [
              "integer",
              "null"
            ]
          }
        },
        "required": [
          "attachmentId",
          "contentType"
        ],
        "title": "RichTextBlockAttachment",
        "type": "object"
      },
      "RichTextBlockBlockquote": {
        "properties": {
          "content": {
            "items": {
              "$ref": "#/components/schemas/RichTextInline"
            },
            "type": "array"
          }
        },
        "title": "RichTextBlockBlockquote",
        "type": "object"
      },
      "RichTextBlockCode": {
        "properties": {
          "content": {
            "type": "string"
          },
          "language": {
            "type": [
              "string",
              "null"
            ]
          }
        },
        "required": [
          "content"
        ],
        "title": "RichTextBlockCode",
        "type": "object"
      },
      "RichTextBlockCustom": {
        "properties": {
          "id": {
            "type": "string"
          },
          "raw": {
            "type": "string"
          }
        },
        "required": [
          "id",
          "raw"
        ],
        "title": "RichTextBlockCustom",
        "type": "object"
      },
      "RichTextBlockEmbed": {
        "properties": {
          "caption": {
            "type": [
              "string",
              "null"
            ]
          },
          "height": {
            "format": "int32",
            "type": [
              "integer",
              "null"
            ]
          },
          "url": {
            "type": "string"
          }
        },
        "required": [
          "url"
        ],
        "title": "RichTextBlockEmbed",
        "type": "object"
      },
      "RichTextBlockHeadline": {
        "properties": {
          "content": {
            "items": {
              "$ref": "#/components/schemas/RichTextInline"
            },
            "type": "array"
          },
          "level": {
            "format": "int32",
            "type": "integer"
          }
        },
        "required": [
          "level"
        ],
        "title": "RichTextBlockHeadline",
        "type": "object"
      },
      "RichTextBlockIndentation": {
        "properties": {
          "content": {
            "$ref": "#/components/schemas/RichTextBlock"
          }
        },
        "required": [
          "content"
        ],
        "title": "RichTextBlockIndentation",
        "type": "object"
      },
      "RichTextBlockList": {
        "properties": {
          "bulletListMarker": {
            "type": [
              "string",
              "null"
            ]
          },
          "items": {
            "items": {
              "$ref": "#/components/schemas/RichTextListItem"
            },
            "type": "array"
          },
          "ordered": {
            "type": "boolean"
          },
          "orderedListDelimiter": {
            "type": [
              "string",
              "null"
            ]
          },
          "orderedListStartsAt": {
            "format": "int32",
            "type": [
              "integer",
              "null"
            ]
          }
        },
        "required": [
          "ordered"
        ],
        "title": "RichTextBlockList",
        "type": "object"
      },
      "RichTextBlockPanel": {
        "properties": {
          "colorHex": {
            "type": "string"
          },
          "content": {
            "$ref": "#/components/schemas/RichTextBlock"
          }
        },
        "required": [
          "content",
          "colorHex"
        ],
        "title": "RichTextBlockPanel",
        "type": "object"
      },
      "RichTextBlockParagraph": {
        "properties": {
          "content": {
            "items": {
              "$ref": "#/components/schemas/RichTextInline"
            },
            "type": "array"
          }
        },
        "title": "RichTextBlockParagraph",
        "type": "object"
      },
      "RichTextInline": {
        "discriminator": {
          "mapping": {
            "bold": "#/components/schemas/RichTextInlineBold",
            "code": "#/components/schemas/RichTextInlineCode",
            "custom": "#/components/schemas/RichTextInlineCustom",
            "image": "#/components/schemas/RichTextInlineImage",
            "italic": "#/components/schemas/RichTextInlineItalic",
            "link": "#/components/schemas/RichTextInlineLink",
            "mention": "#/components/schemas/RichTextInlineMention",
            "strikeThrough": "#/components/schemas/RichTextInlineStrikeThrough",
            "text": "#/components/schemas/RichTextInlineText",
            "underline": "#/components/schemas/RichTextInlineUnderline"
          },
          "propertyName": "type"
        },
        "oneOf": [
          {
            "$ref": "#/components/schemas/RichTextInlineBold"
          },
          {
            "$ref": "#/components/schemas/RichTextInlineCode"
          },
          {
            "$ref": "#/components/schemas/RichTextInlineCustom"
          },
          {
            "$ref": "#/components/schemas/RichTextInlineImage"
          },
          {
            "$ref": "#/components/schemas/RichTextInlineItalic"
          },
          {
            "$ref": "#/components/schemas/RichTextInlineLink"
          },
          {
            "$ref": "#/components/schemas/RichTextInlineMention"
          },
          {
            "$ref": "#/components/schemas/RichTextInlineStrikeThrough"
          },
          {
            "$ref": "#/components/schemas/RichTextInlineText"
          },
          {
            "$ref": "#/components/schemas/RichTextInlineUnderline"
          }
        ],
        "title": "RichTextInline"
      },
      "RichTextInlineBold": {
        "properties": {
          "content": {
            "$ref": "#/components/schemas/RichTextInline"
          }
        },
        "required": [
          "content"
        ],
        "title": "RichTextInlineBold",
        "type": "object"
      },
      "RichTextInlineCode": {
        "properties": {
          "content": {
            "type": "string"
          }
        },
        "required": [
          "content"
        ],
        "title": "RichTextInlineCode",
        "type": "object"
      },
      "RichTextInlineCustom": {
        "properties": {
          "id": {
            "type": "string"
          },
          "raw": {
            "type": "string"
          }
        },
        "required": [
          "id",
          "raw"
        ],
        "title": "RichTextInlineCustom",
        "type": "object"
      },
      "RichTextInlineImage": {
        "properties": {
          "content": {
            "$ref": "#/components/schemas/RichTextInline"
          },
          "url": {
            "type": "string"
          }
        },
        "required": [
          "content",
          "url"
        ],
        "title": "RichTextInlineImage",
        "type": "object"
      },
      "RichTextInlineItalic": {
        "properties": {
          "content": {
            "$ref": "#/components/schemas/RichTextInline"
          }
        },
        "required": [
          "content"
        ],
        "title": "RichTextInlineItalic",
        "type": "object"
      },
      "RichTextInlineLink": {
        "properties": {
          "content": {
            "$ref": "#/components/schemas/RichTextInline"
          },
          "url": {
            "type": "string"
          }
        },
        "required": [
          "content",
          "url"
        ],
        "title": "RichTextInlineLink",
        "type": "object"
      },
      "RichTextInlineMention": {
        "properties": {
          "userId": {
            "format": "uuid",
            "type": "string"
          }
        },
        "required": [
          "userId"
        ],
        "title": "RichTextInlineMention",
        "type": "object"
      },
      "RichTextInlineStrikeThrough": {
        "properties": {
          "content": {
            "$ref": "#/components/schemas/RichTextInline"
          }
        },
        "required": [
          "content"
        ],
        "title": "RichTextInlineStrikeThrough",
        "type": "object"
      },
      "RichTextInlineText": {
        "properties": {
          "content": {
            "type": "string"
          }
        },
        "required": [
          "content"
        ],
        "title": "RichTextInlineText",
        "type": "object"
      },
      "RichTextInlineUnderline": {
        "properties": {
          "content": {
            "$ref": "#/components/schemas/RichTextInline"
          }
        },
        "required": [
          "content"
        ],
        "title": "RichTextInlineUnderline",
        "type": "object"
      },
      "RichTextListItem": {
        "properties": {
          "content": {
            "$ref": "#/components/schemas/RichTextBlock"
          }
        },
        "required": [
          "content"
        ],
        "title": "RichTextListItem",
        "type": "object"
      },
      "SelectFieldOptionColor": {
        "enum": [
          "blue",
          "coco",
          "daulphine",
          "great",
          "orange",
          "pink",
          "red",
          "violet",
          "yellow"
        ],
        "title": "SelectFieldOptionColor",
        "type": "string"
      },
      "SelectFieldTypeOption": {
        "properties": {
          "color": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/SelectFieldOptionColor"
              },
              {
                "type": "null"
              }
            ]
          },
          "default": {
            "type": "boolean"
          },
          "description": {
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "numericValue": {
            "type": [
              "number",
              "null"
            ]
          }
        },
        "required": [
          "id",
          "name",
          "description",
          "default"
        ],
        "title": "SelectFieldTypeOption",
        "type": "object"
      },
      "SelectFieldTypeSettings": {
        "properties": {
          "multi": {
            "type": "boolean"
          },
          "options": {
            "items": {
              "$ref": "#/components/schemas/SelectFieldTypeOption"
            },
            "type": "array"
          }
        },
        "required": [
          "multi"
        ],
        "title": "SelectFieldTypeSettings",
        "type": "object"
      },
      "SelectFieldWithFieldEmbed": {
        "properties": {
          "_embedded": {
            "$ref": "#/components/schemas/FieldEmbed"
          },
          "createdAt": {
            "format": "date-time",
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "id": {
            "format": "uuid",
            "type": "string"
          },
          "isTeamField": {
            "type": "boolean"
          },
          "name": {
            "type": "string"
          },
          "settings": {
            "$ref": "#/components/schemas/SelectFieldTypeSettings"
          },
          "teamId": {
            "format": "uuid",
            "type": "string"
          },
          "typeId": {
            "type": "string"
          }
        },
        "required": [
          "id",
          "typeId",
          "settings",
          "name",
          "description",
          "isTeamField",
          "teamId",
          "createdAt",
          "_embedded"
        ],
        "title": "SelectFieldWithFieldEmbed",
        "type": "object"
      },
      "Status": {
        "properties": {
          "category": {
            "$ref": "#/components/schemas/StatusCategory"
          },
          "color": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/StatusColor"
              },
              {
                "type": "null"
              }
            ]
          },
          "default": {
            "description": "Whether this status should be applied by default to newly created items. There can be only one default status in each workspace.",
            "type": "boolean"
          },
          "id": {
            "format": "uuid",
            "type": "string"
          },
          "name": {
            "description": "Name of this status in UI.",
            "type": "string"
          },
          "order": {
            "description": "Order of this status comparing to other statuses in the same workspace.",
            "format": "int32",
            "type": "integer"
          },
          "workspaceId": {
            "format": "uuid",
            "type": "string"
          }
        },
        "required": [
          "id",
          "workspaceId",
          "category",
          "name",
          "default",
          "order"
        ],
        "title": "Status",
        "type": "object"
      },
      "StatusCategory": {
        "description": "Status category adds some additional meaning to each status:\n- 'draft': only semantic meaning\n- 'active': only semantic meaning\n- 'closed': items with a status in this category will be considered as completed, which contributes to progress calculation (e.g. \"1/3 items completed\").",
        "enum": [
          "active",
          "closed",
          "draft"
        ],
        "title": "StatusCategory",
        "type": "string"
      },
      "StatusColor": {
        "description": "Color of a status-chip in UI.",
        "enum": [
          "blue",
          "coco",
          "daulphine",
          "great",
          "orange",
          "pink",
          "red",
          "violet",
          "yellow"
        ],
        "title": "StatusColor",
        "type": "string"
      },
      "Template": {
        "properties": {
          "abstract": {
            "type": "string"
          },
          "apps": {
            "items": {
              "$ref": "#/components/schemas/TemplateApp"
            },
            "type": "array"
          },
          "description": {
            "type": "string"
          },
          "featured": {
            "type": "boolean"
          },
          "id": {
            "type": "string"
          },
          "imageUrl": {
            "type": [
              "string",
              "null"
            ]
          },
          "name": {
            "type": "string"
          },
          "views": {
            "items": {
              "$ref": "#/components/schemas/TemplateView"
            },
            "type": "array"
          },
          "viewsSectionTitle": {
            "type": "string"
          },
          "workspacesCount": {
            "format": "int32",
            "type": "integer"
          }
        },
        "required": [
          "id",
          "name",
          "featured",
          "abstract",
          "description",
          "viewsSectionTitle",
          "workspacesCount"
        ],
        "title": "Template",
        "type": "object"
      },
      "TemplateApp": {
        "properties": {
          "description": {
            "type": [
              "string",
              "null"
            ]
          },
          "name": {
            "type": "string"
          },
          "typeId": {
            "type": "string"
          }
        },
        "required": [
          "typeId",
          "name"
        ],
        "title": "TemplateApp",
        "type": "object"
      },
      "TemplateCategory": {
        "properties": {
          "name": {
            "type": "string"
          },
          "slug": {
            "type": "string"
          },
          "templateIds": {
            "items": {
              "type": "string"
            },
            "type": "array"
          }
        },
        "required": [
          "slug",
          "name"
        ],
        "title": "TemplateCategory",
        "type": "object"
      },
      "TemplateEndpointsApplyTemplateRequest": {
        "properties": {
          "defaultPermission": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/Permission"
              },
              {
                "type": "null"
              }
            ]
          },
          "groupId": {
            "format": "uuid",
            "type": [
              "string",
              "null"
            ]
          },
          "name": {
            "type": [
              "string",
              "null"
            ]
          },
          "parameters": {
            "$ref": "#/components/schemas/TemplatesTemplateParameters"
          },
          "permissions": {
            "additionalProperties": {
              "$ref": "#/components/schemas/Permission"
            },
            "type": "object"
          }
        },
        "required": [
          "parameters",
          "permissions"
        ],
        "title": "TemplateEndpointsApplyTemplateRequest",
        "type": "object"
      },
      "TemplatePageWithEmbed": {
        "properties": {
          "_embedded": {
            "$ref": "#/components/schemas/TemplateSearchEmbed"
          },
          "items": {
            "items": {
              "$ref": "#/components/schemas/Template"
            },
            "type": "array"
          },
          "totalItems": {
            "format": "int32",
            "type": "integer"
          }
        },
        "required": [
          "_embedded",
          "totalItems"
        ],
        "title": "TemplatePageWithEmbed",
        "type": "object"
      },
      "TemplateSearchEmbed": {
        "properties": {
          "categories": {
            "items": {
              "$ref": "#/components/schemas/TemplateCategory"
            },
            "type": "array"
          }
        },
        "title": "TemplateSearchEmbed",
        "type": "object"
      },
      "TemplateView": {
        "properties": {
          "description": {
            "type": [
              "string",
              "null"
            ]
          },
          "iconName": {
            "type": [
              "string",
              "null"
            ]
          },
          "imageUrl": {
            "type": "string"
          },
          "name": {
            "type": "string"
          }
        },
        "required": [
          "name",
          "imageUrl"
        ],
        "title": "TemplateView",
        "type": "object"
      },
      "TemplatesTemplateParameters": {
        "properties": {
          "insightsTargetWorkspaceId": {
            "format": "uuid",
            "type": [
              "string",
              "null"
            ]
          }
        },
        "title": "TemplatesTemplateParameters",
        "type": "object"
      },
      "TextFieldWithFieldEmbed": {
        "properties": {
          "_embedded": {
            "$ref": "#/components/schemas/FieldEmbed"
          },
          "createdAt": {
            "format": "date-time",
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "id": {
            "format": "uuid",
            "type": "string"
          },
          "isTeamField": {
            "type": "boolean"
          },
          "name": {
            "type": "string"
          },
          "teamId": {
            "format": "uuid",
            "type": "string"
          },
          "typeId": {
            "type": "string"
          }
        },
        "required": [
          "id",
          "typeId",
          "name",
          "description",
          "isTeamField",
          "teamId",
          "createdAt",
          "_embedded"
        ],
        "title": "TextFieldWithFieldEmbed",
        "type": "object"
      },
      "TimePeriod": {
        "properties": {
          "endDate": {
            "format": "date",
            "type": "string"
          },
          "id": {
            "format": "uuid",
            "type": "string"
          },
          "label": {
            "type": "string"
          },
          "startDate": {
            "format": "date",
            "type": "string"
          }
        },
        "required": [
          "id",
          "label",
          "startDate",
          "endDate"
        ],
        "title": "TimePeriod",
        "type": "object"
      },
      "UpdateStatus": {
        "properties": {
          "category": {
            "$ref": "#/components/schemas/StatusCategory"
          },
          "color": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/StatusColor"
              },
              {
                "type": "null"
              }
            ]
          },
          "default": {
            "description": "Whether this status should be applied by default to newly created items. There can be only one default status in each workspace.",
            "type": "boolean"
          },
          "id": {
            "format": "uuid",
            "type": "string"
          },
          "name": {
            "description": "Name of this status in UI.",
            "type": "string"
          },
          "order": {
            "description": "Order of this status comparing to other statuses in the same workspace.",
            "format": "int32",
            "type": "integer"
          }
        },
        "required": [
          "id",
          "workspaceId",
          "category",
          "name",
          "default",
          "order"
        ],
        "title": "UpdateStatus",
        "type": "object"
      },
      "View": {
        "properties": {
          "description": {
            "type": "string"
          },
          "id": {
            "format": "uuid",
            "type": "string"
          },
          "itemFilter": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/ItemSearchQueryFilter"
              },
              {
                "type": "null"
              }
            ]
          },
          "name": {
            "type": "string"
          },
          "order": {
            "format": "int32",
            "type": "integer"
          },
          "pinnedToPosition": {
            "format": "int32",
            "type": [
              "integer",
              "null"
            ]
          },
          "privateOwnerId": {
            "format": "uuid",
            "type": [
              "string",
              "null"
            ]
          },
          "requiredPermission": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/Permission"
              },
              {
                "type": "null"
              }
            ]
          },
          "settings": {},
          "typeId": {
            "type": "string"
          },
          "workspaceId": {
            "format": "uuid",
            "type": "string"
          }
        },
        "required": [
          "id",
          "workspaceId",
          "typeId",
          "settings",
          "name",
          "description",
          "order"
        ],
        "title": "View",
        "type": "object"
      },
      "VotesFieldWithFieldEmbed": {
        "properties": {
          "_embedded": {
            "$ref": "#/components/schemas/FieldEmbed"
          },
          "createdAt": {
            "format": "date-time",
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "id": {
            "format": "uuid",
            "type": "string"
          },
          "isTeamField": {
            "type": "boolean"
          },
          "name": {
            "type": "string"
          },
          "teamId": {
            "format": "uuid",
            "type": "string"
          },
          "typeId": {
            "type": "string"
          }
        },
        "required": [
          "id",
          "typeId",
          "name",
          "description",
          "isTeamField",
          "teamId",
          "createdAt",
          "_embedded"
        ],
        "title": "VotesFieldWithFieldEmbed",
        "type": "object"
      },
      "VotingAppScoreFieldTypeSettings": {
        "properties": {
          "maximum": {
            "type": [
              "number",
              "null"
            ]
          },
          "minimum": {
            "type": [
              "number",
              "null"
            ]
          }
        },
        "title": "VotingAppScoreFieldTypeSettings",
        "type": "object"
      },
      "VotingScoreFieldWithFieldEmbed": {
        "properties": {
          "_embedded": {
            "$ref": "#/components/schemas/FieldEmbed"
          },
          "createdAt": {
            "format": "date-time",
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "id": {
            "format": "uuid",
            "type": "string"
          },
          "isTeamField": {
            "type": "boolean"
          },
          "name": {
            "type": "string"
          },
          "settings": {
            "$ref": "#/components/schemas/VotingAppScoreFieldTypeSettings"
          },
          "teamId": {
            "format": "uuid",
            "type": "string"
          },
          "typeId": {
            "type": "string"
          }
        },
        "required": [
          "id",
          "typeId",
          "settings",
          "name",
          "description",
          "isTeamField",
          "teamId",
          "createdAt",
          "_embedded"
        ],
        "title": "VotingScoreFieldWithFieldEmbed",
        "type": "object"
      },
      "Workspace": {
        "properties": {
          "alias": {
            "type": [
              "string",
              "null"
            ]
          },
          "archived": {
            "type": "boolean"
          },
          "createdAt": {
            "format": "date-time",
            "type": "string"
          },
          "defaultPermission": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/Permission"
              },
              {
                "type": "null"
              }
            ]
          },
          "description": {
            "$ref": "#/components/schemas/RichText"
          },
          "id": {
            "format": "uuid",
            "type": "string"
          },
          "itemColor": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/ItemColor"
              },
              {
                "type": "null"
              }
            ]
          },
          "itemType": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/ItemType"
              },
              {
                "type": "null"
              }
            ]
          },
          "lastUpdatedAt": {
            "format": "date-time",
            "type": "string"
          },
          "legacyId": {
            "type": [
              "string",
              "null"
            ]
          },
          "metadata": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/WorkspaceWorkspaceMetadata"
              },
              {
                "type": "null"
              }
            ]
          },
          "name": {
            "type": "string"
          },
          "namespace": {
            "$ref": "#/components/schemas/WorkspaceNamespace"
          },
          "progressMode": {
            "$ref": "#/components/schemas/WorkspaceProgressMode"
          },
          "teamId": {
            "format": "uuid",
            "type": "string"
          }
        },
        "required": [
          "id",
          "teamId",
          "name",
          "description",
          "progressMode",
          "archived",
          "createdAt",
          "lastUpdatedAt",
          "namespace"
        ],
        "title": "Workspace",
        "type": "object"
      },
      "WorkspaceBulkAction": {
        "discriminator": {
          "mapping": {
            "create": "#/components/schemas/WorkspaceBulkCreate",
            "delete": "#/components/schemas/WorkspaceBulkDelete",
            "patch": "#/components/schemas/WorkspaceBulkPatch",
            "update": "#/components/schemas/WorkspaceBulkUpdate"
          },
          "propertyName": "type"
        },
        "oneOf": [
          {
            "$ref": "#/components/schemas/WorkspaceBulkCreate"
          },
          {
            "$ref": "#/components/schemas/WorkspaceBulkDelete"
          },
          {
            "$ref": "#/components/schemas/WorkspaceBulkPatch"
          },
          {
            "$ref": "#/components/schemas/WorkspaceBulkUpdate"
          }
        ],
        "title": "WorkspaceBulkAction"
      },
      "WorkspaceBulkCreate": {
        "properties": {
          "resource": {
            "$ref": "#/components/schemas/Workspace"
          },
          "type": {
            "enum": [
              "create"
            ],
            "type": "string"
          }
        },
        "required": [
          "resource",
          "type"
        ],
        "title": "WorkspaceBulkCreate",
        "type": "object"
      },
      "WorkspaceBulkDelete": {
        "properties": {
          "id": {
            "format": "uuid",
            "type": "string"
          },
          "type": {
            "enum": [
              "delete"
            ],
            "type": "string"
          }
        },
        "required": [
          "id",
          "type"
        ],
        "title": "WorkspaceBulkDelete",
        "type": "object"
      },
      "WorkspaceBulkPatch": {
        "properties": {
          "id": {
            "format": "uuid",
            "type": "string"
          },
          "transform": {
            "$ref": "#/components/schemas/JsonPatch"
          },
          "type": {
            "enum": [
              "patch"
            ],
            "type": "string"
          }
        },
        "required": [
          "id",
          "transform",
          "type"
        ],
        "title": "WorkspaceBulkPatch",
        "type": "object"
      },
      "WorkspaceBulkUpdate": {
        "properties": {
          "id": {
            "format": "uuid",
            "type": "string"
          },
          "resource": {
            "$ref": "#/components/schemas/Workspace"
          },
          "type": {
            "enum": [
              "update"
            ],
            "type": "string"
          }
        },
        "required": [
          "id",
          "resource",
          "type"
        ],
        "title": "WorkspaceBulkUpdate",
        "type": "object"
      },
      "WorkspaceEmbed": {
        "properties": {
          "apps": {
            "additionalProperties": {
              "$ref": "#/components/schemas/App"
            },
            "type": "object"
          },
          "children": {
            "items": {
              "$ref": "#/components/schemas/WorkspaceEmbedRelation"
            },
            "type": "array"
          },
          "currentPermission": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/Permission"
              },
              {
                "type": "null"
              }
            ]
          },
          "fields": {
            "additionalProperties": {
              "$ref": "#/components/schemas/FieldWithFieldEmbed"
            },
            "type": "object"
          },
          "integrations": {
            "additionalProperties": {
              "$ref": "#/components/schemas/IntegrationSummary"
            },
            "type": "object"
          },
          "itemCount": {
            "format": "int32",
            "type": "integer"
          },
          "itemStatusCount": {
            "additionalProperties": {
              "format": "int32",
              "type": "integer"
            },
            "type": "object"
          },
          "itemStatusCountArchived": {
            "additionalProperties": {
              "format": "int32",
              "type": "integer"
            },
            "type": "object"
          },
          "parents": {
            "items": {
              "$ref": "#/components/schemas/WorkspaceEmbedRelation"
            },
            "type": "array"
          },
          "permissions": {
            "additionalProperties": {
              "$ref": "#/components/schemas/Permission"
            },
            "type": "object"
          },
          "statuses": {
            "additionalProperties": {
              "$ref": "#/components/schemas/Status"
            },
            "type": "object"
          },
          "views": {
            "additionalProperties": {
              "$ref": "#/components/schemas/View"
            },
            "type": "object"
          }
        },
        "required": [
          "permissions",
          "itemCount",
          "statuses",
          "itemStatusCount",
          "itemStatusCountArchived",
          "fields",
          "views",
          "integrations",
          "apps"
        ],
        "title": "WorkspaceEmbed",
        "type": "object"
      },
      "WorkspaceEmbedRelation": {
        "properties": {
          "relationId": {
            "format": "uuid",
            "type": "string"
          },
          "workspace": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/Workspace"
              },
              {
                "type": "null"
              }
            ]
          },
          "workspaceId": {
            "format": "uuid",
            "type": "string"
          }
        },
        "required": [
          "relationId",
          "workspaceId"
        ],
        "title": "WorkspaceEmbedRelation",
        "type": "object"
      },
      "WorkspaceEndpointsSetStatusesRequest": {
        "properties": {
          "replacements": {
            "additionalProperties": {
              "format": "uuid",
              "type": "string"
            },
            "description": "A map of status replacements, where key is and OLD status-id and value is a NEW status-id. Replacements must be specified for each status being deleted from the workspace.This mapping will be used to migrate all items in the workspace to new statuses before deleting the old ones.",
            "type": "object"
          },
          "statuses": {
            "items": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/CreateStatus"
                },
                {
                  "$ref": "#/components/schemas/UpdateStatus"
                }
              ]
            },
            "type": "array"
          }
        },
        "required": [
          "replacements"
        ],
        "title": "WorkspaceEndpointsSetStatusesRequest",
        "type": "object"
      },
      "WorkspaceEndpointsWorkspaceDuplicateRequest": {
        "properties": {
          "duplicatePermissions": {
            "description": "Whether to also duplicate all user-permissions to the new workspace.",
            "type": "boolean"
          }
        },
        "required": [
          "duplicatePermissions"
        ],
        "title": "WorkspaceEndpointsWorkspaceDuplicateRequest",
        "type": "object"
      },
      "WorkspaceEndpointsWorkspacePermissionsUpdateRequest": {
        "properties": {
          "defaultPermission": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/Permission"
              },
              {
                "type": "null"
              }
            ],
            "description": "Default permission for all users in the team who are not explicitly listed in the `permissions` map."
          },
          "permissions": {
            "additionalProperties": {
              "$ref": "#/components/schemas/Permission"
            },
            "description": "Explicit permissions for specific users in the team.",
            "type": "object"
          }
        },
        "required": [
          "permissions"
        ],
        "title": "WorkspaceEndpointsWorkspacePermissionsUpdateRequest",
        "type": "object"
      },
      "WorkspaceGroup": {
        "properties": {
          "createdAt": {
            "format": "date-time",
            "type": "string"
          },
          "defaultPermission": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/Permission"
              },
              {
                "type": "null"
              }
            ]
          },
          "id": {
            "format": "uuid",
            "type": "string"
          },
          "lastUpdatedAt": {
            "format": "date-time",
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "teamId": {
            "format": "uuid",
            "type": "string"
          }
        },
        "required": [
          "id",
          "teamId",
          "name",
          "createdAt",
          "lastUpdatedAt"
        ],
        "title": "WorkspaceGroup",
        "type": "object"
      },
      "WorkspaceGroupAssignWorkspaceRequest": {
        "properties": {
          "workspaceGroupId": {
            "format": "uuid",
            "type": [
              "string",
              "null"
            ]
          },
          "workspaceId": {
            "format": "uuid",
            "type": "string"
          }
        },
        "required": [
          "workspaceId"
        ],
        "title": "WorkspaceGroupAssignWorkspaceRequest",
        "type": "object"
      },
      "WorkspaceGroupBulkAction": {
        "discriminator": {
          "mapping": {
            "create": "#/components/schemas/WorkspaceGroupBulkCreate",
            "delete": "#/components/schemas/WorkspaceGroupBulkDelete",
            "patch": "#/components/schemas/WorkspaceGroupBulkPatch",
            "update": "#/components/schemas/WorkspaceGroupBulkUpdate"
          },
          "propertyName": "type"
        },
        "oneOf": [
          {
            "$ref": "#/components/schemas/WorkspaceGroupBulkCreate"
          },
          {
            "$ref": "#/components/schemas/WorkspaceGroupBulkDelete"
          },
          {
            "$ref": "#/components/schemas/WorkspaceGroupBulkPatch"
          },
          {
            "$ref": "#/components/schemas/WorkspaceGroupBulkUpdate"
          }
        ],
        "title": "WorkspaceGroupBulkAction"
      },
      "WorkspaceGroupBulkCreate": {
        "properties": {
          "resource": {
            "$ref": "#/components/schemas/WorkspaceGroup"
          },
          "type": {
            "enum": [
              "create"
            ],
            "type": "string"
          }
        },
        "required": [
          "resource",
          "type"
        ],
        "title": "WorkspaceGroupBulkCreate",
        "type": "object"
      },
      "WorkspaceGroupBulkDelete": {
        "properties": {
          "id": {
            "format": "uuid",
            "type": "string"
          },
          "type": {
            "enum": [
              "delete"
            ],
            "type": "string"
          }
        },
        "required": [
          "id",
          "type"
        ],
        "title": "WorkspaceGroupBulkDelete",
        "type": "object"
      },
      "WorkspaceGroupBulkPatch": {
        "properties": {
          "id": {
            "format": "uuid",
            "type": "string"
          },
          "transform": {
            "$ref": "#/components/schemas/JsonPatch"
          },
          "type": {
            "enum": [
              "patch"
            ],
            "type": "string"
          }
        },
        "required": [
          "id",
          "transform",
          "type"
        ],
        "title": "WorkspaceGroupBulkPatch",
        "type": "object"
      },
      "WorkspaceGroupBulkUpdate": {
        "properties": {
          "id": {
            "format": "uuid",
            "type": "string"
          },
          "resource": {
            "$ref": "#/components/schemas/WorkspaceGroup"
          },
          "type": {
            "enum": [
              "update"
            ],
            "type": "string"
          }
        },
        "required": [
          "id",
          "resource",
          "type"
        ],
        "title": "WorkspaceGroupBulkUpdate",
        "type": "object"
      },
      "WorkspaceGroupEmbed": {
        "properties": {
          "currentPermission": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/Permission"
              },
              {
                "type": "null"
              }
            ]
          },
          "permissions": {
            "additionalProperties": {
              "$ref": "#/components/schemas/Permission"
            },
            "type": "object"
          },
          "workspaces": {
            "items": {
              "$ref": "#/components/schemas/Workspace"
            },
            "type": "array"
          }
        },
        "required": [
          "permissions"
        ],
        "title": "WorkspaceGroupEmbed",
        "type": "object"
      },
      "WorkspaceGroupPermissionsUpdateRequest": {
        "properties": {
          "permissions": {
            "additionalProperties": {
              "$ref": "#/components/schemas/Permission"
            },
            "type": "object"
          }
        },
        "required": [
          "permissions"
        ],
        "title": "WorkspaceGroupPermissionsUpdateRequest",
        "type": "object"
      },
      "WorkspaceGroupWithWorkspaceGroupEmbed": {
        "properties": {
          "_embedded": {
            "$ref": "#/components/schemas/WorkspaceGroupEmbed"
          },
          "createdAt": {
            "format": "date-time",
            "type": "string"
          },
          "defaultPermission": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/Permission"
              },
              {
                "type": "null"
              }
            ]
          },
          "id": {
            "format": "uuid",
            "type": "string"
          },
          "lastUpdatedAt": {
            "format": "date-time",
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "teamId": {
            "format": "uuid",
            "type": "string"
          }
        },
        "required": [
          "id",
          "teamId",
          "name",
          "createdAt",
          "lastUpdatedAt",
          "_embedded"
        ],
        "title": "WorkspaceGroupWithWorkspaceGroupEmbed",
        "type": "object"
      },
      "WorkspaceGroupWithWorkspaceGroupEmbedOrNullList": {
        "items": {
          "anyOf": [
            {
              "$ref": "#/components/schemas/WorkspaceGroupWithWorkspaceGroupEmbed"
            },
            {
              "type": "null"
            }
          ]
        },
        "title": "WorkspaceGroupWithWorkspaceGroupEmbedOrNullList",
        "type": "array"
      },
      "WorkspaceGroupWithWorkspaceGroupEmbedPage": {
        "properties": {
          "items": {
            "items": {
              "$ref": "#/components/schemas/WorkspaceGroupWithWorkspaceGroupEmbed"
            },
            "type": "array"
          },
          "totalItems": {
            "format": "int32",
            "type": "integer"
          }
        },
        "required": [
          "totalItems"
        ],
        "title": "WorkspaceGroupWithWorkspaceGroupEmbedPage",
        "type": "object"
      },
      "WorkspaceNamespace": {
        "enum": [
          "main",
          "app:okr"
        ],
        "title": "WorkspaceNamespace",
        "type": "string"
      },
      "WorkspaceProgressMode": {
        "enum": [
          "count",
          "none",
          "percentage"
        ],
        "title": "WorkspaceProgressMode",
        "type": "string"
      },
      "WorkspaceRelation": {
        "properties": {
          "childId": {
            "format": "uuid",
            "type": "string"
          },
          "id": {
            "format": "uuid",
            "type": "string"
          },
          "parentId": {
            "format": "uuid",
            "type": "string"
          }
        },
        "required": [
          "id",
          "parentId",
          "childId"
        ],
        "title": "WorkspaceRelation",
        "type": "object"
      },
      "WorkspaceRelationBulkAction": {
        "discriminator": {
          "mapping": {
            "create": "#/components/schemas/WorkspaceRelationBulkCreate",
            "delete": "#/components/schemas/WorkspaceRelationBulkDelete",
            "patch": "#/components/schemas/WorkspaceRelationBulkPatch",
            "update": "#/components/schemas/WorkspaceRelationBulkUpdate"
          },
          "propertyName": "type"
        },
        "oneOf": [
          {
            "$ref": "#/components/schemas/WorkspaceRelationBulkCreate"
          },
          {
            "$ref": "#/components/schemas/WorkspaceRelationBulkDelete"
          },
          {
            "$ref": "#/components/schemas/WorkspaceRelationBulkPatch"
          },
          {
            "$ref": "#/components/schemas/WorkspaceRelationBulkUpdate"
          }
        ],
        "title": "WorkspaceRelationBulkAction"
      },
      "WorkspaceRelationBulkCreate": {
        "properties": {
          "resource": {
            "$ref": "#/components/schemas/WorkspaceRelation"
          },
          "type": {
            "enum": [
              "create"
            ],
            "type": "string"
          }
        },
        "required": [
          "resource",
          "type"
        ],
        "title": "WorkspaceRelationBulkCreate",
        "type": "object"
      },
      "WorkspaceRelationBulkDelete": {
        "properties": {
          "id": {
            "format": "uuid",
            "type": "string"
          },
          "type": {
            "enum": [
              "delete"
            ],
            "type": "string"
          }
        },
        "required": [
          "id",
          "type"
        ],
        "title": "WorkspaceRelationBulkDelete",
        "type": "object"
      },
      "WorkspaceRelationBulkPatch": {
        "properties": {
          "id": {
            "format": "uuid",
            "type": "string"
          },
          "transform": {
            "$ref": "#/components/schemas/JsonPatch"
          },
          "type": {
            "enum": [
              "patch"
            ],
            "type": "string"
          }
        },
        "required": [
          "id",
          "transform",
          "type"
        ],
        "title": "WorkspaceRelationBulkPatch",
        "type": "object"
      },
      "WorkspaceRelationBulkUpdate": {
        "properties": {
          "id": {
            "format": "uuid",
            "type": "string"
          },
          "resource": {
            "$ref": "#/components/schemas/WorkspaceRelation"
          },
          "type": {
            "enum": [
              "update"
            ],
            "type": "string"
          }
        },
        "required": [
          "id",
          "resource",
          "type"
        ],
        "title": "WorkspaceRelationBulkUpdate",
        "type": "object"
      },
      "WorkspaceRelationSearchQuery": {
        "properties": {
          "filter": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/WorkspaceRelationSearchQueryFilter"
              },
              {
                "type": "null"
              }
            ]
          }
        },
        "title": "WorkspaceRelationSearchQuery",
        "type": "object"
      },
      "WorkspaceRelationSearchQueryFilter": {
        "discriminator": {
          "mapping": {
            "and": "#/components/schemas/WorkspaceRelationSearchQueryFilterAnd",
            "child": "#/components/schemas/WorkspaceRelationSearchQueryFilterChild",
            "not": "#/components/schemas/WorkspaceRelationSearchQueryFilterNot",
            "or": "#/components/schemas/WorkspaceRelationSearchQueryFilterOr",
            "parent": "#/components/schemas/WorkspaceRelationSearchQueryFilterParent"
          },
          "propertyName": "type"
        },
        "oneOf": [
          {
            "$ref": "#/components/schemas/WorkspaceRelationSearchQueryFilterAnd"
          },
          {
            "$ref": "#/components/schemas/WorkspaceRelationSearchQueryFilterChild"
          },
          {
            "$ref": "#/components/schemas/WorkspaceRelationSearchQueryFilterNot"
          },
          {
            "$ref": "#/components/schemas/WorkspaceRelationSearchQueryFilterOr"
          },
          {
            "$ref": "#/components/schemas/WorkspaceRelationSearchQueryFilterParent"
          }
        ],
        "title": "WorkspaceRelationSearchQueryFilter"
      },
      "WorkspaceRelationSearchQueryFilterAnd": {
        "properties": {
          "inner": {
            "$ref": "#/components/schemas/WorkspaceRelationSearchQueryFilter"
          }
        },
        "required": [
          "inner"
        ],
        "title": "WorkspaceRelationSearchQueryFilterAnd",
        "type": "object"
      },
      "WorkspaceRelationSearchQueryFilterChild": {
        "discriminator": {
          "mapping": {
            "containAny": "#/components/schemas/WorkspaceRelationSearchQueryFilterChildContainAny",
            "equal": "#/components/schemas/WorkspaceRelationSearchQueryFilterChildEqual"
          },
          "propertyName": "mode"
        },
        "oneOf": [
          {
            "$ref": "#/components/schemas/WorkspaceRelationSearchQueryFilterChildContainAny"
          },
          {
            "$ref": "#/components/schemas/WorkspaceRelationSearchQueryFilterChildEqual"
          }
        ],
        "title": "WorkspaceRelationSearchQueryFilterChild"
      },
      "WorkspaceRelationSearchQueryFilterChildContainAny": {
        "properties": {
          "workspaceIds": {
            "items": {
              "format": "uuid",
              "type": "string"
            },
            "type": "array",
            "uniqueItems": true
          }
        },
        "title": "WorkspaceRelationSearchQueryFilterChildContainAny",
        "type": "object"
      },
      "WorkspaceRelationSearchQueryFilterChildEqual": {
        "properties": {
          "workspaceId": {
            "format": "uuid",
            "type": "string"
          }
        },
        "required": [
          "workspaceId"
        ],
        "title": "WorkspaceRelationSearchQueryFilterChildEqual",
        "type": "object"
      },
      "WorkspaceRelationSearchQueryFilterNot": {
        "properties": {
          "inner": {
            "$ref": "#/components/schemas/WorkspaceRelationSearchQueryFilter"
          }
        },
        "required": [
          "inner"
        ],
        "title": "WorkspaceRelationSearchQueryFilterNot",
        "type": "object"
      },
      "WorkspaceRelationSearchQueryFilterOr": {
        "properties": {
          "inner": {
            "$ref": "#/components/schemas/WorkspaceRelationSearchQueryFilter"
          }
        },
        "required": [
          "inner"
        ],
        "title": "WorkspaceRelationSearchQueryFilterOr",
        "type": "object"
      },
      "WorkspaceRelationSearchQueryFilterParent": {
        "discriminator": {
          "mapping": {
            "containAny": "#/components/schemas/WorkspaceRelationSearchQueryFilterParentContainAny",
            "equal": "#/components/schemas/WorkspaceRelationSearchQueryFilterParentEqual"
          },
          "propertyName": "mode"
        },
        "oneOf": [
          {
            "$ref": "#/components/schemas/WorkspaceRelationSearchQueryFilterParentContainAny"
          },
          {
            "$ref": "#/components/schemas/WorkspaceRelationSearchQueryFilterParentEqual"
          }
        ],
        "title": "WorkspaceRelationSearchQueryFilterParent"
      },
      "WorkspaceRelationSearchQueryFilterParentContainAny": {
        "properties": {
          "workspaceIds": {
            "items": {
              "format": "uuid",
              "type": "string"
            },
            "type": "array",
            "uniqueItems": true
          }
        },
        "title": "WorkspaceRelationSearchQueryFilterParentContainAny",
        "type": "object"
      },
      "WorkspaceRelationSearchQueryFilterParentEqual": {
        "properties": {
          "workspaceId": {
            "format": "uuid",
            "type": "string"
          }
        },
        "required": [
          "workspaceId"
        ],
        "title": "WorkspaceRelationSearchQueryFilterParentEqual",
        "type": "object"
      },
      "WorkspaceRelationWithEmbed": {
        "properties": {
          "_embedded": {
            "type": "object"
          },
          "childId": {
            "format": "uuid",
            "type": "string"
          },
          "id": {
            "format": "uuid",
            "type": "string"
          },
          "parentId": {
            "format": "uuid",
            "type": "string"
          }
        },
        "required": [
          "id",
          "parentId",
          "childId",
          "_embedded"
        ],
        "title": "WorkspaceRelationWithEmbed",
        "type": "object"
      },
      "WorkspaceRelationWithEmbedOrNullList": {
        "items": {
          "anyOf": [
            {
              "$ref": "#/components/schemas/WorkspaceRelationWithEmbed"
            },
            {
              "type": "null"
            }
          ]
        },
        "title": "WorkspaceRelationWithEmbedOrNullList",
        "type": "array"
      },
      "WorkspaceRelationWithEmbedPage": {
        "properties": {
          "items": {
            "items": {
              "$ref": "#/components/schemas/WorkspaceRelationWithEmbed"
            },
            "type": "array"
          },
          "totalItems": {
            "format": "int32",
            "type": "integer"
          }
        },
        "required": [
          "totalItems"
        ],
        "title": "WorkspaceRelationWithEmbedPage",
        "type": "object"
      },
      "WorkspaceRelationsSetRequest": {
        "properties": {
          "childIds": {
            "items": {
              "format": "uuid",
              "type": "string"
            },
            "type": "array",
            "uniqueItems": true
          },
          "parentIds": {
            "items": {
              "format": "uuid",
              "type": "string"
            },
            "type": "array",
            "uniqueItems": true
          },
          "workspaceId": {
            "format": "uuid",
            "type": "string"
          }
        },
        "required": [
          "workspaceId"
        ],
        "title": "WorkspaceRelationsSetRequest",
        "type": "object"
      },
      "WorkspaceSearchEmbed": {
        "properties": {
          "currentPermission": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/Permission"
              },
              {
                "type": "null"
              }
            ]
          },
          "itemCount": {
            "format": "int32",
            "type": "integer"
          },
          "permissions": {
            "additionalProperties": {
              "$ref": "#/components/schemas/Permission"
            },
            "type": "object"
          },
          "statuses": {
            "additionalProperties": {
              "$ref": "#/components/schemas/Status"
            },
            "type": "object"
          }
        },
        "required": [
          "permissions",
          "statuses",
          "itemCount"
        ],
        "title": "WorkspaceSearchEmbed",
        "type": "object"
      },
      "WorkspaceSearchQuery": {
        "properties": {
          "archived": {
            "type": "boolean"
          },
          "filter": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/WorkspaceSearchQueryFilter"
              },
              {
                "type": "null"
              }
            ]
          },
          "sort": {
            "$ref": "#/components/schemas/WorkspaceSearchQuerySort"
          }
        },
        "required": [
          "sort",
          "archived"
        ],
        "title": "WorkspaceSearchQuery",
        "type": "object"
      },
      "WorkspaceSearchQueryFilter": {
        "oneOf": [
          {
            "$ref": "#/components/schemas/WorkspaceSearchQueryFilterAnd"
          },
          {
            "$ref": "#/components/schemas/WorkspaceSearchQueryFilterMembersContainAny"
          },
          {
            "$ref": "#/components/schemas/WorkspaceSearchQueryFilterNameContain"
          },
          {
            "$ref": "#/components/schemas/WorkspaceSearchQueryFilterNameEqual"
          },
          {
            "$ref": "#/components/schemas/WorkspaceSearchQueryFilterNamespaceContainAny"
          },
          {
            "$ref": "#/components/schemas/WorkspaceSearchQueryFilterNot"
          },
          {
            "$ref": "#/components/schemas/WorkspaceSearchQueryFilterOr"
          }
        ],
        "title": "WorkspaceSearchQueryFilter"
      },
      "WorkspaceSearchQueryFilterAnd": {
        "properties": {
          "inner": {
            "items": {
              "$ref": "#/components/schemas/WorkspaceSearchQueryFilter"
            },
            "type": "array"
          }
        },
        "title": "WorkspaceSearchQueryFilterAnd",
        "type": "object"
      },
      "WorkspaceSearchQueryFilterMembersContainAny": {
        "properties": {
          "ids": {
            "items": {
              "format": "uuid",
              "type": "string"
            },
            "type": "array",
            "uniqueItems": true
          }
        },
        "title": "WorkspaceSearchQueryFilterMembersContainAny",
        "type": "object"
      },
      "WorkspaceSearchQueryFilterNameContain": {
        "properties": {
          "caseSensitive": {
            "type": "boolean"
          },
          "text": {
            "type": "string"
          }
        },
        "required": [
          "text",
          "caseSensitive"
        ],
        "title": "WorkspaceSearchQueryFilterNameContain",
        "type": "object"
      },
      "WorkspaceSearchQueryFilterNameEqual": {
        "properties": {
          "caseSensitive": {
            "type": "boolean"
          },
          "text": {
            "type": "string"
          }
        },
        "required": [
          "text",
          "caseSensitive"
        ],
        "title": "WorkspaceSearchQueryFilterNameEqual",
        "type": "object"
      },
      "WorkspaceSearchQueryFilterNamespaceContainAny": {
        "properties": {
          "values": {
            "items": {
              "$ref": "#/components/schemas/WorkspaceNamespace"
            },
            "type": "array"
          }
        },
        "title": "WorkspaceSearchQueryFilterNamespaceContainAny",
        "type": "object"
      },
      "WorkspaceSearchQueryFilterNot": {
        "properties": {
          "inner": {
            "$ref": "#/components/schemas/WorkspaceSearchQueryFilter"
          }
        },
        "required": [
          "inner"
        ],
        "title": "WorkspaceSearchQueryFilterNot",
        "type": "object"
      },
      "WorkspaceSearchQueryFilterOr": {
        "properties": {
          "inner": {
            "items": {
              "$ref": "#/components/schemas/WorkspaceSearchQueryFilter"
            },
            "type": "array"
          }
        },
        "title": "WorkspaceSearchQueryFilterOr",
        "type": "object"
      },
      "WorkspaceSearchQuerySort": {
        "discriminator": {
          "mapping": {
            "createdAt": "#/components/schemas/WorkspaceSearchQuerySortCreatedAt",
            "lastUpdatedAt": "#/components/schemas/WorkspaceSearchQuerySortLastUpdatedAt",
            "name": "#/components/schemas/WorkspaceSearchQuerySortName"
          },
          "propertyName": "type"
        },
        "oneOf": [
          {
            "$ref": "#/components/schemas/WorkspaceSearchQuerySortCreatedAt"
          },
          {
            "$ref": "#/components/schemas/WorkspaceSearchQuerySortLastUpdatedAt"
          },
          {
            "$ref": "#/components/schemas/WorkspaceSearchQuerySortName"
          }
        ],
        "title": "WorkspaceSearchQuerySort"
      },
      "WorkspaceSearchQuerySortCreatedAt": {
        "properties": {
          "direction": {
            "$ref": "#/components/schemas/WorkspaceSearchQuerySortDirection"
          }
        },
        "required": [
          "direction"
        ],
        "title": "WorkspaceSearchQuerySortCreatedAt",
        "type": "object"
      },
      "WorkspaceSearchQuerySortDirection": {
        "enum": [
          "asc",
          "desc"
        ],
        "title": "WorkspaceSearchQuerySortDirection",
        "type": "string"
      },
      "WorkspaceSearchQuerySortLastUpdatedAt": {
        "properties": {
          "direction": {
            "$ref": "#/components/schemas/WorkspaceSearchQuerySortDirection"
          }
        },
        "required": [
          "direction"
        ],
        "title": "WorkspaceSearchQuerySortLastUpdatedAt",
        "type": "object"
      },
      "WorkspaceSearchQuerySortName": {
        "properties": {
          "direction": {
            "$ref": "#/components/schemas/WorkspaceSearchQuerySortDirection"
          }
        },
        "required": [
          "direction"
        ],
        "title": "WorkspaceSearchQuerySortName",
        "type": "object"
      },
      "WorkspaceWithWorkspaceEmbed": {
        "properties": {
          "_embedded": {
            "$ref": "#/components/schemas/WorkspaceEmbed"
          },
          "alias": {
            "type": [
              "string",
              "null"
            ]
          },
          "archived": {
            "type": "boolean"
          },
          "createdAt": {
            "format": "date-time",
            "type": "string"
          },
          "defaultPermission": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/Permission"
              },
              {
                "type": "null"
              }
            ]
          },
          "description": {
            "$ref": "#/components/schemas/RichText"
          },
          "id": {
            "format": "uuid",
            "type": "string"
          },
          "itemColor": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/ItemColor"
              },
              {
                "type": "null"
              }
            ]
          },
          "itemType": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/ItemType"
              },
              {
                "type": "null"
              }
            ]
          },
          "lastUpdatedAt": {
            "format": "date-time",
            "type": "string"
          },
          "legacyId": {
            "type": [
              "string",
              "null"
            ]
          },
          "metadata": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/WorkspaceWorkspaceMetadata"
              },
              {
                "type": "null"
              }
            ]
          },
          "name": {
            "type": "string"
          },
          "namespace": {
            "$ref": "#/components/schemas/WorkspaceNamespace"
          },
          "progressMode": {
            "$ref": "#/components/schemas/WorkspaceProgressMode"
          },
          "teamId": {
            "format": "uuid",
            "type": "string"
          }
        },
        "required": [
          "id",
          "teamId",
          "name",
          "description",
          "progressMode",
          "archived",
          "createdAt",
          "lastUpdatedAt",
          "namespace",
          "_embedded"
        ],
        "title": "WorkspaceWithWorkspaceEmbed",
        "type": "object"
      },
      "WorkspaceWithWorkspaceEmbedOrNullList": {
        "items": {
          "anyOf": [
            {
              "$ref": "#/components/schemas/WorkspaceWithWorkspaceEmbed"
            },
            {
              "type": "null"
            }
          ]
        },
        "title": "WorkspaceWithWorkspaceEmbedOrNullList",
        "type": "array"
      },
      "WorkspaceWithWorkspaceSearchEmbed": {
        "properties": {
          "_embedded": {
            "$ref": "#/components/schemas/WorkspaceSearchEmbed"
          },
          "alias": {
            "type": [
              "string",
              "null"
            ]
          },
          "archived": {
            "type": "boolean"
          },
          "createdAt": {
            "format": "date-time",
            "type": "string"
          },
          "defaultPermission": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/Permission"
              },
              {
                "type": "null"
              }
            ]
          },
          "description": {
            "$ref": "#/components/schemas/RichText"
          },
          "id": {
            "format": "uuid",
            "type": "string"
          },
          "itemColor": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/ItemColor"
              },
              {
                "type": "null"
              }
            ]
          },
          "itemType": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/ItemType"
              },
              {
                "type": "null"
              }
            ]
          },
          "lastUpdatedAt": {
            "format": "date-time",
            "type": "string"
          },
          "legacyId": {
            "type": [
              "string",
              "null"
            ]
          },
          "metadata": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/WorkspaceWorkspaceMetadata"
              },
              {
                "type": "null"
              }
            ]
          },
          "name": {
            "type": "string"
          },
          "namespace": {
            "$ref": "#/components/schemas/WorkspaceNamespace"
          },
          "progressMode": {
            "$ref": "#/components/schemas/WorkspaceProgressMode"
          },
          "teamId": {
            "format": "uuid",
            "type": "string"
          }
        },
        "required": [
          "id",
          "teamId",
          "name",
          "description",
          "progressMode",
          "archived",
          "createdAt",
          "lastUpdatedAt",
          "namespace",
          "_embedded"
        ],
        "title": "WorkspaceWithWorkspaceSearchEmbed",
        "type": "object"
      },
      "WorkspaceWithWorkspaceSearchEmbedPage": {
        "properties": {
          "items": {
            "items": {
              "$ref": "#/components/schemas/WorkspaceWithWorkspaceSearchEmbed"
            },
            "type": "array"
          },
          "totalItems": {
            "format": "int32",
            "type": "integer"
          }
        },
        "required": [
          "totalItems"
        ],
        "title": "WorkspaceWithWorkspaceSearchEmbedPage",
        "type": "object"
      },
      "WorkspaceWorkspaceMetadata": {
        "properties": {
          "duplicated": {
            "type": "boolean"
          },
          "templateId": {
            "type": [
              "string",
              "null"
            ]
          },
          "templateWorkspaceRef": {
            "type": [
              "string",
              "null"
            ]
          },
          "version": {
            "type": [
              "string",
              "null"
            ]
          }
        },
        "required": [
          "duplicated"
        ],
        "title": "WorkspaceWorkspaceMetadata",
        "type": "object"
      }
    }
  },
  "info": {
    "title": "airfocus API",
    "version": "0.1"
  },
  "openapi": "3.1.0",
  "paths": {
    "/api/fields": {
      "post": {
        "description": "Installs a new field.\nIf it's a team-field, then it's possible to install it with empty or any non-empty amount of linked workspaces.\nOtherwise, if it's not a team-field, then exactly one linked workspace should be specified.<br/>Requirements:<br/>  - auth-client scopes: \"workspace\"<br/>  - user permission: \"full\"<br/>  - team features: \"team-fields\" when operating with team-fields<br/>  - user role: \"admin\" when operating with team-fields<br/>Returns:<br/>401 if user does not have the required permission",
        "operationId": "installField",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/FieldEndpointsInstallFieldRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FieldWithFieldEmbed"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "Install a new field",
        "tags": [
          "Fields"
        ]
      }
    },
    "/api/fields/reorder": {
      "post": {
        "description": "Updates the order of fields in the specified workspace.<br/>Requirements:<br/>  - auth-client scopes: \"workspace\"<br/>  - user permission: \"full\"<br/>  - team features: \"team-fields\" when operating with team-fields<br/>  - user role: \"admin\" when operating with team-fields<br/>Returns:<br/>401 if user does not have the required permission",
        "operationId": "reorderFields",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/FieldEndpointsReorderFieldsRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": ""
          }
        },
        "summary": "Reorder fields",
        "tags": [
          "Fields"
        ]
      }
    },
    "/api/fields/search": {
      "post": {
        "description": "Searches fields in the current team based on the specified filters.<br/>Requirements:<br/>  - auth-client scopes: \"workspace:read\"<br/>  - user permission: \"read\" or higher<br/>  - team features: \"team-fields\" when operating with team-fields<br/>Returns:<br/>401 if user does not have the required permission",
        "operationId": "searchFields",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/FieldSearchQuery"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FieldWithFieldEmbedPage"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "Search fields",
        "tags": [
          "Fields"
        ]
      }
    },
    "/api/fields/types": {
      "get": {
        "description": "Returns all field-types available in the system.<br/>Requirements:<br/>  - auth-client scopes: \"workspace:read\"<br/>  - user permission: \"read\" or higher<br/>  - team features: \"team-fields\" when operating with team-fields<br/>Returns:<br/>401 if user does not have the required permission",
        "operationId": "listFieldTypes",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/FieldEndpointsFieldTypeInfo"
                  },
                  "type": "array"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "List all available field types",
        "tags": [
          "Fields"
        ]
      }
    },
    "/api/fields/workspaces": {
      "delete": {
        "description": "Removes existing links between team-fields and workspaces.\nReturns updated fields with their linked workspaces embedded.\nReturns an error if either of the requested fields is not a team-field.\nIgnores when trying to delete non-existing links.\n<br/>Requirements:<br/>  - auth-client scopes: \"workspace\"<br/>  - user permission: \"full\"<br/>  - team features: \"team-fields\" when operating with team-fields<br/>  - user role: \"admin\" when operating with team-fields<br/>Returns:<br/>401 if user does not have the required permission",
        "operationId": "unlinkTeamFieldsFromWorkspaces",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "items": {
                  "$ref": "#/components/schemas/FieldEndpointsFieldToWorkspaceLink"
                },
                "type": "array"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/FieldWithFieldEmbed"
                  },
                  "type": "array"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "Unlink team-fields from workspaces",
        "tags": [
          "Fields"
        ]
      },
      "post": {
        "description": "Links existing team-fields to existing workspaces.\nReturns updated fields with their linked workspaces embedded.\nReturns an error if either of the requested fields is not a team-field.\nIgnores existing links.\n<br/>Requirements:<br/>  - auth-client scopes: \"workspace\"<br/>  - user permission: \"full\"<br/>  - team features: \"team-fields\" when operating with team-fields<br/>  - user role: \"admin\" when operating with team-fields<br/>Returns:<br/>401 if user does not have the required permission",
        "operationId": "linkTeamFieldsToWorkspaces",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "items": {
                  "$ref": "#/components/schemas/FieldEndpointsFieldToWorkspaceLink"
                },
                "type": "array"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/FieldWithFieldEmbed"
                  },
                  "type": "array"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "Link team-fields to workspaces",
        "tags": [
          "Fields"
        ]
      }
    },
    "/api/fields/{fieldId}": {
      "delete": {
        "description": "Deletes the requested field together with all its connections to workspaces and its values in the corresponding workspaces<br/>Requirements:<br/>  - auth-client scopes: \"workspace\"<br/>  - user permission: \"full\"<br/>  - team features: \"team-fields\" when operating with team-fields<br/>  - user role: \"admin\" when operating with team-fields<br/>Returns:<br/>401 if user does not have the required permission",
        "operationId": "deleteField",
        "parameters": [
          {
            "description": "ID of the target field.",
            "in": "path",
            "name": "fieldId",
            "required": true,
            "schema": {
              "format": "uuid",
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": ""
          }
        },
        "summary": "Delete field",
        "tags": [
          "Fields"
        ]
      },
      "get": {
        "description": "Returns a found field with its embedded data.\nThe field is accessible by the current user only if it's a team-field, or if it belongs to an accessible workspace.<br/>Requirements:<br/>  - auth-client scopes: \"workspace:read\"<br/>  - user permission: \"read\" or higher<br/>  - team features: \"team-fields\" when operating with team-fields<br/>Returns:<br/>401 if user does not have the required permission",
        "operationId": "retrieveField",
        "parameters": [
          {
            "description": "ID of the target field.",
            "in": "path",
            "name": "fieldId",
            "required": true,
            "schema": {
              "format": "uuid",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FieldWithFieldEmbed"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "Retrieve a single field",
        "tags": [
          "Fields"
        ]
      },
      "put": {
        "description": "Updates configuration properties of an existing field.<br/>Requirements:<br/>  - auth-client scopes: \"workspace\"<br/>  - user permission: \"full\"<br/>  - team features: \"team-fields\" when operating with team-fields<br/>  - user role: \"admin\" when operating with team-fields<br/>Returns:<br/>401 if user does not have the required permission",
        "operationId": "reconfigureField",
        "parameters": [
          {
            "description": "ID of the target field.",
            "in": "path",
            "name": "fieldId",
            "required": true,
            "schema": {
              "format": "uuid",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/FieldEndpointsReconfigureFieldRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FieldWithFieldEmbed"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "Reconfigure field",
        "tags": [
          "Fields"
        ]
      }
    },
    "/api/templates": {
      "get": {
        "description": "Returns all workspace-templates available to the current team.",
        "operationId": "listTemplates",
        "parameters": [
          {
            "description": "How many elements to skip.",
            "in": "query",
            "name": "offset",
            "required": false,
            "schema": {
              "default": 0,
              "format": "int32",
              "minimum": 0,
              "type": "integer"
            }
          },
          {
            "description": "How many elements to return.",
            "in": "query",
            "name": "limit",
            "required": false,
            "schema": {
              "default": 100,
              "format": "int32",
              "maximum": 100,
              "minimum": 0,
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TemplatePageWithEmbed"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "List templates",
        "tags": [
          "Templates"
        ]
      }
    },
    "/api/templates/{templateId}": {
      "post": {
        "description": "Installs the requested template with the given parameters.\nReturns a newly created workspace.\nIf the template creates multiple workspaces - then it still returns a single workspace which is considered by the template as \"main\".",
        "operationId": "installTemplate",
        "parameters": [
          {
            "in": "path",
            "name": "templateId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TemplateEndpointsApplyTemplateRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WorkspaceWithWorkspaceEmbed"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "Install template",
        "tags": [
          "Templates"
        ]
      }
    },
    "/api/workspaces": {
      "post": {
        "description": "Returns newly created workspace with its sanitised data.<br/>Requirements:<br/>  - auth-client scopes: \"workspace\"<br/>  - user permission: \"write\" or higher<br/>Returns:<br/>401 if user does not have the required permission",
        "operationId": "createWorkspace",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Workspace"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WorkspaceWithWorkspaceEmbed"
                }
              }
            },
            "description": ""
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "Create a new workspace",
        "tags": [
          "CRUD",
          "Workspaces"
        ]
      }
    },
    "/api/workspaces/bulk": {
      "post": {
        "description": "Accepts a list of create/update/patch/delete operations (see the request model for more details).<br/>\nEach operations can target a single or multiple workspaces.<br/>\nReturns a list of results for each input operation including errors.<br/>\nGuarantees that the size and order of the returned results matches the input list of operations.<br/>Requirements:<br/>  - auth-client scopes: \"workspace\"<br/>  - user permission: \"write\" or higher<br/>Returns:<br/>401 if user does not have the required permission",
        "operationId": "bulkWorkspaces",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "items": {
                  "$ref": "#/components/schemas/WorkspaceBulkAction"
                },
                "type": "array"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WorkspaceWithWorkspaceEmbedOrNullList"
                }
              }
            },
            "description": ""
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "Perform multiple operations with workspaces",
        "tags": [
          "CRUD",
          "Workspaces"
        ]
      }
    },
    "/api/workspaces/count": {
      "get": {
        "description": "Returns the total counter number.<br/>Requirements:<br/>  - auth-client scopes: \"workspace:read\"<br/>  - user permission: \"read\" or higher<br/>Returns:<br/>401 if user does not have the required permission",
        "operationId": "countWorkspaces",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "format": "int32",
                  "type": "integer"
                }
              }
            },
            "description": ""
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "Count workspaces in the current team.",
        "tags": [
          "Workspaces"
        ]
      }
    },
    "/api/workspaces/events/sse": {
      "get": {
        "description": "Creates an SSE connection which sends a events every time when something has happened in any workspace.<br/>Requirements:<br/>  - auth-client scopes: \"workspace:read\"<br/>  - user permission: \"read\" or higher<br/>Returns:<br/>401 if user does not have the required permission",
        "operationId": "workspaceEventsSse",
        "responses": {
          "200": {
            "content": {
              "text/event-stream": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": ""
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "Server-side-events for updates in all workspaces.",
        "tags": [
          "Workspaces"
        ]
      }
    },
    "/api/workspaces/groups": {
      "post": {
        "description": "Returns newly created workspace group with its sanitised data.<br/>Requirements:<br/>  - auth-client scopes: \"workspace\"<br/>  - user permission: \"write\" or higher<br/>Returns:<br/>401 if user does not have the required permission",
        "operationId": "createWorkspaceGroup",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/WorkspaceGroup"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WorkspaceGroupWithWorkspaceGroupEmbed"
                }
              }
            },
            "description": ""
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "Create a new workspace group",
        "tags": [
          "CRUD",
          "WorkspaceGroups"
        ]
      }
    },
    "/api/workspaces/groups/assign": {
      "post": {
        "description": "<br/>Requirements:<br/>  - auth-client scopes: \"workspace\"<br/>  - user permission: \"write\" or higher<br/>Returns:<br/>401 if user does not have the required permission",
        "operationId": "assignWorkspaceToGroup",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/WorkspaceGroupAssignWorkspaceRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": ""
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "Update workspace-group permissions.",
        "tags": [
          "WorkspaceGroups"
        ]
      }
    },
    "/api/workspaces/groups/bulk": {
      "post": {
        "description": "Accepts a list of create/update/patch/delete operations (see the request model for more details).<br/>\nEach operations can target a single or multiple workspace groups.<br/>\nReturns a list of results for each input operation including errors.<br/>\nGuarantees that the size and order of the returned results matches the input list of operations.<br/>Requirements:<br/>  - auth-client scopes: \"workspace\"<br/>  - user permission: \"write\" or higher<br/>Returns:<br/>401 if user does not have the required permission",
        "operationId": "bulkWorkspaceGroups",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "items": {
                  "$ref": "#/components/schemas/WorkspaceGroupBulkAction"
                },
                "type": "array"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WorkspaceGroupWithWorkspaceGroupEmbedOrNullList"
                }
              }
            },
            "description": ""
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "Perform multiple operations with workspace groups",
        "tags": [
          "CRUD",
          "WorkspaceGroups"
        ]
      }
    },
    "/api/workspaces/groups/list": {
      "post": {
        "description": "Returns a list of workspace groups.<br/>\nReturns null for those workspace groups which are not found or not accessible.<br/>\nGuarantees that the size and order of the returned list matches the requested IDs.<br/>Requirements:<br/>  - auth-client scopes: \"workspace:read\"<br/>  - user permission: \"read\" or higher<br/>Returns:<br/>401 if user does not have the required permission",
        "operationId": "listWorkspaceGroups",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "items": {
                  "format": "uuid",
                  "type": "string"
                },
                "type": "array"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WorkspaceGroupWithWorkspaceGroupEmbedOrNullList"
                }
              }
            },
            "description": ""
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "Retrieve multiple workspace groups by their IDs",
        "tags": [
          "CRUD",
          "WorkspaceGroups"
        ]
      }
    },
    "/api/workspaces/groups/search": {
      "post": {
        "description": "Returns all workspace groups or searches workspace groups by query. Always returns only workspace groups which are accessible by the current user.<br/>Requirements:<br/>  - auth-client scopes: \"workspace:read\"<br/>  - user permission: \"read\" or higher<br/>Returns:<br/>401 if user does not have the required permission",
        "operationId": "searchWorkspaceGroups",
        "parameters": [
          {
            "description": "How many elements to skip.",
            "in": "query",
            "name": "offset",
            "required": false,
            "schema": {
              "default": 0,
              "format": "int32",
              "minimum": 0,
              "type": "integer"
            }
          },
          {
            "description": "How many elements to return.",
            "in": "query",
            "name": "limit",
            "required": false,
            "schema": {
              "default": 10,
              "format": "int32",
              "maximum": 1000,
              "minimum": 0,
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": [
                  "object",
                  "null"
                ]
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WorkspaceGroupWithWorkspaceGroupEmbedPage"
                }
              }
            },
            "description": ""
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "Retrieve or search workspace groups",
        "tags": [
          "CRUD",
          "WorkspaceGroups"
        ]
      }
    },
    "/api/workspaces/groups/{workspaceGroupId}": {
      "delete": {
        "description": "Returns empty result if the workspace group was successfully deleted.<br/>Requirements:<br/>  - auth-client scopes: \"workspace\"<br/>  - user permission: \"write\" or higher<br/>Returns:<br/>400 if the resource is not found<br/>401 if user does not have the required permission",
        "operationId": "deleteWorkspaceGroup",
        "parameters": [
          {
            "in": "path",
            "name": "workspaceGroupId",
            "required": true,
            "schema": {
              "format": "uuid",
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": ""
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "Delete an existing workspace group",
        "tags": [
          "CRUD",
          "WorkspaceGroups"
        ]
      },
      "get": {
        "description": "Returns found workspace group.<br/>Requirements:<br/>  - auth-client scopes: \"workspace:read\"<br/>  - user permission: \"read\" or higher<br/>Returns:<br/>400 if the resource is not found<br/>401 if user does not have the required permission",
        "operationId": "retrieveWorkspaceGroup",
        "parameters": [
          {
            "in": "path",
            "name": "workspaceGroupId",
            "required": true,
            "schema": {
              "format": "uuid",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WorkspaceGroupWithWorkspaceGroupEmbed"
                }
              }
            },
            "description": ""
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "Retrieve a single workspace group by its ID",
        "tags": [
          "CRUD",
          "WorkspaceGroups"
        ]
      },
      "patch": {
        "description": "Returns the whole updated workspace group with its sanitised data.<br/>Requirements:<br/>  - auth-client scopes: \"workspace\"<br/>  - user permission: \"write\" or higher<br/>Returns:<br/>400 if the resource is not found<br/>401 if user does not have the required permission",
        "operationId": "patchWorkspaceGroup",
        "parameters": [
          {
            "in": "path",
            "name": "workspaceGroupId",
            "required": true,
            "schema": {
              "format": "uuid",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/JsonPatch"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WorkspaceGroupWithWorkspaceGroupEmbed"
                }
              }
            },
            "description": ""
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "Patch an existing workspace group",
        "tags": [
          "CRUD",
          "WorkspaceGroups"
        ]
      },
      "put": {
        "description": "Returns updated workspace group with its sanitised data.<br/>Requirements:<br/>  - auth-client scopes: \"workspace\"<br/>  - user permission: \"write\" or higher<br/>Returns:<br/>400 if the resource is not found<br/>401 if user does not have the required permission",
        "operationId": "updateWorkspaceGroup",
        "parameters": [
          {
            "in": "path",
            "name": "workspaceGroupId",
            "required": true,
            "schema": {
              "format": "uuid",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/WorkspaceGroup"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WorkspaceGroupWithWorkspaceGroupEmbed"
                }
              }
            },
            "description": ""
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "Update an existing workspace group",
        "tags": [
          "CRUD",
          "WorkspaceGroups"
        ]
      }
    },
    "/api/workspaces/groups/{workspaceGroupId}/permissions": {
      "post": {
        "description": "<br/>Requirements:<br/>  - auth-client scopes: \"workspace\"<br/>  - user permission: \"write\" or higher<br/>Returns:<br/>401 if user does not have the required permission",
        "operationId": "updateWorkspaceGroupPermissions",
        "parameters": [
          {
            "in": "path",
            "name": "workspaceGroupId",
            "required": true,
            "schema": {
              "format": "uuid",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/WorkspaceGroupPermissionsUpdateRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": ""
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "Update workspace-group permissions.",
        "tags": [
          "WorkspaceGroups"
        ]
      }
    },
    "/api/workspaces/item-relations": {
      "post": {
        "description": "Returns newly created item relation with its sanitised data.<br/>Requirements:<br/>  - auth-client scopes: \"workspace\"<br/>  - user permission: \"write\" or higher<br/>Returns:<br/>401 if user does not have the required permission",
        "operationId": "createItemRelation",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ItemRelation"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ItemRelationWithEmbed"
                }
              }
            },
            "description": ""
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "Create a new item relation",
        "tags": [
          "CRUD",
          "ItemRelations"
        ]
      }
    },
    "/api/workspaces/item-relations/bulk": {
      "post": {
        "description": "Accepts a list of create/update/patch/delete operations (see the request model for more details).<br/>\nEach operations can target a single or multiple item relations.<br/>\nReturns a list of results for each input operation including errors.<br/>\nGuarantees that the size and order of the returned results matches the input list of operations.<br/>Requirements:<br/>  - auth-client scopes: \"workspace\"<br/>  - user permission: \"write\" or higher<br/>Returns:<br/>401 if user does not have the required permission",
        "operationId": "bulkItemRelations",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "items": {
                  "$ref": "#/components/schemas/ItemRelationBulkAction"
                },
                "type": "array"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ItemRelationWithEmbedOrNullList"
                }
              }
            },
            "description": ""
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "Perform multiple operations with item relations",
        "tags": [
          "CRUD",
          "ItemRelations"
        ]
      }
    },
    "/api/workspaces/item-relations/list": {
      "post": {
        "description": "Returns a list of item relations.<br/>\nReturns null for those item relations which are not found or not accessible.<br/>\nGuarantees that the size and order of the returned list matches the requested IDs.<br/>Requirements:<br/>  - auth-client scopes: \"workspace:read\"<br/>  - user permission: \"read\" or higher<br/>Returns:<br/>401 if user does not have the required permission",
        "operationId": "listItemRelations",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "items": {
                  "format": "uuid",
                  "type": "string"
                },
                "type": "array"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ItemRelationWithEmbedOrNullList"
                }
              }
            },
            "description": ""
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "Retrieve multiple item relations by their IDs",
        "tags": [
          "CRUD",
          "ItemRelations"
        ]
      }
    },
    "/api/workspaces/item-relations/search": {
      "post": {
        "description": "Returns all item relations or searches item relations by query. Always returns only item relations which are accessible by the current user.<br/>Requirements:<br/>  - auth-client scopes: \"workspace:read\"<br/>  - user permission: \"read\" or higher<br/>Returns:<br/>401 if user does not have the required permission",
        "operationId": "searchItemRelations",
        "parameters": [
          {
            "description": "How many elements to skip.",
            "in": "query",
            "name": "offset",
            "required": false,
            "schema": {
              "default": 0,
              "format": "int32",
              "minimum": 0,
              "type": "integer"
            }
          },
          {
            "description": "How many elements to return.",
            "in": "query",
            "name": "limit",
            "required": false,
            "schema": {
              "default": 10,
              "format": "int32",
              "maximum": 1000,
              "minimum": 0,
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "anyOf": [
                  {
                    "$ref": "#/components/schemas/ItemRelationSearchQuery"
                  },
                  {
                    "type": "null"
                  }
                ]
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ItemRelationWithEmbedPage"
                }
              }
            },
            "description": ""
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "Retrieve or search item relations",
        "tags": [
          "CRUD",
          "ItemRelations"
        ]
      }
    },
    "/api/workspaces/item-relations/{itemRelationId}": {
      "delete": {
        "description": "Returns empty result if the item relation was successfully deleted.<br/>Requirements:<br/>  - auth-client scopes: \"workspace\"<br/>  - user permission: \"write\" or higher<br/>Returns:<br/>400 if the resource is not found<br/>401 if user does not have the required permission",
        "operationId": "deleteItemRelation",
        "parameters": [
          {
            "in": "path",
            "name": "itemRelationId",
            "required": true,
            "schema": {
              "format": "uuid",
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": ""
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "Delete an existing item relation",
        "tags": [
          "CRUD",
          "ItemRelations"
        ]
      },
      "get": {
        "description": "Returns found item relation.<br/>Requirements:<br/>  - auth-client scopes: \"workspace:read\"<br/>  - user permission: \"read\" or higher<br/>Returns:<br/>400 if the resource is not found<br/>401 if user does not have the required permission",
        "operationId": "retrieveItemRelation",
        "parameters": [
          {
            "in": "path",
            "name": "itemRelationId",
            "required": true,
            "schema": {
              "format": "uuid",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ItemRelationWithEmbed"
                }
              }
            },
            "description": ""
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "Retrieve a single item relation by its ID",
        "tags": [
          "CRUD",
          "ItemRelations"
        ]
      },
      "patch": {
        "description": "Returns the whole updated item relation with its sanitised data.<br/>Requirements:<br/>  - auth-client scopes: \"workspace\"<br/>  - user permission: \"write\" or higher<br/>Returns:<br/>400 if the resource is not found<br/>401 if user does not have the required permission",
        "operationId": "patchItemRelation",
        "parameters": [
          {
            "in": "path",
            "name": "itemRelationId",
            "required": true,
            "schema": {
              "format": "uuid",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/JsonPatch"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ItemRelationWithEmbed"
                }
              }
            },
            "description": ""
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "Patch an existing item relation",
        "tags": [
          "CRUD",
          "ItemRelations"
        ]
      },
      "put": {
        "description": "Returns updated item relation with its sanitised data.<br/>Requirements:<br/>  - auth-client scopes: \"workspace\"<br/>  - user permission: \"write\" or higher<br/>Returns:<br/>400 if the resource is not found<br/>401 if user does not have the required permission",
        "operationId": "updateItemRelation",
        "parameters": [
          {
            "in": "path",
            "name": "itemRelationId",
            "required": true,
            "schema": {
              "format": "uuid",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ItemRelation"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ItemRelationWithEmbed"
                }
              }
            },
            "description": ""
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "Update an existing item relation",
        "tags": [
          "CRUD",
          "ItemRelations"
        ]
      }
    },
    "/api/workspaces/items/copy": {
      "post": {
        "description": "Returns ids of newly copied items, with order of the returned ids matching the order of requested source items. Returns Not Found if either of the specified source items does not exist.<br/>Requirements:<br/>  - auth-client scopes: \"workspace\"<br/>  - user permission: \"write\" or higher<br/>Returns:<br/>400 if the resource is not found<br/>401 if user does not have the required permission",
        "operationId": "copyItems",
        "parameters": [
          {
            "description": "Workspace of the source items to be copied.",
            "in": "query",
            "name": "sourceWorkspaceId",
            "required": true,
            "schema": {
              "format": "uuid",
              "type": "string"
            }
          },
          {
            "description": "Target workspace for the newly copied items.",
            "in": "query",
            "name": "targetWorkspaceId",
            "required": true,
            "schema": {
              "format": "uuid",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "items": {
                  "format": "uuid",
                  "type": "string"
                },
                "type": "array"
              }
            }
          },
          "description": "List of item IDs to be copied.",
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "format": "uuid",
                    "type": "string"
                  },
                  "type": "array"
                }
              }
            },
            "description": "List of newly created item IDs."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "Copy specified items.",
        "tags": [
          "Items"
        ]
      }
    },
    "/api/workspaces/items/list": {
      "post": {
        "description": "Returns an array of results, where each element is either a found item with its embeddings, or null if there no item with such ID.<br/>Requirements:<br/>  - auth-client scopes: \"workspace\"<br/>  - user permission: \"write\" or higher<br/>Returns:<br/>401 if user does not have the required permission",
        "operationId": "retrieveItemsGlobally",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "items": {
                  "format": "uuid",
                  "type": "string"
                },
                "type": "array"
              }
            }
          },
          "description": "List of item IDs to be retrieve from any workspace in the team.",
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ItemWithItemEmbedOrNullList"
                }
              },
              "application/json+markdown": {
                "schema": {
                  "$ref": "#/components/schemas/ItemWithItemEmbedOrNullList"
                }
              }
            },
            "description": ""
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "Retrieve items from any workspace by specified IDs.",
        "tags": [
          "Items"
        ]
      }
    },
    "/api/workspaces/items/move": {
      "post": {
        "description": "Returns ids of newly created items in the target workspace, with order of the returned ids matching the order of requested source items. Returns Not Found if either of the specified source items does not exist.<br/>Requirements:<br/>  - auth-client scopes: \"workspace\"<br/>  - user permission: \"write\" or higher<br/>Returns:<br/>400 if the resource is not found<br/>401 if user does not have the required permission",
        "operationId": "moveItems",
        "parameters": [
          {
            "description": "Workspace of the source items to be moved.",
            "in": "query",
            "name": "sourceWorkspaceId",
            "required": true,
            "schema": {
              "format": "uuid",
              "type": "string"
            }
          },
          {
            "description": "New target workspace for the moved items.",
            "in": "query",
            "name": "targetWorkspaceId",
            "required": true,
            "schema": {
              "format": "uuid",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "items": {
                  "format": "uuid",
                  "type": "string"
                },
                "type": "array"
              }
            }
          },
          "description": "List of item IDs to be moved.",
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "format": "uuid",
                    "type": "string"
                  },
                  "type": "array"
                }
              }
            },
            "description": "List of newly created item IDs."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "Move specified items from one workspace to another.",
        "tags": [
          "Items"
        ]
      }
    },
    "/api/workspaces/list": {
      "post": {
        "description": "Returns a list of workspaces.<br/>\nReturns null for those workspaces which are not found or not accessible.<br/>\nGuarantees that the size and order of the returned list matches the requested IDs.<br/>Requirements:<br/>  - auth-client scopes: \"workspace:read\"<br/>  - user permission: \"read\" or higher<br/>Returns:<br/>401 if user does not have the required permission",
        "operationId": "listWorkspaces",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "items": {
                  "format": "uuid",
                  "type": "string"
                },
                "type": "array"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WorkspaceWithWorkspaceEmbedOrNullList"
                }
              }
            },
            "description": ""
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "Retrieve multiple workspaces by their IDs",
        "tags": [
          "CRUD",
          "Workspaces"
        ]
      }
    },
    "/api/workspaces/search": {
      "post": {
        "description": "Returns all workspaces or searches workspaces by query. Always returns only workspaces which are accessible by the current user.<br/>Requirements:<br/>  - auth-client scopes: \"workspace:read\"<br/>  - user permission: \"read\" or higher<br/>Returns:<br/>401 if user does not have the required permission",
        "operationId": "searchWorkspaces",
        "parameters": [
          {
            "description": "How many elements to skip.",
            "in": "query",
            "name": "offset",
            "required": false,
            "schema": {
              "default": 0,
              "format": "int32",
              "minimum": 0,
              "type": "integer"
            }
          },
          {
            "description": "How many elements to return.",
            "in": "query",
            "name": "limit",
            "required": false,
            "schema": {
              "default": 10,
              "format": "int32",
              "maximum": 1000,
              "minimum": 0,
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "anyOf": [
                  {
                    "$ref": "#/components/schemas/WorkspaceSearchQuery"
                  },
                  {
                    "type": "null"
                  }
                ]
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WorkspaceWithWorkspaceSearchEmbedPage"
                }
              }
            },
            "description": ""
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "Retrieve or search workspaces",
        "tags": [
          "CRUD",
          "Workspaces"
        ]
      }
    },
    "/api/workspaces/workspace-relations": {
      "post": {
        "description": "Returns newly created workspace relation with its sanitised data.<br/>Requirements:<br/>  - auth-client scopes: \"workspace\"<br/>  - user permission: \"write\" or higher<br/>Returns:<br/>401 if user does not have the required permission",
        "operationId": "createWorkspaceRelation",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/WorkspaceRelation"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WorkspaceRelationWithEmbed"
                }
              }
            },
            "description": ""
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "Create a new workspace relation",
        "tags": [
          "CRUD",
          "WorkspaceRelations"
        ]
      }
    },
    "/api/workspaces/workspace-relations/bulk": {
      "post": {
        "description": "Accepts a list of create/update/patch/delete operations (see the request model for more details).<br/>\nEach operations can target a single or multiple workspace relations.<br/>\nReturns a list of results for each input operation including errors.<br/>\nGuarantees that the size and order of the returned results matches the input list of operations.<br/>Requirements:<br/>  - auth-client scopes: \"workspace\"<br/>  - user permission: \"write\" or higher<br/>Returns:<br/>401 if user does not have the required permission",
        "operationId": "bulkWorkspaceRelations",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "items": {
                  "$ref": "#/components/schemas/WorkspaceRelationBulkAction"
                },
                "type": "array"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WorkspaceRelationWithEmbedOrNullList"
                }
              }
            },
            "description": ""
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "Perform multiple operations with workspace relations",
        "tags": [
          "CRUD",
          "WorkspaceRelations"
        ]
      }
    },
    "/api/workspaces/workspace-relations/list": {
      "post": {
        "description": "Returns a list of workspace relations.<br/>\nReturns null for those workspace relations which are not found or not accessible.<br/>\nGuarantees that the size and order of the returned list matches the requested IDs.<br/>Requirements:<br/>  - auth-client scopes: \"workspace:read\"<br/>  - user permission: \"read\" or higher<br/>Returns:<br/>401 if user does not have the required permission",
        "operationId": "listWorkspaceRelations",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "items": {
                  "format": "uuid",
                  "type": "string"
                },
                "type": "array"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WorkspaceRelationWithEmbedOrNullList"
                }
              }
            },
            "description": ""
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "Retrieve multiple workspace relations by their IDs",
        "tags": [
          "CRUD",
          "WorkspaceRelations"
        ]
      }
    },
    "/api/workspaces/workspace-relations/search": {
      "post": {
        "description": "Returns all workspace relations or searches workspace relations by query. Always returns only workspace relations which are accessible by the current user.<br/>Requirements:<br/>  - auth-client scopes: \"workspace:read\"<br/>  - user permission: \"read\" or higher<br/>Returns:<br/>401 if user does not have the required permission",
        "operationId": "searchWorkspaceRelations",
        "parameters": [
          {
            "description": "How many elements to skip.",
            "in": "query",
            "name": "offset",
            "required": false,
            "schema": {
              "default": 0,
              "format": "int32",
              "minimum": 0,
              "type": "integer"
            }
          },
          {
            "description": "How many elements to return.",
            "in": "query",
            "name": "limit",
            "required": false,
            "schema": {
              "default": 10,
              "format": "int32",
              "maximum": 1000,
              "minimum": 0,
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "anyOf": [
                  {
                    "$ref": "#/components/schemas/WorkspaceRelationSearchQuery"
                  },
                  {
                    "type": "null"
                  }
                ]
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WorkspaceRelationWithEmbedPage"
                }
              }
            },
            "description": ""
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "Retrieve or search workspace relations",
        "tags": [
          "CRUD",
          "WorkspaceRelations"
        ]
      }
    },
    "/api/workspaces/workspace-relations/set": {
      "put": {
        "operationId": "putApiWorkspacesWorkspace-relationsSet",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/WorkspaceRelationsSetRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WorkspaceWithWorkspaceEmbed"
                }
              }
            },
            "description": ""
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": ""
          }
        },
        "tags": [
          "WorkspaceRelations"
        ]
      }
    },
    "/api/workspaces/workspace-relations/{workspaceRelationId}": {
      "delete": {
        "description": "Returns empty result if the workspace relation was successfully deleted.<br/>Requirements:<br/>  - auth-client scopes: \"workspace\"<br/>  - user permission: \"write\" or higher<br/>Returns:<br/>400 if the resource is not found<br/>401 if user does not have the required permission",
        "operationId": "deleteWorkspaceRelation",
        "parameters": [
          {
            "in": "path",
            "name": "workspaceRelationId",
            "required": true,
            "schema": {
              "format": "uuid",
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": ""
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "Delete an existing workspace relation",
        "tags": [
          "CRUD",
          "WorkspaceRelations"
        ]
      },
      "get": {
        "description": "Returns found workspace relation.<br/>Requirements:<br/>  - auth-client scopes: \"workspace:read\"<br/>  - user permission: \"read\" or higher<br/>Returns:<br/>400 if the resource is not found<br/>401 if user does not have the required permission",
        "operationId": "retrieveWorkspaceRelation",
        "parameters": [
          {
            "in": "path",
            "name": "workspaceRelationId",
            "required": true,
            "schema": {
              "format": "uuid",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WorkspaceRelationWithEmbed"
                }
              }
            },
            "description": ""
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "Retrieve a single workspace relation by its ID",
        "tags": [
          "CRUD",
          "WorkspaceRelations"
        ]
      },
      "patch": {
        "description": "Returns the whole updated workspace relation with its sanitised data.<br/>Requirements:<br/>  - auth-client scopes: \"workspace\"<br/>  - user permission: \"write\" or higher<br/>Returns:<br/>400 if the resource is not found<br/>401 if user does not have the required permission",
        "operationId": "patchWorkspaceRelation",
        "parameters": [
          {
            "in": "path",
            "name": "workspaceRelationId",
            "required": true,
            "schema": {
              "format": "uuid",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/JsonPatch"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WorkspaceRelationWithEmbed"
                }
              }
            },
            "description": ""
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "Patch an existing workspace relation",
        "tags": [
          "CRUD",
          "WorkspaceRelations"
        ]
      },
      "put": {
        "description": "Returns updated workspace relation with its sanitised data.<br/>Requirements:<br/>  - auth-client scopes: \"workspace\"<br/>  - user permission: \"write\" or higher<br/>Returns:<br/>400 if the resource is not found<br/>401 if user does not have the required permission",
        "operationId": "updateWorkspaceRelation",
        "parameters": [
          {
            "in": "path",
            "name": "workspaceRelationId",
            "required": true,
            "schema": {
              "format": "uuid",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/WorkspaceRelation"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WorkspaceRelationWithEmbed"
                }
              }
            },
            "description": ""
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "Update an existing workspace relation",
        "tags": [
          "CRUD",
          "WorkspaceRelations"
        ]
      }
    },
    "/api/workspaces/{workspaceId}": {
      "delete": {
        "description": "Returns empty result if the workspace was successfully deleted.<br/>Requirements:<br/>  - auth-client scopes: \"workspace\"<br/>  - user permission: \"write\" or higher<br/>Returns:<br/>400 if the resource is not found<br/>401 if user does not have the required permission",
        "operationId": "deleteWorkspace",
        "parameters": [
          {
            "in": "path",
            "name": "workspaceId",
            "required": true,
            "schema": {
              "format": "uuid",
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": ""
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "Delete an existing workspace",
        "tags": [
          "CRUD",
          "Workspaces"
        ]
      },
      "get": {
        "description": "Returns found workspace.<br/>Requirements:<br/>  - auth-client scopes: \"workspace:read\"<br/>  - user permission: \"read\" or higher<br/>Returns:<br/>400 if the resource is not found<br/>401 if user does not have the required permission",
        "operationId": "retrieveWorkspace",
        "parameters": [
          {
            "in": "path",
            "name": "workspaceId",
            "required": true,
            "schema": {
              "format": "uuid",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WorkspaceWithWorkspaceEmbed"
                }
              }
            },
            "description": ""
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "Retrieve a single workspace by its ID",
        "tags": [
          "CRUD",
          "Workspaces"
        ]
      },
      "patch": {
        "description": "Returns the whole updated workspace with its sanitised data.<br/>Requirements:<br/>  - auth-client scopes: \"workspace\"<br/>  - user permission: \"write\" or higher<br/>Returns:<br/>400 if the resource is not found<br/>401 if user does not have the required permission",
        "operationId": "patchWorkspace",
        "parameters": [
          {
            "in": "path",
            "name": "workspaceId",
            "required": true,
            "schema": {
              "format": "uuid",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/JsonPatch"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WorkspaceWithWorkspaceEmbed"
                }
              }
            },
            "description": ""
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "Patch an existing workspace",
        "tags": [
          "CRUD",
          "Workspaces"
        ]
      },
      "put": {
        "description": "Returns updated workspace with its sanitised data.<br/>Requirements:<br/>  - auth-client scopes: \"workspace\"<br/>  - user permission: \"write\" or higher<br/>Returns:<br/>400 if the resource is not found<br/>401 if user does not have the required permission",
        "operationId": "updateWorkspace",
        "parameters": [
          {
            "in": "path",
            "name": "workspaceId",
            "required": true,
            "schema": {
              "format": "uuid",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Workspace"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WorkspaceWithWorkspaceEmbed"
                }
              }
            },
            "description": ""
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "Update an existing workspace",
        "tags": [
          "CRUD",
          "Workspaces"
        ]
      }
    },
    "/api/workspaces/{workspaceId}/attachments": {
      "post": {
        "description": "Returns newly created attachment with its sanitised data.<br/>Requirements:<br/>  - auth-client scopes: \"workspace\"<br/>  - user permission: \"write\" or higher<br/>Returns:<br/>401 if user does not have the required permission",
        "operationId": "createItemAttachment",
        "parameters": [
          {
            "description": "ID of the workspace which contains the managed links.",
            "in": "path",
            "name": "workspaceId",
            "required": true,
            "schema": {
              "format": "uuid",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ItemAttachment"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ItemAttachmentWithEmbed"
                }
              }
            },
            "description": ""
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "Create a new attachment",
        "tags": [
          "CRUD",
          "ItemAttachments"
        ]
      }
    },
    "/api/workspaces/{workspaceId}/attachments/bulk": {
      "post": {
        "description": "Accepts a list of create/update/patch/delete operations (see the request model for more details).<br/>\nEach operations can target a single or multiple attachments.<br/>\nReturns a list of results for each input operation including errors.<br/>\nGuarantees that the size and order of the returned results matches the input list of operations.<br/>Requirements:<br/>  - auth-client scopes: \"workspace\"<br/>  - user permission: \"write\" or higher<br/>Returns:<br/>401 if user does not have the required permission",
        "operationId": "bulkItemAttachments",
        "parameters": [
          {
            "description": "ID of the workspace which contains the managed links.",
            "in": "path",
            "name": "workspaceId",
            "required": true,
            "schema": {
              "format": "uuid",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "items": {
                  "$ref": "#/components/schemas/ItemAttachmentBulkAction"
                },
                "type": "array"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ItemAttachmentWithEmbedOrNullList"
                }
              }
            },
            "description": ""
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "Perform multiple operations with attachments",
        "tags": [
          "CRUD",
          "ItemAttachments"
        ]
      }
    },
    "/api/workspaces/{workspaceId}/attachments/list": {
      "post": {
        "description": "Returns a list of attachments.<br/>\nReturns null for those attachments which are not found or not accessible.<br/>\nGuarantees that the size and order of the returned list matches the requested IDs.<br/>Requirements:<br/>  - auth-client scopes: \"workspace:read\"<br/>  - user permission: \"read\" or higher<br/>Returns:<br/>401 if user does not have the required permission",
        "operationId": "listItemAttachments",
        "parameters": [
          {
            "description": "ID of the workspace which contains the managed links.",
            "in": "path",
            "name": "workspaceId",
            "required": true,
            "schema": {
              "format": "uuid",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "items": {
                  "format": "uuid",
                  "type": "string"
                },
                "type": "array"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ItemAttachmentWithEmbedOrNullList"
                }
              }
            },
            "description": ""
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "Retrieve multiple attachments by their IDs",
        "tags": [
          "CRUD",
          "ItemAttachments"
        ]
      }
    },
    "/api/workspaces/{workspaceId}/attachments/search": {
      "post": {
        "description": "Returns all attachments or searches attachments by query. Always returns only attachments which are accessible by the current user.<br/>Requirements:<br/>  - auth-client scopes: \"workspace:read\"<br/>  - user permission: \"read\" or higher<br/>Returns:<br/>401 if user does not have the required permission",
        "operationId": "searchItemAttachments",
        "parameters": [
          {
            "description": "ID of the workspace which contains the managed links.",
            "in": "path",
            "name": "workspaceId",
            "required": true,
            "schema": {
              "format": "uuid",
              "type": "string"
            }
          },
          {
            "description": "How many elements to skip.",
            "in": "query",
            "name": "offset",
            "required": false,
            "schema": {
              "default": 0,
              "format": "int32",
              "minimum": 0,
              "type": "integer"
            }
          },
          {
            "description": "How many elements to return.",
            "in": "query",
            "name": "limit",
            "required": false,
            "schema": {
              "default": 10,
              "format": "int32",
              "maximum": 1000,
              "minimum": 0,
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "anyOf": [
                  {
                    "$ref": "#/components/schemas/AttachmentSearchQuery"
                  },
                  {
                    "type": "null"
                  }
                ]
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ItemAttachmentWithEmbedPage"
                }
              }
            },
            "description": ""
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "Retrieve or search attachments",
        "tags": [
          "CRUD",
          "ItemAttachments"
        ]
      }
    },
    "/api/workspaces/{workspaceId}/attachments/{itemAttachmentId}": {
      "delete": {
        "description": "Returns empty result if the attachment was successfully deleted.<br/>Requirements:<br/>  - auth-client scopes: \"workspace\"<br/>  - user permission: \"write\" or higher<br/>Returns:<br/>400 if the resource is not found<br/>401 if user does not have the required permission",
        "operationId": "deleteItemAttachment",
        "parameters": [
          {
            "description": "ID of the workspace which contains the managed links.",
            "in": "path",
            "name": "workspaceId",
            "required": true,
            "schema": {
              "format": "uuid",
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "itemAttachmentId",
            "required": true,
            "schema": {
              "format": "uuid",
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": ""
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "Delete an existing attachment",
        "tags": [
          "CRUD",
          "ItemAttachments"
        ]
      },
      "get": {
        "description": "Returns found attachment.<br/>Requirements:<br/>  - auth-client scopes: \"workspace:read\"<br/>  - user permission: \"read\" or higher<br/>Returns:<br/>400 if the resource is not found<br/>401 if user does not have the required permission",
        "operationId": "retrieveItemAttachment",
        "parameters": [
          {
            "description": "ID of the workspace which contains the managed links.",
            "in": "path",
            "name": "workspaceId",
            "required": true,
            "schema": {
              "format": "uuid",
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "itemAttachmentId",
            "required": true,
            "schema": {
              "format": "uuid",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ItemAttachmentWithEmbed"
                }
              }
            },
            "description": ""
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "Retrieve a single attachment by its ID",
        "tags": [
          "CRUD",
          "ItemAttachments"
        ]
      },
      "patch": {
        "description": "Returns the whole updated attachment with its sanitised data.<br/>Requirements:<br/>  - auth-client scopes: \"workspace\"<br/>  - user permission: \"write\" or higher<br/>Returns:<br/>400 if the resource is not found<br/>401 if user does not have the required permission",
        "operationId": "patchItemAttachment",
        "parameters": [
          {
            "description": "ID of the workspace which contains the managed links.",
            "in": "path",
            "name": "workspaceId",
            "required": true,
            "schema": {
              "format": "uuid",
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "itemAttachmentId",
            "required": true,
            "schema": {
              "format": "uuid",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/JsonPatch"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ItemAttachmentWithEmbed"
                }
              }
            },
            "description": ""
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "Patch an existing attachment",
        "tags": [
          "CRUD",
          "ItemAttachments"
        ]
      },
      "put": {
        "description": "Returns updated attachment with its sanitised data.<br/>Requirements:<br/>  - auth-client scopes: \"workspace\"<br/>  - user permission: \"write\" or higher<br/>Returns:<br/>400 if the resource is not found<br/>401 if user does not have the required permission",
        "operationId": "updateItemAttachment",
        "parameters": [
          {
            "description": "ID of the workspace which contains the managed links.",
            "in": "path",
            "name": "workspaceId",
            "required": true,
            "schema": {
              "format": "uuid",
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "itemAttachmentId",
            "required": true,
            "schema": {
              "format": "uuid",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ItemAttachment"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ItemAttachmentWithEmbed"
                }
              }
            },
            "description": ""
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "Update an existing attachment",
        "tags": [
          "CRUD",
          "ItemAttachments"
        ]
      }
    },
    "/api/workspaces/{workspaceId}/background-activity/sse": {
      "get": {
        "description": "Creates an SSE connection which sends an event every time something changes in the background activity of this workspace.<br/>Requirements:<br/>  - auth-client scopes: \"workspace:read\"<br/>  - user permission: \"read\" or higher<br/>Returns:<br/>401 if user does not have the required permission",
        "operationId": "workspaceBackgroundActivitySse",
        "parameters": [
          {
            "in": "path",
            "name": "workspaceId",
            "required": true,
            "schema": {
              "format": "uuid",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "text/event-stream": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": ""
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "Server-sent-events for background activity in workspace.",
        "tags": [
          "Workspaces"
        ]
      }
    },
    "/api/workspaces/{workspaceId}/comments": {
      "post": {
        "description": "Returns newly created comment with its sanitised data.<br/>Requirements:<br/>  - auth-client scopes: \"workspace\"<br/>  - user permission: \"write\" or higher<br/>Returns:<br/>401 if user does not have the required permission",
        "operationId": "createComment",
        "parameters": [
          {
            "in": "path",
            "name": "workspaceId",
            "required": true,
            "schema": {
              "format": "uuid",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Comment"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CommentWithEmbed"
                }
              }
            },
            "description": ""
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "Create a new comment",
        "tags": [
          "CRUD",
          "Comments"
        ]
      }
    },
    "/api/workspaces/{workspaceId}/comments/bulk": {
      "post": {
        "description": "Accepts a list of create/update/patch/delete operations (see the request model for more details).<br/>\nEach operations can target a single or multiple comments.<br/>\nReturns a list of results for each input operation including errors.<br/>\nGuarantees that the size and order of the returned results matches the input list of operations.<br/>Requirements:<br/>  - auth-client scopes: \"workspace\"<br/>  - user permission: \"write\" or higher<br/>Returns:<br/>401 if user does not have the required permission",
        "operationId": "bulkComments",
        "parameters": [
          {
            "in": "path",
            "name": "workspaceId",
            "required": true,
            "schema": {
              "format": "uuid",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "items": {
                  "$ref": "#/components/schemas/CommentBulkAction"
                },
                "type": "array"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CommentWithEmbedOrNullList"
                }
              }
            },
            "description": ""
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "Perform multiple operations with comments",
        "tags": [
          "CRUD",
          "Comments"
        ]
      }
    },
    "/api/workspaces/{workspaceId}/comments/list": {
      "post": {
        "description": "Returns a list of comments.<br/>\nReturns null for those comments which are not found or not accessible.<br/>\nGuarantees that the size and order of the returned list matches the requested IDs.<br/>Requirements:<br/>  - auth-client scopes: \"workspace:read\"<br/>  - user permission: \"read\" or higher<br/>Returns:<br/>401 if user does not have the required permission",
        "operationId": "listComments",
        "parameters": [
          {
            "in": "path",
            "name": "workspaceId",
            "required": true,
            "schema": {
              "format": "uuid",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "items": {
                  "format": "uuid",
                  "type": "string"
                },
                "type": "array"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CommentWithEmbedOrNullList"
                }
              }
            },
            "description": ""
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "Retrieve multiple comments by their IDs",
        "tags": [
          "CRUD",
          "Comments"
        ]
      }
    },
    "/api/workspaces/{workspaceId}/comments/search": {
      "post": {
        "description": "Returns all comments or searches comments by query. Always returns only comments which are accessible by the current user.<br/>Requirements:<br/>  - auth-client scopes: \"workspace:read\"<br/>  - user permission: \"read\" or higher<br/>Returns:<br/>401 if user does not have the required permission",
        "operationId": "searchComments",
        "parameters": [
          {
            "in": "path",
            "name": "workspaceId",
            "required": true,
            "schema": {
              "format": "uuid",
              "type": "string"
            }
          },
          {
            "description": "How many elements to skip.",
            "in": "query",
            "name": "offset",
            "required": false,
            "schema": {
              "default": 0,
              "format": "int32",
              "minimum": 0,
              "type": "integer"
            }
          },
          {
            "description": "How many elements to return.",
            "in": "query",
            "name": "limit",
            "required": false,
            "schema": {
              "default": 10,
              "format": "int32",
              "maximum": 1000,
              "minimum": 0,
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "anyOf": [
                  {
                    "$ref": "#/components/schemas/CommentSearchQuery"
                  },
                  {
                    "type": "null"
                  }
                ]
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CommentWithEmbedPage"
                }
              }
            },
            "description": ""
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "Retrieve or search comments",
        "tags": [
          "CRUD",
          "Comments"
        ]
      }
    },
    "/api/workspaces/{workspaceId}/comments/{commentId}": {
      "delete": {
        "description": "Returns empty result if the comment was successfully deleted.<br/>Requirements:<br/>  - auth-client scopes: \"workspace\"<br/>  - user permission: \"write\" or higher<br/>Returns:<br/>400 if the resource is not found<br/>401 if user does not have the required permission",
        "operationId": "deleteComment",
        "parameters": [
          {
            "in": "path",
            "name": "workspaceId",
            "required": true,
            "schema": {
              "format": "uuid",
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "commentId",
            "required": true,
            "schema": {
              "format": "uuid",
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": ""
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "Delete an existing comment",
        "tags": [
          "CRUD",
          "Comments"
        ]
      },
      "get": {
        "description": "Returns found comment.<br/>Requirements:<br/>  - auth-client scopes: \"workspace:read\"<br/>  - user permission: \"read\" or higher<br/>Returns:<br/>400 if the resource is not found<br/>401 if user does not have the required permission",
        "operationId": "retrieveComment",
        "parameters": [
          {
            "in": "path",
            "name": "workspaceId",
            "required": true,
            "schema": {
              "format": "uuid",
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "commentId",
            "required": true,
            "schema": {
              "format": "uuid",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CommentWithEmbed"
                }
              }
            },
            "description": ""
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "Retrieve a single comment by its ID",
        "tags": [
          "CRUD",
          "Comments"
        ]
      },
      "patch": {
        "description": "Returns the whole updated comment with its sanitised data.<br/>Requirements:<br/>  - auth-client scopes: \"workspace\"<br/>  - user permission: \"write\" or higher<br/>Returns:<br/>400 if the resource is not found<br/>401 if user does not have the required permission",
        "operationId": "patchComment",
        "parameters": [
          {
            "in": "path",
            "name": "workspaceId",
            "required": true,
            "schema": {
              "format": "uuid",
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "commentId",
            "required": true,
            "schema": {
              "format": "uuid",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/JsonPatch"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CommentWithEmbed"
                }
              }
            },
            "description": ""
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "Patch an existing comment",
        "tags": [
          "CRUD",
          "Comments"
        ]
      },
      "put": {
        "description": "Returns updated comment with its sanitised data.<br/>Requirements:<br/>  - auth-client scopes: \"workspace\"<br/>  - user permission: \"write\" or higher<br/>Returns:<br/>400 if the resource is not found<br/>401 if user does not have the required permission",
        "operationId": "updateComment",
        "parameters": [
          {
            "in": "path",
            "name": "workspaceId",
            "required": true,
            "schema": {
              "format": "uuid",
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "commentId",
            "required": true,
            "schema": {
              "format": "uuid",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Comment"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CommentWithEmbed"
                }
              }
            },
            "description": ""
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "Update an existing comment",
        "tags": [
          "CRUD",
          "Comments"
        ]
      }
    },
    "/api/workspaces/{workspaceId}/comments/{commentId}/reactions/{emojiCode}": {
      "delete": {
        "description": "This action can be performed only as a real authenticated user<br/>Requirements:<br/>  - auth-client scopes: \"workspace\"<br/>  - user permission: \"write\" or higher<br/>Returns:<br/>401 if user does not have the required permission",
        "operationId": "removeCommentReaction",
        "parameters": [
          {
            "in": "path",
            "name": "workspaceId",
            "required": true,
            "schema": {
              "format": "uuid",
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "commentId",
            "required": true,
            "schema": {
              "format": "uuid",
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "emojiCode",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/CommentReactionEmoji"
            }
          }
        ],
        "responses": {
          "204": {
            "description": ""
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "Remove a reaction from the specified comment.",
        "tags": [
          "Comments"
        ]
      },
      "post": {
        "description": "This action can be performed only as a real authenticated user<br/>Requirements:<br/>  - auth-client scopes: \"workspace\"<br/>  - user permission: \"write\" or higher<br/>Returns:<br/>401 if user does not have the required permission",
        "operationId": "addCommentReaction",
        "parameters": [
          {
            "in": "path",
            "name": "workspaceId",
            "required": true,
            "schema": {
              "format": "uuid",
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "commentId",
            "required": true,
            "schema": {
              "format": "uuid",
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "emojiCode",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/CommentReactionEmoji"
            }
          }
        ],
        "responses": {
          "204": {
            "description": ""
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "Add a reaction to the specified comment.",
        "tags": [
          "Comments"
        ]
      }
    },
    "/api/workspaces/{workspaceId}/duplicate": {
      "post": {
        "description": "Returns the newly created workspace with embedded data.<br/>Requirements:<br/>  - auth-client scopes: \"workspace\"<br/>  - user permission: \"write\" or higher<br/>Returns:<br/>401 if user does not have the required permission",
        "operationId": "duplicateWorkspace",
        "parameters": [
          {
            "in": "path",
            "name": "workspaceId",
            "required": true,
            "schema": {
              "format": "uuid",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/WorkspaceEndpointsWorkspaceDuplicateRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WorkspaceWithWorkspaceEmbed"
                }
              }
            },
            "description": ""
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "Duplicate workspace with all its items and apps.",
        "tags": [
          "Workspaces"
        ]
      }
    },
    "/api/workspaces/{workspaceId}/events/sse": {
      "get": {
        "description": "Creates an SSE connection which sends a events every time when something in the workspace has happened.<br/>Requirements:<br/>  - auth-client scopes: \"workspace:read\"<br/>  - user permission: \"read\" or higher<br/>Returns:<br/>401 if user does not have the required permission",
        "operationId": "workspaceEventsByWorkspaceIdSse",
        "parameters": [
          {
            "in": "path",
            "name": "workspaceId",
            "required": true,
            "schema": {
              "format": "uuid",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "text/event-stream": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": ""
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "Server-side-events for updates in a single workspace.",
        "tags": [
          "Workspaces"
        ]
      }
    },
    "/api/workspaces/{workspaceId}/items": {
      "post": {
        "description": "Returns newly created item with its sanitised data.<br/>Requirements:<br/>  - auth-client scopes: \"workspace\"<br/>  - user permission: \"write\" or higher<br/>Returns:<br/>401 if user does not have the required permission",
        "operationId": "createItem",
        "parameters": [
          {
            "in": "path",
            "name": "workspaceId",
            "required": true,
            "schema": {
              "format": "uuid",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Item"
              }
            },
            "application/json+markdown": {
              "schema": {
                "$ref": "#/components/schemas/Item"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ItemWithItemEmbed"
                }
              },
              "application/json+markdown": {
                "schema": {
                  "$ref": "#/components/schemas/ItemWithItemEmbed"
                }
              }
            },
            "description": ""
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "Create a new item",
        "tags": [
          "CRUD",
          "Items"
        ]
      }
    },
    "/api/workspaces/{workspaceId}/items/bulk": {
      "post": {
        "description": "Accepts a list of create/update/patch/delete operations (see the request model for more details).<br/>\nEach operations can target a single or multiple items.<br/>\nReturns a list of results for each input operation including errors.<br/>\nGuarantees that the size and order of the returned results matches the input list of operations.<br/>Requirements:<br/>  - auth-client scopes: \"workspace\"<br/>  - user permission: \"write\" or higher<br/>Returns:<br/>401 if user does not have the required permission",
        "operationId": "bulkItems",
        "parameters": [
          {
            "in": "path",
            "name": "workspaceId",
            "required": true,
            "schema": {
              "format": "uuid",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "items": {
                  "$ref": "#/components/schemas/ItemBulkAction"
                },
                "type": "array"
              }
            },
            "application/json+markdown": {
              "schema": {
                "items": {
                  "$ref": "#/components/schemas/ItemBulkAction"
                },
                "type": "array"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ItemWithItemEmbedOrNullList"
                }
              },
              "application/json+markdown": {
                "schema": {
                  "$ref": "#/components/schemas/ItemWithItemEmbedOrNullList"
                }
              }
            },
            "description": ""
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "Perform multiple operations with items",
        "tags": [
          "CRUD",
          "Items"
        ]
      }
    },
    "/api/workspaces/{workspaceId}/items/list": {
      "post": {
        "description": "Returns a list of items.<br/>\nReturns null for those items which are not found or not accessible.<br/>\nGuarantees that the size and order of the returned list matches the requested IDs.<br/>Requirements:<br/>  - auth-client scopes: \"workspace:read\"<br/>  - user permission: \"read\" or higher<br/>Returns:<br/>401 if user does not have the required permission",
        "operationId": "listItems",
        "parameters": [
          {
            "in": "path",
            "name": "workspaceId",
            "required": true,
            "schema": {
              "format": "uuid",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "items": {
                  "format": "uuid",
                  "type": "string"
                },
                "type": "array"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ItemWithItemEmbedOrNullList"
                }
              },
              "application/json+markdown": {
                "schema": {
                  "$ref": "#/components/schemas/ItemWithItemEmbedOrNullList"
                }
              }
            },
            "description": ""
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "Retrieve multiple items by their IDs",
        "tags": [
          "CRUD",
          "Items"
        ]
      }
    },
    "/api/workspaces/{workspaceId}/items/reset-colors": {
      "post": {
        "description": "Sets all items to match the color configured in the workspace settings if it's configured, otherwise resets each item with a randomly generated color from the available color palette.<br/>Requirements:<br/>  - auth-client scopes: \"workspace\"<br/>  - user permission: \"write\" or higher<br/>Returns:<br/>401 if user does not have the required permission",
        "operationId": "resetItemColors",
        "parameters": [
          {
            "in": "path",
            "name": "workspaceId",
            "required": true,
            "schema": {
              "format": "uuid",
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": ""
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "Reset colors of all items in the specified workspace.",
        "tags": [
          "Items"
        ]
      }
    },
    "/api/workspaces/{workspaceId}/items/search": {
      "post": {
        "description": "Returns all items or searches items by query. Always returns only items which are accessible by the current user.<br/>Requirements:<br/>  - auth-client scopes: \"workspace:read\"<br/>  - user permission: \"read\" or higher<br/>Returns:<br/>401 if user does not have the required permission",
        "operationId": "searchItems",
        "parameters": [
          {
            "in": "path",
            "name": "workspaceId",
            "required": true,
            "schema": {
              "format": "uuid",
              "type": "string"
            }
          },
          {
            "description": "How many elements to skip.",
            "in": "query",
            "name": "offset",
            "required": false,
            "schema": {
              "default": 0,
              "format": "int32",
              "minimum": 0,
              "type": "integer"
            }
          },
          {
            "description": "How many elements to return.",
            "in": "query",
            "name": "limit",
            "required": false,
            "schema": {
              "default": 10,
              "format": "int32",
              "maximum": 1000,
              "minimum": 0,
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "anyOf": [
                  {
                    "$ref": "#/components/schemas/ItemSearchQuery"
                  },
                  {
                    "type": "null"
                  }
                ]
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ItemWithItemEmbedPage"
                }
              },
              "application/json+markdown": {
                "schema": {
                  "$ref": "#/components/schemas/ItemWithItemEmbedPage"
                }
              }
            },
            "description": ""
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "Retrieve or search items",
        "tags": [
          "CRUD",
          "Items"
        ]
      }
    },
    "/api/workspaces/{workspaceId}/items/unwatch": {
      "post": {
        "description": "<br/>Requirements:<br/>  - auth-client scopes: \"workspace\"<br/>  - user permission: \"write\" or higher<br/>Returns:<br/>401 if user does not have the required permission",
        "operationId": "unwatchItems",
        "parameters": [
          {
            "in": "path",
            "name": "workspaceId",
            "required": true,
            "schema": {
              "format": "uuid",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "items": {
                  "format": "uuid",
                  "type": "string"
                },
                "type": "array",
                "uniqueItems": true
              }
            }
          },
          "description": "List of item IDs to unwatch.",
          "required": false
        },
        "responses": {
          "204": {
            "description": ""
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "Remove watching status of the current user for the specified items.",
        "tags": [
          "Items"
        ]
      }
    },
    "/api/workspaces/{workspaceId}/items/watch": {
      "post": {
        "description": "<br/>Requirements:<br/>  - auth-client scopes: \"workspace\"<br/>  - user permission: \"write\" or higher<br/>Returns:<br/>401 if user does not have the required permission",
        "operationId": "watchItems",
        "parameters": [
          {
            "in": "path",
            "name": "workspaceId",
            "required": true,
            "schema": {
              "format": "uuid",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "items": {
                  "format": "uuid",
                  "type": "string"
                },
                "type": "array",
                "uniqueItems": true
              }
            }
          },
          "description": "List of item IDs to watch.",
          "required": false
        },
        "responses": {
          "204": {
            "description": ""
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "Set current user as a watcher of the specified items.",
        "tags": [
          "Items"
        ]
      }
    },
    "/api/workspaces/{workspaceId}/items/{itemId}": {
      "delete": {
        "description": "Returns empty result if the item was successfully deleted.<br/>Requirements:<br/>  - auth-client scopes: \"workspace\"<br/>  - user permission: \"write\" or higher<br/>Returns:<br/>400 if the resource is not found<br/>401 if user does not have the required permission",
        "operationId": "deleteItem",
        "parameters": [
          {
            "in": "path",
            "name": "workspaceId",
            "required": true,
            "schema": {
              "format": "uuid",
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "itemId",
            "required": true,
            "schema": {
              "format": "uuid",
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": ""
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "Delete an existing item",
        "tags": [
          "CRUD",
          "Items"
        ]
      },
      "get": {
        "description": "Returns found item.<br/>Requirements:<br/>  - auth-client scopes: \"workspace:read\"<br/>  - user permission: \"read\" or higher<br/>Returns:<br/>400 if the resource is not found<br/>401 if user does not have the required permission",
        "operationId": "retrieveItem",
        "parameters": [
          {
            "in": "path",
            "name": "workspaceId",
            "required": true,
            "schema": {
              "format": "uuid",
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "itemId",
            "required": true,
            "schema": {
              "format": "uuid",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ItemWithItemEmbed"
                }
              },
              "application/json+markdown": {
                "schema": {
                  "$ref": "#/components/schemas/ItemWithItemEmbed"
                }
              }
            },
            "description": ""
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "Retrieve a single item by its ID",
        "tags": [
          "CRUD",
          "Items"
        ]
      },
      "patch": {
        "description": "Returns the whole updated item with its sanitised data.<br/>Requirements:<br/>  - auth-client scopes: \"workspace\"<br/>  - user permission: \"write\" or higher<br/>Returns:<br/>400 if the resource is not found<br/>401 if user does not have the required permission",
        "operationId": "patchItem",
        "parameters": [
          {
            "in": "path",
            "name": "workspaceId",
            "required": true,
            "schema": {
              "format": "uuid",
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "itemId",
            "required": true,
            "schema": {
              "format": "uuid",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/JsonPatch"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ItemWithItemEmbed"
                }
              },
              "application/json+markdown": {
                "schema": {
                  "$ref": "#/components/schemas/ItemWithItemEmbed"
                }
              }
            },
            "description": ""
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "Patch an existing item",
        "tags": [
          "CRUD",
          "Items"
        ]
      },
      "put": {
        "description": "Returns updated item with its sanitised data.<br/>Requirements:<br/>  - auth-client scopes: \"workspace\"<br/>  - user permission: \"write\" or higher<br/>Returns:<br/>400 if the resource is not found<br/>401 if user does not have the required permission",
        "operationId": "updateItem",
        "parameters": [
          {
            "in": "path",
            "name": "workspaceId",
            "required": true,
            "schema": {
              "format": "uuid",
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "itemId",
            "required": true,
            "schema": {
              "format": "uuid",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Item"
              }
            },
            "application/json+markdown": {
              "schema": {
                "$ref": "#/components/schemas/Item"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ItemWithItemEmbed"
                }
              },
              "application/json+markdown": {
                "schema": {
                  "$ref": "#/components/schemas/ItemWithItemEmbed"
                }
              }
            },
            "description": ""
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "Update an existing item",
        "tags": [
          "CRUD",
          "Items"
        ]
      }
    },
    "/api/workspaces/{workspaceId}/links": {
      "post": {
        "description": "Returns newly created item link with its sanitised data.<br/>Requirements:<br/>  - auth-client scopes: \"workspace\"<br/>  - user permission: \"write\" or higher<br/>Returns:<br/>401 if user does not have the required permission",
        "operationId": "createItemLink",
        "parameters": [
          {
            "description": "ID of the workspace which contains the managed links.",
            "in": "path",
            "name": "workspaceId",
            "required": true,
            "schema": {
              "format": "uuid",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ItemLink"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ItemLinkWithItemLinkEmbed"
                }
              }
            },
            "description": ""
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "Create a new item link",
        "tags": [
          "CRUD",
          "ItemLinks"
        ]
      }
    },
    "/api/workspaces/{workspaceId}/links/bulk": {
      "post": {
        "description": "Accepts a list of create/update/patch/delete operations (see the request model for more details).<br/>\nEach operations can target a single or multiple item links.<br/>\nReturns a list of results for each input operation including errors.<br/>\nGuarantees that the size and order of the returned results matches the input list of operations.<br/>Requirements:<br/>  - auth-client scopes: \"workspace\"<br/>  - user permission: \"write\" or higher<br/>Returns:<br/>401 if user does not have the required permission",
        "operationId": "bulkItemLinks",
        "parameters": [
          {
            "description": "ID of the workspace which contains the managed links.",
            "in": "path",
            "name": "workspaceId",
            "required": true,
            "schema": {
              "format": "uuid",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "items": {
                  "$ref": "#/components/schemas/ItemLinkBulkAction"
                },
                "type": "array"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ItemLinkWithItemLinkEmbedOrNullList"
                }
              }
            },
            "description": ""
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "Perform multiple operations with item links",
        "tags": [
          "CRUD",
          "ItemLinks"
        ]
      }
    },
    "/api/workspaces/{workspaceId}/links/list": {
      "post": {
        "description": "Returns a list of item links.<br/>\nReturns null for those item links which are not found or not accessible.<br/>\nGuarantees that the size and order of the returned list matches the requested IDs.<br/>Requirements:<br/>  - auth-client scopes: \"workspace:read\"<br/>  - user permission: \"read\" or higher<br/>Returns:<br/>401 if user does not have the required permission",
        "operationId": "listItemLinks",
        "parameters": [
          {
            "description": "ID of the workspace which contains the managed links.",
            "in": "path",
            "name": "workspaceId",
            "required": true,
            "schema": {
              "format": "uuid",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "items": {
                  "format": "uuid",
                  "type": "string"
                },
                "type": "array"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ItemLinkWithItemLinkEmbedOrNullList"
                }
              }
            },
            "description": ""
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "Retrieve multiple item links by their IDs",
        "tags": [
          "CRUD",
          "ItemLinks"
        ]
      }
    },
    "/api/workspaces/{workspaceId}/links/search": {
      "post": {
        "description": "Returns all item links or searches item links by query. Always returns only item links which are accessible by the current user.<br/>Requirements:<br/>  - auth-client scopes: \"workspace:read\"<br/>  - user permission: \"read\" or higher<br/>Returns:<br/>401 if user does not have the required permission",
        "operationId": "searchItemLinks",
        "parameters": [
          {
            "description": "ID of the workspace which contains the managed links.",
            "in": "path",
            "name": "workspaceId",
            "required": true,
            "schema": {
              "format": "uuid",
              "type": "string"
            }
          },
          {
            "description": "How many elements to skip.",
            "in": "query",
            "name": "offset",
            "required": false,
            "schema": {
              "default": 0,
              "format": "int32",
              "minimum": 0,
              "type": "integer"
            }
          },
          {
            "description": "How many elements to return.",
            "in": "query",
            "name": "limit",
            "required": false,
            "schema": {
              "default": 10,
              "format": "int32",
              "maximum": 1000,
              "minimum": 0,
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "anyOf": [
                  {
                    "$ref": "#/components/schemas/ItemLinkSearchQuery"
                  },
                  {
                    "type": "null"
                  }
                ]
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ItemLinkWithItemLinkEmbedPage"
                }
              }
            },
            "description": ""
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "Retrieve or search item links",
        "tags": [
          "CRUD",
          "ItemLinks"
        ]
      }
    },
    "/api/workspaces/{workspaceId}/links/{itemLinkId}": {
      "delete": {
        "description": "Returns empty result if the item link was successfully deleted.<br/>Requirements:<br/>  - auth-client scopes: \"workspace\"<br/>  - user permission: \"write\" or higher<br/>Returns:<br/>400 if the resource is not found<br/>401 if user does not have the required permission",
        "operationId": "deleteItemLink",
        "parameters": [
          {
            "description": "ID of the workspace which contains the managed links.",
            "in": "path",
            "name": "workspaceId",
            "required": true,
            "schema": {
              "format": "uuid",
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "itemLinkId",
            "required": true,
            "schema": {
              "format": "uuid",
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": ""
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "Delete an existing item link",
        "tags": [
          "CRUD",
          "ItemLinks"
        ]
      },
      "get": {
        "description": "Returns found item link.<br/>Requirements:<br/>  - auth-client scopes: \"workspace:read\"<br/>  - user permission: \"read\" or higher<br/>Returns:<br/>400 if the resource is not found<br/>401 if user does not have the required permission",
        "operationId": "retrieveItemLink",
        "parameters": [
          {
            "description": "ID of the workspace which contains the managed links.",
            "in": "path",
            "name": "workspaceId",
            "required": true,
            "schema": {
              "format": "uuid",
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "itemLinkId",
            "required": true,
            "schema": {
              "format": "uuid",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ItemLinkWithItemLinkEmbed"
                }
              }
            },
            "description": ""
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "Retrieve a single item link by its ID",
        "tags": [
          "CRUD",
          "ItemLinks"
        ]
      },
      "patch": {
        "description": "Returns the whole updated item link with its sanitised data.<br/>Requirements:<br/>  - auth-client scopes: \"workspace\"<br/>  - user permission: \"write\" or higher<br/>Returns:<br/>400 if the resource is not found<br/>401 if user does not have the required permission",
        "operationId": "patchItemLink",
        "parameters": [
          {
            "description": "ID of the workspace which contains the managed links.",
            "in": "path",
            "name": "workspaceId",
            "required": true,
            "schema": {
              "format": "uuid",
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "itemLinkId",
            "required": true,
            "schema": {
              "format": "uuid",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/JsonPatch"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ItemLinkWithItemLinkEmbed"
                }
              }
            },
            "description": ""
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "Patch an existing item link",
        "tags": [
          "CRUD",
          "ItemLinks"
        ]
      },
      "put": {
        "description": "Returns updated item link with its sanitised data.<br/>Requirements:<br/>  - auth-client scopes: \"workspace\"<br/>  - user permission: \"write\" or higher<br/>Returns:<br/>400 if the resource is not found<br/>401 if user does not have the required permission",
        "operationId": "updateItemLink",
        "parameters": [
          {
            "description": "ID of the workspace which contains the managed links.",
            "in": "path",
            "name": "workspaceId",
            "required": true,
            "schema": {
              "format": "uuid",
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "itemLinkId",
            "required": true,
            "schema": {
              "format": "uuid",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ItemLink"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ItemLinkWithItemLinkEmbed"
                }
              }
            },
            "description": ""
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "Update an existing item link",
        "tags": [
          "CRUD",
          "ItemLinks"
        ]
      }
    },
    "/api/workspaces/{workspaceId}/milestones": {
      "post": {
        "description": "Returns newly created milestone with its sanitised data.<br/>Requirements:<br/>  - auth-client scopes: \"workspace\"<br/>  - user permission: \"write\" or higher<br/>Returns:<br/>401 if user does not have the required permission",
        "operationId": "createItemLink",
        "parameters": [
          {
            "description": "ID of the workspace which contains the managed links.",
            "in": "path",
            "name": "workspaceId",
            "required": true,
            "schema": {
              "format": "uuid",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Milestone"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MilestoneWithEmbed"
                }
              }
            },
            "description": ""
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "Create a new milestone",
        "tags": [
          "CRUD",
          "ItemLinks"
        ]
      }
    },
    "/api/workspaces/{workspaceId}/milestones/bulk": {
      "post": {
        "description": "Accepts a list of create/update/patch/delete operations (see the request model for more details).<br/>\nEach operations can target a single or multiple milestones.<br/>\nReturns a list of results for each input operation including errors.<br/>\nGuarantees that the size and order of the returned results matches the input list of operations.<br/>Requirements:<br/>  - auth-client scopes: \"workspace\"<br/>  - user permission: \"write\" or higher<br/>Returns:<br/>401 if user does not have the required permission",
        "operationId": "bulkItemLinks",
        "parameters": [
          {
            "description": "ID of the workspace which contains the managed links.",
            "in": "path",
            "name": "workspaceId",
            "required": true,
            "schema": {
              "format": "uuid",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "items": {
                  "$ref": "#/components/schemas/ItemLinkBulkAction"
                },
                "type": "array"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MilestoneWithEmbedOrNullList"
                }
              }
            },
            "description": ""
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "Perform multiple operations with milestones",
        "tags": [
          "CRUD",
          "ItemLinks"
        ]
      }
    },
    "/api/workspaces/{workspaceId}/milestones/list": {
      "post": {
        "description": "Returns a list of milestones.<br/>\nReturns null for those milestones which are not found or not accessible.<br/>\nGuarantees that the size and order of the returned list matches the requested IDs.<br/>Requirements:<br/>  - auth-client scopes: \"workspace:read\"<br/>  - user permission: \"read\" or higher<br/>Returns:<br/>401 if user does not have the required permission",
        "operationId": "listItemLinks",
        "parameters": [
          {
            "description": "ID of the workspace which contains the managed links.",
            "in": "path",
            "name": "workspaceId",
            "required": true,
            "schema": {
              "format": "uuid",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "items": {
                  "format": "uuid",
                  "type": "string"
                },
                "type": "array"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MilestoneWithEmbedOrNullList"
                }
              }
            },
            "description": ""
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "Retrieve multiple milestones by their IDs",
        "tags": [
          "CRUD",
          "ItemLinks"
        ]
      }
    },
    "/api/workspaces/{workspaceId}/milestones/search": {
      "post": {
        "description": "Returns all milestones or searches milestones by query. Always returns only milestones which are accessible by the current user.<br/>Requirements:<br/>  - auth-client scopes: \"workspace:read\"<br/>  - user permission: \"read\" or higher<br/>Returns:<br/>401 if user does not have the required permission",
        "operationId": "searchItemLinks",
        "parameters": [
          {
            "description": "ID of the workspace which contains the managed links.",
            "in": "path",
            "name": "workspaceId",
            "required": true,
            "schema": {
              "format": "uuid",
              "type": "string"
            }
          },
          {
            "description": "How many elements to skip.",
            "in": "query",
            "name": "offset",
            "required": false,
            "schema": {
              "default": 0,
              "format": "int32",
              "minimum": 0,
              "type": "integer"
            }
          },
          {
            "description": "How many elements to return.",
            "in": "query",
            "name": "limit",
            "required": false,
            "schema": {
              "default": 10,
              "format": "int32",
              "maximum": 1000,
              "minimum": 0,
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": [
                  "object",
                  "null"
                ]
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MilestoneWithEmbedPage"
                }
              }
            },
            "description": ""
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "Retrieve or search milestones",
        "tags": [
          "CRUD",
          "ItemLinks"
        ]
      }
    },
    "/api/workspaces/{workspaceId}/milestones/{itemLinkId}": {
      "delete": {
        "description": "Returns empty result if the milestone was successfully deleted.<br/>Requirements:<br/>  - auth-client scopes: \"workspace\"<br/>  - user permission: \"write\" or higher<br/>Returns:<br/>400 if the resource is not found<br/>401 if user does not have the required permission",
        "operationId": "deleteItemLink",
        "parameters": [
          {
            "description": "ID of the workspace which contains the managed links.",
            "in": "path",
            "name": "workspaceId",
            "required": true,
            "schema": {
              "format": "uuid",
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "itemLinkId",
            "required": true,
            "schema": {
              "format": "uuid",
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": ""
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "Delete an existing milestone",
        "tags": [
          "CRUD",
          "ItemLinks"
        ]
      },
      "get": {
        "description": "Returns found milestone.<br/>Requirements:<br/>  - auth-client scopes: \"workspace:read\"<br/>  - user permission: \"read\" or higher<br/>Returns:<br/>400 if the resource is not found<br/>401 if user does not have the required permission",
        "operationId": "retrieveItemLink",
        "parameters": [
          {
            "description": "ID of the workspace which contains the managed links.",
            "in": "path",
            "name": "workspaceId",
            "required": true,
            "schema": {
              "format": "uuid",
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "itemLinkId",
            "required": true,
            "schema": {
              "format": "uuid",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MilestoneWithEmbed"
                }
              }
            },
            "description": ""
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "Retrieve a single milestone by its ID",
        "tags": [
          "CRUD",
          "ItemLinks"
        ]
      },
      "patch": {
        "description": "Returns the whole updated milestone with its sanitised data.<br/>Requirements:<br/>  - auth-client scopes: \"workspace\"<br/>  - user permission: \"write\" or higher<br/>Returns:<br/>400 if the resource is not found<br/>401 if user does not have the required permission",
        "operationId": "patchItemLink",
        "parameters": [
          {
            "description": "ID of the workspace which contains the managed links.",
            "in": "path",
            "name": "workspaceId",
            "required": true,
            "schema": {
              "format": "uuid",
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "itemLinkId",
            "required": true,
            "schema": {
              "format": "uuid",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/JsonPatch"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MilestoneWithEmbed"
                }
              }
            },
            "description": ""
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "Patch an existing milestone",
        "tags": [
          "CRUD",
          "ItemLinks"
        ]
      },
      "put": {
        "description": "Returns updated milestone with its sanitised data.<br/>Requirements:<br/>  - auth-client scopes: \"workspace\"<br/>  - user permission: \"write\" or higher<br/>Returns:<br/>400 if the resource is not found<br/>401 if user does not have the required permission",
        "operationId": "updateItemLink",
        "parameters": [
          {
            "description": "ID of the workspace which contains the managed links.",
            "in": "path",
            "name": "workspaceId",
            "required": true,
            "schema": {
              "format": "uuid",
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "itemLinkId",
            "required": true,
            "schema": {
              "format": "uuid",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Milestone"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MilestoneWithEmbed"
                }
              }
            },
            "description": ""
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "Update an existing milestone",
        "tags": [
          "CRUD",
          "ItemLinks"
        ]
      }
    },
    "/api/workspaces/{workspaceId}/permissions": {
      "post": {
        "description": "Returns effective permission for the current user.<br/>Requirements:<br/>  - auth-client scopes: \"workspace\"<br/>  - user permission: \"write\" or higher<br/>Returns:<br/>401 if user does not have the required permission",
        "operationId": "updateWorkspacePermissions",
        "parameters": [
          {
            "in": "path",
            "name": "workspaceId",
            "required": true,
            "schema": {
              "format": "uuid",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/WorkspaceEndpointsWorkspacePermissionsUpdateRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "anyOf": [
                    {
                      "$ref": "#/components/schemas/Permission"
                    },
                    {
                      "type": "null"
                    }
                  ]
                }
              }
            },
            "description": ""
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "Update workspace permissions.",
        "tags": [
          "Workspaces"
        ]
      }
    },
    "/api/workspaces/{workspaceId}/statuses": {
      "post": {
        "description": "Set statuses all at once for the specified workspace.\nNew statuses in the list will be added to the database, missing statuses will be removed from the database, all other statuses will be updated.\nEach workspace must have at least one status in each category: 'draft', 'active', 'closed'<br/>Requirements:<br/>  - auth-client scopes: \"workspace\"<br/>  - user permission: \"full\"<br/>Returns:<br/>401 if user does not have the required permission",
        "operationId": "setWorkspaceStatuses",
        "parameters": [
          {
            "in": "path",
            "name": "workspaceId",
            "required": true,
            "schema": {
              "format": "uuid",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/WorkspaceEndpointsSetStatusesRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": ""
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": ""
          }
        },
        "tags": [
          "Workspaces"
        ]
      }
    }
  },
  "servers": [
    {
      "url": "https://app.airfocus.com"
    }
  ],
  "tags": [
    {
      "description": "Manage comments on items.",
      "name": "Comments"
    },
    {
      "description": "Manage items.",
      "name": "Items"
    },
    {
      "description": "Manage milestones in a single workspace.",
      "name": "ItemLinks"
    },
    {
      "description": "Endpoints for managing workspace fields.",
      "name": "Fields"
    },
    {
      "description": "Dependency links between items.",
      "name": "ItemLinks"
    },
    {
      "description": "Connect items with uploaded attachment-files. Note: this module is not responsible for uploading files, it only manages the links between items and files.",
      "name": "ItemAttachments"
    },
    {
      "description": "Manage item relations (hierarchy).",
      "name": "ItemRelations"
    },
    {
      "description": "Manage workspace relations (hierarchy).",
      "name": "WorkspaceRelations"
    },
    {
      "description": "Endpoints for creating workspaces via templates.",
      "name": "Templates"
    },
    {
      "description": "Manage workspace groups.",
      "name": "WorkspaceGroups"
    },
    {
      "description": "Manage workspaces.",
      "name": "Workspaces"
    }
  ]
}
